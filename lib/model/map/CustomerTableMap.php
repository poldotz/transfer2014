<?php



/**
 * This class defines the structure of the 'sf_guard_user_profile' table.
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Wed Oct 22 14:16:39 2014
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    propel.generator.lib.model.map
 */
class CustomerTableMap extends TableMap
{

    /**
     * The (dot-path) name of this class
     */
    const CLASS_NAME = 'lib.model.map.CustomerTableMap';

    /**
     * Initialize the table attributes, columns and validators
     * Relations are not initialized by this method since they are lazy loaded
     *
     * @return void
     * @throws PropelException
     */
    public function initialize()
    {
        // attributes
        $this->setName('sf_guard_user_profile');
        $this->setPhpName('Customer');
        $this->setClassname('Customer');
        $this->setPackage('lib.model');
        $this->setUseIdGenerator(true);
        // columns
        $this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
        $this->addColumn('IS_ACTIVE', 'IsActive', 'BOOLEAN', true, 1, true);
        $this->addForeignKey('USER_ID', 'UserId', 'INTEGER', 'sf_guard_user', 'ID', false, null, null);
        $this->addForeignKey('CUSTOMER_TYPE_ID', 'CustomerTypeId', 'INTEGER', 'customer_type', 'ID', false, null, null);
        $this->addColumn('NAME', 'Name', 'VARCHAR', true, 100, null);
        $this->addColumn('VAT_NUMBER', 'VatNumber', 'VARCHAR', false, 12, null);
        $this->addColumn('TAX_CODE', 'TaxCode', 'VARCHAR', false, 16, null);
        $this->addColumn('PHONE', 'Phone', 'VARCHAR', false, 20, null);
        $this->addColumn('FAX', 'Fax', 'VARCHAR', false, 20, null);
        $this->addColumn('MOBILE', 'Mobile', 'VARCHAR', false, 20, null);
        $this->addColumn('EMAIL', 'Email', 'VARCHAR', false, 100, null);
        $this->addColumn('SITE', 'Site', 'VARCHAR', false, 150, null);
        $this->addColumn('FORMATTED_ADDRESS', 'FormattedAddress', 'VARCHAR', false, 150, null);
        $this->addColumn('IBAN', 'Iban', 'VARCHAR', false, 27, null);
        $this->addColumn('BIC', 'Bic', 'VARCHAR', false, 11, null);
        $this->addColumn('CREATED_AT', 'CreatedAt', 'TIMESTAMP', false, null, null);
        $this->addColumn('UPDATED_AT', 'UpdatedAt', 'TIMESTAMP', false, null, null);
        $this->addColumn('LATITUDE', 'Latitude', 'DOUBLE', false, 10, null);
        $this->addColumn('LONGITUDE', 'Longitude', 'DOUBLE', false, 10, null);
        // validators
    } // initialize()

    /**
     * Build the RelationMap objects for this table relationships
     */
    public function buildRelations()
    {
        $this->addRelation('sfGuardUser', 'sfGuardUser', RelationMap::MANY_TO_ONE, array('user_id' => 'id', ), 'SET NULL', null);
        $this->addRelation('CustomerType', 'CustomerType', RelationMap::MANY_TO_ONE, array('customer_type_id' => 'id', ), 'CASCADE', null);
        $this->addRelation('CustomerRateTable', 'CustomerRateTable', RelationMap::ONE_TO_MANY, array('id' => 'customer_id', ), 'CASCADE', 'CASCADE', 'CustomerRateTables');
        $this->addRelation('Booking', 'Booking', RelationMap::ONE_TO_MANY, array('id' => 'customer_id', ), null, null, 'Bookings');
    } // buildRelations()

    /**
     *
     * Gets the list of behaviors registered for this table
     *
     * @return array Associative array (name => parameters) of behaviors
     */
    public function getBehaviors()
    {
        return array(
            'Timestampable' => array('create_column' => 'created_at', 'update_column' => 'updated_at', 'disable_updated_at' => 'false', ),
            'Geocodable' => array('auto_update' => 'true', 'latitude_column' => 'latitude', 'longitude_column' => 'longitude', 'type' => 'DOUBLE', 'size' => '10', 'scale' => '8', 'geocode_ip' => 'false', 'ip_column' => 'ip_address', 'geocode_address' => 'true', 'address_columns' => 'formatted_address', 'geocoder_provider' => '\Geocoder\Provider\GoogleMapsProvider', 'geocoder_adapter' => '\Geocoder\HttpAdapter\CurlHttpAdapter', 'geocoder_api_key' => 'AIzaSyDHe1uZEarjAj5pYie_sNwZsEqwLaeuUeY', 'geocoder_api_key_provider' => 'false', ),
            'symfony' => array('form' => 'true', 'filter' => 'true', ),
            'symfony_behaviors' => array(),
            'symfony_timestampable' => array('create_column' => 'created_at', 'update_column' => 'updated_at', ),
        );
    } // getBehaviors()

} // CustomerTableMap
