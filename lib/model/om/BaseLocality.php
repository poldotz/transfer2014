<?php


/**
 * Base class that represents a row from the 'locality' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue 13 May 2014 12:39:44 PM CEST
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseLocality extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'LocalityPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        LocalityPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the user_id field.
     * @var        int
     */
    protected $user_id;

    /**
     * The value for the is_vector field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $is_vector;

    /**
     * The value for the is_active field.
     * Note: this column has a database default value of: true
     * @var        boolean
     */
    protected $is_active;

    /**
     * The value for the name field.
     * @var        string
     */
    protected $name;

    /**
     * The value for the phone field.
     * @var        string
     */
    protected $phone;

    /**
     * The value for the fax field.
     * @var        string
     */
    protected $fax;

    /**
     * The value for the mobile field.
     * @var        string
     */
    protected $mobile;

    /**
     * The value for the email field.
     * @var        string
     */
    protected $email;

    /**
     * The value for the site field.
     * @var        string
     */
    protected $site;

    /**
     * The value for the formatted_address field.
     * @var        string
     */
    protected $formatted_address;

    /**
     * The value for the created_at field.
     * @var        string
     */
    protected $created_at;

    /**
     * The value for the updated_at field.
     * @var        string
     */
    protected $updated_at;

    /**
     * The value for the latitude field.
     * @var        double
     */
    protected $latitude;

    /**
     * The value for the longitude field.
     * @var        double
     */
    protected $longitude;

    /**
     * @var        sfGuardUser
     */
    protected $asfGuardUser;

    /**
     * @var        PropelObjectCollection|Route[] Collection to store aggregation of Route objects.
     */
    protected $collRoutesRelatedByLocalityFrom;
    protected $collRoutesRelatedByLocalityFromPartial;

    /**
     * @var        PropelObjectCollection|Route[] Collection to store aggregation of Route objects.
     */
    protected $collRoutesRelatedByLocalityTo;
    protected $collRoutesRelatedByLocalityToPartial;

    /**
     * @var        PropelObjectCollection|Arrival[] Collection to store aggregation of Arrival objects.
     */
    protected $collArrivalsRelatedByLocalityFrom;
    protected $collArrivalsRelatedByLocalityFromPartial;

    /**
     * @var        PropelObjectCollection|Arrival[] Collection to store aggregation of Arrival objects.
     */
    protected $collArrivalsRelatedByLocalityTo;
    protected $collArrivalsRelatedByLocalityToPartial;

    /**
     * @var        PropelObjectCollection|Departure[] Collection to store aggregation of Departure objects.
     */
    protected $collDeparturesRelatedByLocalityFrom;
    protected $collDeparturesRelatedByLocalityFromPartial;

    /**
     * @var        PropelObjectCollection|Departure[] Collection to store aggregation of Departure objects.
     */
    protected $collDeparturesRelatedByLocalityTo;
    protected $collDeparturesRelatedByLocalityToPartial;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $routesRelatedByLocalityFromScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $routesRelatedByLocalityToScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $arrivalsRelatedByLocalityFromScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $arrivalsRelatedByLocalityToScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $departuresRelatedByLocalityFromScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $departuresRelatedByLocalityToScheduledForDeletion = null;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->is_vector = false;
        $this->is_active = true;
    }

    /**
     * Initializes internal state of BaseLocality object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [user_id] column value.
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->user_id;
    }

    /**
     * Get the [is_vector] column value.
     *
     * @return boolean
     */
    public function getIsVector()
    {
        return $this->is_vector;
    }

    /**
     * Get the [is_active] column value.
     *
     * @return boolean
     */
    public function getIsActive()
    {
        return $this->is_active;
    }

    /**
     * Get the [name] column value.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Get the [phone] column value.
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     * Get the [fax] column value.
     *
     * @return string
     */
    public function getFax()
    {
        return $this->fax;
    }

    /**
     * Get the [mobile] column value.
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->mobile;
    }

    /**
     * Get the [email] column value.
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Get the [site] column value.
     *
     * @return string
     */
    public function getSite()
    {
        return $this->site;
    }

    /**
     * Get the [formatted_address] column value.
     *
     * @return string
     */
    public function getFormattedAddress()
    {
        return $this->formatted_address;
    }

    /**
     * Get the [optionally formatted] temporal [created_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getCreatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->created_at === null) {
            return null;
        }

        if ($this->created_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->created_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [updated_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getUpdatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->updated_at === null) {
            return null;
        }

        if ($this->updated_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->updated_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [latitude] column value.
     *
     * @return double
     */
    public function getLatitude()
    {
        return $this->latitude;
    }

    /**
     * Get the [longitude] column value.
     *
     * @return double
     */
    public function getLongitude()
    {
        return $this->longitude;
    }

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return Locality The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = LocalityPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [user_id] column.
     *
     * @param int $v new value
     * @return Locality The current object (for fluent API support)
     */
    public function setUserId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->user_id !== $v) {
            $this->user_id = $v;
            $this->modifiedColumns[] = LocalityPeer::USER_ID;
        }

        if ($this->asfGuardUser !== null && $this->asfGuardUser->getId() !== $v) {
            $this->asfGuardUser = null;
        }


        return $this;
    } // setUserId()

    /**
     * Sets the value of the [is_vector] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Locality The current object (for fluent API support)
     */
    public function setIsVector($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->is_vector !== $v) {
            $this->is_vector = $v;
            $this->modifiedColumns[] = LocalityPeer::IS_VECTOR;
        }


        return $this;
    } // setIsVector()

    /**
     * Sets the value of the [is_active] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Locality The current object (for fluent API support)
     */
    public function setIsActive($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->is_active !== $v) {
            $this->is_active = $v;
            $this->modifiedColumns[] = LocalityPeer::IS_ACTIVE;
        }


        return $this;
    } // setIsActive()

    /**
     * Set the value of [name] column.
     *
     * @param string $v new value
     * @return Locality The current object (for fluent API support)
     */
    public function setName($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->name !== $v) {
            $this->name = $v;
            $this->modifiedColumns[] = LocalityPeer::NAME;
        }


        return $this;
    } // setName()

    /**
     * Set the value of [phone] column.
     *
     * @param string $v new value
     * @return Locality The current object (for fluent API support)
     */
    public function setPhone($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->phone !== $v) {
            $this->phone = $v;
            $this->modifiedColumns[] = LocalityPeer::PHONE;
        }


        return $this;
    } // setPhone()

    /**
     * Set the value of [fax] column.
     *
     * @param string $v new value
     * @return Locality The current object (for fluent API support)
     */
    public function setFax($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->fax !== $v) {
            $this->fax = $v;
            $this->modifiedColumns[] = LocalityPeer::FAX;
        }


        return $this;
    } // setFax()

    /**
     * Set the value of [mobile] column.
     *
     * @param string $v new value
     * @return Locality The current object (for fluent API support)
     */
    public function setMobile($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->mobile !== $v) {
            $this->mobile = $v;
            $this->modifiedColumns[] = LocalityPeer::MOBILE;
        }


        return $this;
    } // setMobile()

    /**
     * Set the value of [email] column.
     *
     * @param string $v new value
     * @return Locality The current object (for fluent API support)
     */
    public function setEmail($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->email !== $v) {
            $this->email = $v;
            $this->modifiedColumns[] = LocalityPeer::EMAIL;
        }


        return $this;
    } // setEmail()

    /**
     * Set the value of [site] column.
     *
     * @param string $v new value
     * @return Locality The current object (for fluent API support)
     */
    public function setSite($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->site !== $v) {
            $this->site = $v;
            $this->modifiedColumns[] = LocalityPeer::SITE;
        }


        return $this;
    } // setSite()

    /**
     * Set the value of [formatted_address] column.
     *
     * @param string $v new value
     * @return Locality The current object (for fluent API support)
     */
    public function setFormattedAddress($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->formatted_address !== $v) {
            $this->formatted_address = $v;
            $this->modifiedColumns[] = LocalityPeer::FORMATTED_ADDRESS;
        }


        return $this;
    } // setFormattedAddress()

    /**
     * Sets the value of [created_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Locality The current object (for fluent API support)
     */
    public function setCreatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->created_at !== null || $dt !== null) {
            $currentDateAsString = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->created_at = $newDateAsString;
                $this->modifiedColumns[] = LocalityPeer::CREATED_AT;
            }
        } // if either are not null


        return $this;
    } // setCreatedAt()

    /**
     * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Locality The current object (for fluent API support)
     */
    public function setUpdatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->updated_at !== null || $dt !== null) {
            $currentDateAsString = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->updated_at = $newDateAsString;
                $this->modifiedColumns[] = LocalityPeer::UPDATED_AT;
            }
        } // if either are not null


        return $this;
    } // setUpdatedAt()

    /**
     * Set the value of [latitude] column.
     *
     * @param double $v new value
     * @return Locality The current object (for fluent API support)
     */
    public function setLatitude($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->latitude !== $v) {
            $this->latitude = $v;
            $this->modifiedColumns[] = LocalityPeer::LATITUDE;
        }


        return $this;
    } // setLatitude()

    /**
     * Set the value of [longitude] column.
     *
     * @param double $v new value
     * @return Locality The current object (for fluent API support)
     */
    public function setLongitude($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->longitude !== $v) {
            $this->longitude = $v;
            $this->modifiedColumns[] = LocalityPeer::LONGITUDE;
        }


        return $this;
    } // setLongitude()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->is_vector !== false) {
                return false;
            }

            if ($this->is_active !== true) {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->user_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
            $this->is_vector = ($row[$startcol + 2] !== null) ? (boolean) $row[$startcol + 2] : null;
            $this->is_active = ($row[$startcol + 3] !== null) ? (boolean) $row[$startcol + 3] : null;
            $this->name = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
            $this->phone = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
            $this->fax = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
            $this->mobile = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
            $this->email = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
            $this->site = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
            $this->formatted_address = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
            $this->created_at = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
            $this->updated_at = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
            $this->latitude = ($row[$startcol + 13] !== null) ? (double) $row[$startcol + 13] : null;
            $this->longitude = ($row[$startcol + 14] !== null) ? (double) $row[$startcol + 14] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 15; // 15 = LocalityPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating Locality object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

        if ($this->asfGuardUser !== null && $this->user_id !== $this->asfGuardUser->getId()) {
            $this->asfGuardUser = null;
        }
    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(LocalityPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = LocalityPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->asfGuardUser = null;
            $this->collRoutesRelatedByLocalityFrom = null;

            $this->collRoutesRelatedByLocalityTo = null;

            $this->collArrivalsRelatedByLocalityFrom = null;

            $this->collArrivalsRelatedByLocalityTo = null;

            $this->collDeparturesRelatedByLocalityFrom = null;

            $this->collDeparturesRelatedByLocalityTo = null;

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(LocalityPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = LocalityQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseLocality:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseLocality:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(LocalityPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // Geocodable behavior

            if ($this->isGeocodingNecessary()) {
                $this->geocode();
            }

            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseLocality:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            // symfony_timestampable behavior
            if ($this->isModified() && !$this->isColumnModified(LocalityPeer::UPDATED_AT))
            {
                $this->setUpdatedAt(time());
            }
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
                // Timestampable behavior
                if (!$this->isColumnModified(LocalityPeer::CREATED_AT)) {
                    $this->setCreatedAt(time());
                }
                if (!$this->isColumnModified(LocalityPeer::UPDATED_AT)) {
                    $this->setUpdatedAt(time());
                }
                // symfony_timestampable behavior
                if (!$this->isColumnModified(LocalityPeer::CREATED_AT))
                {
                  $this->setCreatedAt(time());
                }

            } else {
                $ret = $ret && $this->preUpdate($con);
                // Timestampable behavior
                if ($this->isModified() && !$this->isColumnModified(LocalityPeer::UPDATED_AT)) {
                    $this->setUpdatedAt(time());
                }
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseLocality:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                LocalityPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            // We call the save method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->asfGuardUser !== null) {
                if ($this->asfGuardUser->isModified() || $this->asfGuardUser->isNew()) {
                    $affectedRows += $this->asfGuardUser->save($con);
                }
                $this->setsfGuardUser($this->asfGuardUser);
            }

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            if ($this->routesRelatedByLocalityFromScheduledForDeletion !== null) {
                if (!$this->routesRelatedByLocalityFromScheduledForDeletion->isEmpty()) {
                    RouteQuery::create()
                        ->filterByPrimaryKeys($this->routesRelatedByLocalityFromScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->routesRelatedByLocalityFromScheduledForDeletion = null;
                }
            }

            if ($this->collRoutesRelatedByLocalityFrom !== null) {
                foreach ($this->collRoutesRelatedByLocalityFrom as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->routesRelatedByLocalityToScheduledForDeletion !== null) {
                if (!$this->routesRelatedByLocalityToScheduledForDeletion->isEmpty()) {
                    RouteQuery::create()
                        ->filterByPrimaryKeys($this->routesRelatedByLocalityToScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->routesRelatedByLocalityToScheduledForDeletion = null;
                }
            }

            if ($this->collRoutesRelatedByLocalityTo !== null) {
                foreach ($this->collRoutesRelatedByLocalityTo as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->arrivalsRelatedByLocalityFromScheduledForDeletion !== null) {
                if (!$this->arrivalsRelatedByLocalityFromScheduledForDeletion->isEmpty()) {
                    foreach ($this->arrivalsRelatedByLocalityFromScheduledForDeletion as $arrivalRelatedByLocalityFrom) {
                        // need to save related object because we set the relation to null
                        $arrivalRelatedByLocalityFrom->save($con);
                    }
                    $this->arrivalsRelatedByLocalityFromScheduledForDeletion = null;
                }
            }

            if ($this->collArrivalsRelatedByLocalityFrom !== null) {
                foreach ($this->collArrivalsRelatedByLocalityFrom as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->arrivalsRelatedByLocalityToScheduledForDeletion !== null) {
                if (!$this->arrivalsRelatedByLocalityToScheduledForDeletion->isEmpty()) {
                    foreach ($this->arrivalsRelatedByLocalityToScheduledForDeletion as $arrivalRelatedByLocalityTo) {
                        // need to save related object because we set the relation to null
                        $arrivalRelatedByLocalityTo->save($con);
                    }
                    $this->arrivalsRelatedByLocalityToScheduledForDeletion = null;
                }
            }

            if ($this->collArrivalsRelatedByLocalityTo !== null) {
                foreach ($this->collArrivalsRelatedByLocalityTo as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->departuresRelatedByLocalityFromScheduledForDeletion !== null) {
                if (!$this->departuresRelatedByLocalityFromScheduledForDeletion->isEmpty()) {
                    foreach ($this->departuresRelatedByLocalityFromScheduledForDeletion as $departureRelatedByLocalityFrom) {
                        // need to save related object because we set the relation to null
                        $departureRelatedByLocalityFrom->save($con);
                    }
                    $this->departuresRelatedByLocalityFromScheduledForDeletion = null;
                }
            }

            if ($this->collDeparturesRelatedByLocalityFrom !== null) {
                foreach ($this->collDeparturesRelatedByLocalityFrom as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->departuresRelatedByLocalityToScheduledForDeletion !== null) {
                if (!$this->departuresRelatedByLocalityToScheduledForDeletion->isEmpty()) {
                    foreach ($this->departuresRelatedByLocalityToScheduledForDeletion as $departureRelatedByLocalityTo) {
                        // need to save related object because we set the relation to null
                        $departureRelatedByLocalityTo->save($con);
                    }
                    $this->departuresRelatedByLocalityToScheduledForDeletion = null;
                }
            }

            if ($this->collDeparturesRelatedByLocalityTo !== null) {
                foreach ($this->collDeparturesRelatedByLocalityTo as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = LocalityPeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . LocalityPeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(LocalityPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(LocalityPeer::USER_ID)) {
            $modifiedColumns[':p' . $index++]  = '`USER_ID`';
        }
        if ($this->isColumnModified(LocalityPeer::IS_VECTOR)) {
            $modifiedColumns[':p' . $index++]  = '`IS_VECTOR`';
        }
        if ($this->isColumnModified(LocalityPeer::IS_ACTIVE)) {
            $modifiedColumns[':p' . $index++]  = '`IS_ACTIVE`';
        }
        if ($this->isColumnModified(LocalityPeer::NAME)) {
            $modifiedColumns[':p' . $index++]  = '`NAME`';
        }
        if ($this->isColumnModified(LocalityPeer::PHONE)) {
            $modifiedColumns[':p' . $index++]  = '`PHONE`';
        }
        if ($this->isColumnModified(LocalityPeer::FAX)) {
            $modifiedColumns[':p' . $index++]  = '`FAX`';
        }
        if ($this->isColumnModified(LocalityPeer::MOBILE)) {
            $modifiedColumns[':p' . $index++]  = '`MOBILE`';
        }
        if ($this->isColumnModified(LocalityPeer::EMAIL)) {
            $modifiedColumns[':p' . $index++]  = '`EMAIL`';
        }
        if ($this->isColumnModified(LocalityPeer::SITE)) {
            $modifiedColumns[':p' . $index++]  = '`SITE`';
        }
        if ($this->isColumnModified(LocalityPeer::FORMATTED_ADDRESS)) {
            $modifiedColumns[':p' . $index++]  = '`FORMATTED_ADDRESS`';
        }
        if ($this->isColumnModified(LocalityPeer::CREATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_AT`';
        }
        if ($this->isColumnModified(LocalityPeer::UPDATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`UPDATED_AT`';
        }
        if ($this->isColumnModified(LocalityPeer::LATITUDE)) {
            $modifiedColumns[':p' . $index++]  = '`LATITUDE`';
        }
        if ($this->isColumnModified(LocalityPeer::LONGITUDE)) {
            $modifiedColumns[':p' . $index++]  = '`LONGITUDE`';
        }

        $sql = sprintf(
            'INSERT INTO `locality` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`USER_ID`':
                        $stmt->bindValue($identifier, $this->user_id, PDO::PARAM_INT);
                        break;
                    case '`IS_VECTOR`':
                        $stmt->bindValue($identifier, (int) $this->is_vector, PDO::PARAM_INT);
                        break;
                    case '`IS_ACTIVE`':
                        $stmt->bindValue($identifier, (int) $this->is_active, PDO::PARAM_INT);
                        break;
                    case '`NAME`':
                        $stmt->bindValue($identifier, $this->name, PDO::PARAM_STR);
                        break;
                    case '`PHONE`':
                        $stmt->bindValue($identifier, $this->phone, PDO::PARAM_STR);
                        break;
                    case '`FAX`':
                        $stmt->bindValue($identifier, $this->fax, PDO::PARAM_STR);
                        break;
                    case '`MOBILE`':
                        $stmt->bindValue($identifier, $this->mobile, PDO::PARAM_STR);
                        break;
                    case '`EMAIL`':
                        $stmt->bindValue($identifier, $this->email, PDO::PARAM_STR);
                        break;
                    case '`SITE`':
                        $stmt->bindValue($identifier, $this->site, PDO::PARAM_STR);
                        break;
                    case '`FORMATTED_ADDRESS`':
                        $stmt->bindValue($identifier, $this->formatted_address, PDO::PARAM_STR);
                        break;
                    case '`CREATED_AT`':
                        $stmt->bindValue($identifier, $this->created_at, PDO::PARAM_STR);
                        break;
                    case '`UPDATED_AT`':
                        $stmt->bindValue($identifier, $this->updated_at, PDO::PARAM_STR);
                        break;
                    case '`LATITUDE`':
                        $stmt->bindValue($identifier, $this->latitude, PDO::PARAM_STR);
                        break;
                    case '`LONGITUDE`':
                        $stmt->bindValue($identifier, $this->longitude, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
            $pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            // We call the validate method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->asfGuardUser !== null) {
                if (!$this->asfGuardUser->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->asfGuardUser->getValidationFailures());
                }
            }


            if (($retval = LocalityPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }


                if ($this->collRoutesRelatedByLocalityFrom !== null) {
                    foreach ($this->collRoutesRelatedByLocalityFrom as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collRoutesRelatedByLocalityTo !== null) {
                    foreach ($this->collRoutesRelatedByLocalityTo as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collArrivalsRelatedByLocalityFrom !== null) {
                    foreach ($this->collArrivalsRelatedByLocalityFrom as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collArrivalsRelatedByLocalityTo !== null) {
                    foreach ($this->collArrivalsRelatedByLocalityTo as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collDeparturesRelatedByLocalityFrom !== null) {
                    foreach ($this->collDeparturesRelatedByLocalityFrom as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collDeparturesRelatedByLocalityTo !== null) {
                    foreach ($this->collDeparturesRelatedByLocalityTo as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }


            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = LocalityPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getUserId();
                break;
            case 2:
                return $this->getIsVector();
                break;
            case 3:
                return $this->getIsActive();
                break;
            case 4:
                return $this->getName();
                break;
            case 5:
                return $this->getPhone();
                break;
            case 6:
                return $this->getFax();
                break;
            case 7:
                return $this->getMobile();
                break;
            case 8:
                return $this->getEmail();
                break;
            case 9:
                return $this->getSite();
                break;
            case 10:
                return $this->getFormattedAddress();
                break;
            case 11:
                return $this->getCreatedAt();
                break;
            case 12:
                return $this->getUpdatedAt();
                break;
            case 13:
                return $this->getLatitude();
                break;
            case 14:
                return $this->getLongitude();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['Locality'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['Locality'][$this->getPrimaryKey()] = true;
        $keys = LocalityPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getUserId(),
            $keys[2] => $this->getIsVector(),
            $keys[3] => $this->getIsActive(),
            $keys[4] => $this->getName(),
            $keys[5] => $this->getPhone(),
            $keys[6] => $this->getFax(),
            $keys[7] => $this->getMobile(),
            $keys[8] => $this->getEmail(),
            $keys[9] => $this->getSite(),
            $keys[10] => $this->getFormattedAddress(),
            $keys[11] => $this->getCreatedAt(),
            $keys[12] => $this->getUpdatedAt(),
            $keys[13] => $this->getLatitude(),
            $keys[14] => $this->getLongitude(),
        );
        if ($includeForeignObjects) {
            if (null !== $this->asfGuardUser) {
                $result['sfGuardUser'] = $this->asfGuardUser->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->collRoutesRelatedByLocalityFrom) {
                $result['RoutesRelatedByLocalityFrom'] = $this->collRoutesRelatedByLocalityFrom->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collRoutesRelatedByLocalityTo) {
                $result['RoutesRelatedByLocalityTo'] = $this->collRoutesRelatedByLocalityTo->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collArrivalsRelatedByLocalityFrom) {
                $result['ArrivalsRelatedByLocalityFrom'] = $this->collArrivalsRelatedByLocalityFrom->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collArrivalsRelatedByLocalityTo) {
                $result['ArrivalsRelatedByLocalityTo'] = $this->collArrivalsRelatedByLocalityTo->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collDeparturesRelatedByLocalityFrom) {
                $result['DeparturesRelatedByLocalityFrom'] = $this->collDeparturesRelatedByLocalityFrom->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collDeparturesRelatedByLocalityTo) {
                $result['DeparturesRelatedByLocalityTo'] = $this->collDeparturesRelatedByLocalityTo->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = LocalityPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setUserId($value);
                break;
            case 2:
                $this->setIsVector($value);
                break;
            case 3:
                $this->setIsActive($value);
                break;
            case 4:
                $this->setName($value);
                break;
            case 5:
                $this->setPhone($value);
                break;
            case 6:
                $this->setFax($value);
                break;
            case 7:
                $this->setMobile($value);
                break;
            case 8:
                $this->setEmail($value);
                break;
            case 9:
                $this->setSite($value);
                break;
            case 10:
                $this->setFormattedAddress($value);
                break;
            case 11:
                $this->setCreatedAt($value);
                break;
            case 12:
                $this->setUpdatedAt($value);
                break;
            case 13:
                $this->setLatitude($value);
                break;
            case 14:
                $this->setLongitude($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = LocalityPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setUserId($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setIsVector($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setIsActive($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setName($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setPhone($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setFax($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setMobile($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setEmail($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setSite($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setFormattedAddress($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setCreatedAt($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setUpdatedAt($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setLatitude($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setLongitude($arr[$keys[14]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(LocalityPeer::DATABASE_NAME);

        if ($this->isColumnModified(LocalityPeer::ID)) $criteria->add(LocalityPeer::ID, $this->id);
        if ($this->isColumnModified(LocalityPeer::USER_ID)) $criteria->add(LocalityPeer::USER_ID, $this->user_id);
        if ($this->isColumnModified(LocalityPeer::IS_VECTOR)) $criteria->add(LocalityPeer::IS_VECTOR, $this->is_vector);
        if ($this->isColumnModified(LocalityPeer::IS_ACTIVE)) $criteria->add(LocalityPeer::IS_ACTIVE, $this->is_active);
        if ($this->isColumnModified(LocalityPeer::NAME)) $criteria->add(LocalityPeer::NAME, $this->name);
        if ($this->isColumnModified(LocalityPeer::PHONE)) $criteria->add(LocalityPeer::PHONE, $this->phone);
        if ($this->isColumnModified(LocalityPeer::FAX)) $criteria->add(LocalityPeer::FAX, $this->fax);
        if ($this->isColumnModified(LocalityPeer::MOBILE)) $criteria->add(LocalityPeer::MOBILE, $this->mobile);
        if ($this->isColumnModified(LocalityPeer::EMAIL)) $criteria->add(LocalityPeer::EMAIL, $this->email);
        if ($this->isColumnModified(LocalityPeer::SITE)) $criteria->add(LocalityPeer::SITE, $this->site);
        if ($this->isColumnModified(LocalityPeer::FORMATTED_ADDRESS)) $criteria->add(LocalityPeer::FORMATTED_ADDRESS, $this->formatted_address);
        if ($this->isColumnModified(LocalityPeer::CREATED_AT)) $criteria->add(LocalityPeer::CREATED_AT, $this->created_at);
        if ($this->isColumnModified(LocalityPeer::UPDATED_AT)) $criteria->add(LocalityPeer::UPDATED_AT, $this->updated_at);
        if ($this->isColumnModified(LocalityPeer::LATITUDE)) $criteria->add(LocalityPeer::LATITUDE, $this->latitude);
        if ($this->isColumnModified(LocalityPeer::LONGITUDE)) $criteria->add(LocalityPeer::LONGITUDE, $this->longitude);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(LocalityPeer::DATABASE_NAME);
        $criteria->add(LocalityPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of Locality (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setUserId($this->getUserId());
        $copyObj->setIsVector($this->getIsVector());
        $copyObj->setIsActive($this->getIsActive());
        $copyObj->setName($this->getName());
        $copyObj->setPhone($this->getPhone());
        $copyObj->setFax($this->getFax());
        $copyObj->setMobile($this->getMobile());
        $copyObj->setEmail($this->getEmail());
        $copyObj->setSite($this->getSite());
        $copyObj->setFormattedAddress($this->getFormattedAddress());
        $copyObj->setCreatedAt($this->getCreatedAt());
        $copyObj->setUpdatedAt($this->getUpdatedAt());
        $copyObj->setLatitude($this->getLatitude());
        $copyObj->setLongitude($this->getLongitude());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            foreach ($this->getRoutesRelatedByLocalityFrom() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addRouteRelatedByLocalityFrom($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getRoutesRelatedByLocalityTo() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addRouteRelatedByLocalityTo($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getArrivalsRelatedByLocalityFrom() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addArrivalRelatedByLocalityFrom($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getArrivalsRelatedByLocalityTo() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addArrivalRelatedByLocalityTo($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getDeparturesRelatedByLocalityFrom() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addDepartureRelatedByLocalityFrom($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getDeparturesRelatedByLocalityTo() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addDepartureRelatedByLocalityTo($relObj->copy($deepCopy));
                }
            }

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return Locality Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return LocalityPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new LocalityPeer();
        }

        return self::$peer;
    }

    /**
     * Declares an association between this object and a sfGuardUser object.
     *
     * @param             sfGuardUser $v
     * @return Locality The current object (for fluent API support)
     * @throws PropelException
     */
    public function setsfGuardUser(sfGuardUser $v = null)
    {
        if ($v === null) {
            $this->setUserId(NULL);
        } else {
            $this->setUserId($v->getId());
        }

        $this->asfGuardUser = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the sfGuardUser object, it will not be re-added.
        if ($v !== null) {
            $v->addLocality($this);
        }


        return $this;
    }


    /**
     * Get the associated sfGuardUser object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return sfGuardUser The associated sfGuardUser object.
     * @throws PropelException
     */
    public function getsfGuardUser(PropelPDO $con = null)
    {
        if ($this->asfGuardUser === null && ($this->user_id !== null)) {
            $this->asfGuardUser = sfGuardUserQuery::create()->findPk($this->user_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->asfGuardUser->addLocalitys($this);
             */
        }

        return $this->asfGuardUser;
    }


    /**
     * Initializes a collection based on the name of a relation.
     * Avoids crafting an 'init[$relationName]s' method name
     * that wouldn't work when StandardEnglishPluralizer is used.
     *
     * @param string $relationName The name of the relation to initialize
     * @return void
     */
    public function initRelation($relationName)
    {
        if ('RouteRelatedByLocalityFrom' == $relationName) {
            $this->initRoutesRelatedByLocalityFrom();
        }
        if ('RouteRelatedByLocalityTo' == $relationName) {
            $this->initRoutesRelatedByLocalityTo();
        }
        if ('ArrivalRelatedByLocalityFrom' == $relationName) {
            $this->initArrivalsRelatedByLocalityFrom();
        }
        if ('ArrivalRelatedByLocalityTo' == $relationName) {
            $this->initArrivalsRelatedByLocalityTo();
        }
        if ('DepartureRelatedByLocalityFrom' == $relationName) {
            $this->initDeparturesRelatedByLocalityFrom();
        }
        if ('DepartureRelatedByLocalityTo' == $relationName) {
            $this->initDeparturesRelatedByLocalityTo();
        }
    }

    /**
     * Clears out the collRoutesRelatedByLocalityFrom collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addRoutesRelatedByLocalityFrom()
     */
    public function clearRoutesRelatedByLocalityFrom()
    {
        $this->collRoutesRelatedByLocalityFrom = null; // important to set this to null since that means it is uninitialized
        $this->collRoutesRelatedByLocalityFromPartial = null;
    }

    /**
     * reset is the collRoutesRelatedByLocalityFrom collection loaded partially
     *
     * @return void
     */
    public function resetPartialRoutesRelatedByLocalityFrom($v = true)
    {
        $this->collRoutesRelatedByLocalityFromPartial = $v;
    }

    /**
     * Initializes the collRoutesRelatedByLocalityFrom collection.
     *
     * By default this just sets the collRoutesRelatedByLocalityFrom collection to an empty array (like clearcollRoutesRelatedByLocalityFrom());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initRoutesRelatedByLocalityFrom($overrideExisting = true)
    {
        if (null !== $this->collRoutesRelatedByLocalityFrom && !$overrideExisting) {
            return;
        }
        $this->collRoutesRelatedByLocalityFrom = new PropelObjectCollection();
        $this->collRoutesRelatedByLocalityFrom->setModel('Route');
    }

    /**
     * Gets an array of Route objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Locality is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Route[] List of Route objects
     * @throws PropelException
     */
    public function getRoutesRelatedByLocalityFrom($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collRoutesRelatedByLocalityFromPartial && !$this->isNew();
        if (null === $this->collRoutesRelatedByLocalityFrom || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collRoutesRelatedByLocalityFrom) {
                // return empty collection
                $this->initRoutesRelatedByLocalityFrom();
            } else {
                $collRoutesRelatedByLocalityFrom = RouteQuery::create(null, $criteria)
                    ->filterByLocalityRelatedByLocalityFrom($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collRoutesRelatedByLocalityFromPartial && count($collRoutesRelatedByLocalityFrom)) {
                      $this->initRoutesRelatedByLocalityFrom(false);

                      foreach($collRoutesRelatedByLocalityFrom as $obj) {
                        if (false == $this->collRoutesRelatedByLocalityFrom->contains($obj)) {
                          $this->collRoutesRelatedByLocalityFrom->append($obj);
                        }
                      }

                      $this->collRoutesRelatedByLocalityFromPartial = true;
                    }

                    return $collRoutesRelatedByLocalityFrom;
                }

                if($partial && $this->collRoutesRelatedByLocalityFrom) {
                    foreach($this->collRoutesRelatedByLocalityFrom as $obj) {
                        if($obj->isNew()) {
                            $collRoutesRelatedByLocalityFrom[] = $obj;
                        }
                    }
                }

                $this->collRoutesRelatedByLocalityFrom = $collRoutesRelatedByLocalityFrom;
                $this->collRoutesRelatedByLocalityFromPartial = false;
            }
        }

        return $this->collRoutesRelatedByLocalityFrom;
    }

    /**
     * Sets a collection of RouteRelatedByLocalityFrom objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $routesRelatedByLocalityFrom A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setRoutesRelatedByLocalityFrom(PropelCollection $routesRelatedByLocalityFrom, PropelPDO $con = null)
    {
        $this->routesRelatedByLocalityFromScheduledForDeletion = $this->getRoutesRelatedByLocalityFrom(new Criteria(), $con)->diff($routesRelatedByLocalityFrom);

        foreach ($this->routesRelatedByLocalityFromScheduledForDeletion as $routeRelatedByLocalityFromRemoved) {
            $routeRelatedByLocalityFromRemoved->setLocalityRelatedByLocalityFrom(null);
        }

        $this->collRoutesRelatedByLocalityFrom = null;
        foreach ($routesRelatedByLocalityFrom as $routeRelatedByLocalityFrom) {
            $this->addRouteRelatedByLocalityFrom($routeRelatedByLocalityFrom);
        }

        $this->collRoutesRelatedByLocalityFrom = $routesRelatedByLocalityFrom;
        $this->collRoutesRelatedByLocalityFromPartial = false;
    }

    /**
     * Returns the number of related Route objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Route objects.
     * @throws PropelException
     */
    public function countRoutesRelatedByLocalityFrom(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collRoutesRelatedByLocalityFromPartial && !$this->isNew();
        if (null === $this->collRoutesRelatedByLocalityFrom || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collRoutesRelatedByLocalityFrom) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getRoutesRelatedByLocalityFrom());
                }
                $query = RouteQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByLocalityRelatedByLocalityFrom($this)
                    ->count($con);
            }
        } else {
            return count($this->collRoutesRelatedByLocalityFrom);
        }
    }

    /**
     * Method called to associate a Route object to this object
     * through the Route foreign key attribute.
     *
     * @param    Route $l Route
     * @return Locality The current object (for fluent API support)
     */
    public function addRouteRelatedByLocalityFrom(Route $l)
    {
        if ($this->collRoutesRelatedByLocalityFrom === null) {
            $this->initRoutesRelatedByLocalityFrom();
            $this->collRoutesRelatedByLocalityFromPartial = true;
        }
        if (!$this->collRoutesRelatedByLocalityFrom->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddRouteRelatedByLocalityFrom($l);
        }

        return $this;
    }

    /**
     * @param	RouteRelatedByLocalityFrom $routeRelatedByLocalityFrom The routeRelatedByLocalityFrom object to add.
     */
    protected function doAddRouteRelatedByLocalityFrom($routeRelatedByLocalityFrom)
    {
        $this->collRoutesRelatedByLocalityFrom[]= $routeRelatedByLocalityFrom;
        $routeRelatedByLocalityFrom->setLocalityRelatedByLocalityFrom($this);
    }

    /**
     * @param	RouteRelatedByLocalityFrom $routeRelatedByLocalityFrom The routeRelatedByLocalityFrom object to remove.
     */
    public function removeRouteRelatedByLocalityFrom($routeRelatedByLocalityFrom)
    {
        if ($this->getRoutesRelatedByLocalityFrom()->contains($routeRelatedByLocalityFrom)) {
            $this->collRoutesRelatedByLocalityFrom->remove($this->collRoutesRelatedByLocalityFrom->search($routeRelatedByLocalityFrom));
            if (null === $this->routesRelatedByLocalityFromScheduledForDeletion) {
                $this->routesRelatedByLocalityFromScheduledForDeletion = clone $this->collRoutesRelatedByLocalityFrom;
                $this->routesRelatedByLocalityFromScheduledForDeletion->clear();
            }
            $this->routesRelatedByLocalityFromScheduledForDeletion[]= $routeRelatedByLocalityFrom;
            $routeRelatedByLocalityFrom->setLocalityRelatedByLocalityFrom(null);
        }
    }

    /**
     * Clears out the collRoutesRelatedByLocalityTo collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addRoutesRelatedByLocalityTo()
     */
    public function clearRoutesRelatedByLocalityTo()
    {
        $this->collRoutesRelatedByLocalityTo = null; // important to set this to null since that means it is uninitialized
        $this->collRoutesRelatedByLocalityToPartial = null;
    }

    /**
     * reset is the collRoutesRelatedByLocalityTo collection loaded partially
     *
     * @return void
     */
    public function resetPartialRoutesRelatedByLocalityTo($v = true)
    {
        $this->collRoutesRelatedByLocalityToPartial = $v;
    }

    /**
     * Initializes the collRoutesRelatedByLocalityTo collection.
     *
     * By default this just sets the collRoutesRelatedByLocalityTo collection to an empty array (like clearcollRoutesRelatedByLocalityTo());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initRoutesRelatedByLocalityTo($overrideExisting = true)
    {
        if (null !== $this->collRoutesRelatedByLocalityTo && !$overrideExisting) {
            return;
        }
        $this->collRoutesRelatedByLocalityTo = new PropelObjectCollection();
        $this->collRoutesRelatedByLocalityTo->setModel('Route');
    }

    /**
     * Gets an array of Route objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Locality is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Route[] List of Route objects
     * @throws PropelException
     */
    public function getRoutesRelatedByLocalityTo($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collRoutesRelatedByLocalityToPartial && !$this->isNew();
        if (null === $this->collRoutesRelatedByLocalityTo || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collRoutesRelatedByLocalityTo) {
                // return empty collection
                $this->initRoutesRelatedByLocalityTo();
            } else {
                $collRoutesRelatedByLocalityTo = RouteQuery::create(null, $criteria)
                    ->filterByLocalityRelatedByLocalityTo($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collRoutesRelatedByLocalityToPartial && count($collRoutesRelatedByLocalityTo)) {
                      $this->initRoutesRelatedByLocalityTo(false);

                      foreach($collRoutesRelatedByLocalityTo as $obj) {
                        if (false == $this->collRoutesRelatedByLocalityTo->contains($obj)) {
                          $this->collRoutesRelatedByLocalityTo->append($obj);
                        }
                      }

                      $this->collRoutesRelatedByLocalityToPartial = true;
                    }

                    return $collRoutesRelatedByLocalityTo;
                }

                if($partial && $this->collRoutesRelatedByLocalityTo) {
                    foreach($this->collRoutesRelatedByLocalityTo as $obj) {
                        if($obj->isNew()) {
                            $collRoutesRelatedByLocalityTo[] = $obj;
                        }
                    }
                }

                $this->collRoutesRelatedByLocalityTo = $collRoutesRelatedByLocalityTo;
                $this->collRoutesRelatedByLocalityToPartial = false;
            }
        }

        return $this->collRoutesRelatedByLocalityTo;
    }

    /**
     * Sets a collection of RouteRelatedByLocalityTo objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $routesRelatedByLocalityTo A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setRoutesRelatedByLocalityTo(PropelCollection $routesRelatedByLocalityTo, PropelPDO $con = null)
    {
        $this->routesRelatedByLocalityToScheduledForDeletion = $this->getRoutesRelatedByLocalityTo(new Criteria(), $con)->diff($routesRelatedByLocalityTo);

        foreach ($this->routesRelatedByLocalityToScheduledForDeletion as $routeRelatedByLocalityToRemoved) {
            $routeRelatedByLocalityToRemoved->setLocalityRelatedByLocalityTo(null);
        }

        $this->collRoutesRelatedByLocalityTo = null;
        foreach ($routesRelatedByLocalityTo as $routeRelatedByLocalityTo) {
            $this->addRouteRelatedByLocalityTo($routeRelatedByLocalityTo);
        }

        $this->collRoutesRelatedByLocalityTo = $routesRelatedByLocalityTo;
        $this->collRoutesRelatedByLocalityToPartial = false;
    }

    /**
     * Returns the number of related Route objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Route objects.
     * @throws PropelException
     */
    public function countRoutesRelatedByLocalityTo(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collRoutesRelatedByLocalityToPartial && !$this->isNew();
        if (null === $this->collRoutesRelatedByLocalityTo || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collRoutesRelatedByLocalityTo) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getRoutesRelatedByLocalityTo());
                }
                $query = RouteQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByLocalityRelatedByLocalityTo($this)
                    ->count($con);
            }
        } else {
            return count($this->collRoutesRelatedByLocalityTo);
        }
    }

    /**
     * Method called to associate a Route object to this object
     * through the Route foreign key attribute.
     *
     * @param    Route $l Route
     * @return Locality The current object (for fluent API support)
     */
    public function addRouteRelatedByLocalityTo(Route $l)
    {
        if ($this->collRoutesRelatedByLocalityTo === null) {
            $this->initRoutesRelatedByLocalityTo();
            $this->collRoutesRelatedByLocalityToPartial = true;
        }
        if (!$this->collRoutesRelatedByLocalityTo->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddRouteRelatedByLocalityTo($l);
        }

        return $this;
    }

    /**
     * @param	RouteRelatedByLocalityTo $routeRelatedByLocalityTo The routeRelatedByLocalityTo object to add.
     */
    protected function doAddRouteRelatedByLocalityTo($routeRelatedByLocalityTo)
    {
        $this->collRoutesRelatedByLocalityTo[]= $routeRelatedByLocalityTo;
        $routeRelatedByLocalityTo->setLocalityRelatedByLocalityTo($this);
    }

    /**
     * @param	RouteRelatedByLocalityTo $routeRelatedByLocalityTo The routeRelatedByLocalityTo object to remove.
     */
    public function removeRouteRelatedByLocalityTo($routeRelatedByLocalityTo)
    {
        if ($this->getRoutesRelatedByLocalityTo()->contains($routeRelatedByLocalityTo)) {
            $this->collRoutesRelatedByLocalityTo->remove($this->collRoutesRelatedByLocalityTo->search($routeRelatedByLocalityTo));
            if (null === $this->routesRelatedByLocalityToScheduledForDeletion) {
                $this->routesRelatedByLocalityToScheduledForDeletion = clone $this->collRoutesRelatedByLocalityTo;
                $this->routesRelatedByLocalityToScheduledForDeletion->clear();
            }
            $this->routesRelatedByLocalityToScheduledForDeletion[]= $routeRelatedByLocalityTo;
            $routeRelatedByLocalityTo->setLocalityRelatedByLocalityTo(null);
        }
    }

    /**
     * Clears out the collArrivalsRelatedByLocalityFrom collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addArrivalsRelatedByLocalityFrom()
     */
    public function clearArrivalsRelatedByLocalityFrom()
    {
        $this->collArrivalsRelatedByLocalityFrom = null; // important to set this to null since that means it is uninitialized
        $this->collArrivalsRelatedByLocalityFromPartial = null;
    }

    /**
     * reset is the collArrivalsRelatedByLocalityFrom collection loaded partially
     *
     * @return void
     */
    public function resetPartialArrivalsRelatedByLocalityFrom($v = true)
    {
        $this->collArrivalsRelatedByLocalityFromPartial = $v;
    }

    /**
     * Initializes the collArrivalsRelatedByLocalityFrom collection.
     *
     * By default this just sets the collArrivalsRelatedByLocalityFrom collection to an empty array (like clearcollArrivalsRelatedByLocalityFrom());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initArrivalsRelatedByLocalityFrom($overrideExisting = true)
    {
        if (null !== $this->collArrivalsRelatedByLocalityFrom && !$overrideExisting) {
            return;
        }
        $this->collArrivalsRelatedByLocalityFrom = new PropelObjectCollection();
        $this->collArrivalsRelatedByLocalityFrom->setModel('Arrival');
    }

    /**
     * Gets an array of Arrival objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Locality is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Arrival[] List of Arrival objects
     * @throws PropelException
     */
    public function getArrivalsRelatedByLocalityFrom($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collArrivalsRelatedByLocalityFromPartial && !$this->isNew();
        if (null === $this->collArrivalsRelatedByLocalityFrom || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collArrivalsRelatedByLocalityFrom) {
                // return empty collection
                $this->initArrivalsRelatedByLocalityFrom();
            } else {
                $collArrivalsRelatedByLocalityFrom = ArrivalQuery::create(null, $criteria)
                    ->filterByLocalityRelatedByLocalityFrom($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collArrivalsRelatedByLocalityFromPartial && count($collArrivalsRelatedByLocalityFrom)) {
                      $this->initArrivalsRelatedByLocalityFrom(false);

                      foreach($collArrivalsRelatedByLocalityFrom as $obj) {
                        if (false == $this->collArrivalsRelatedByLocalityFrom->contains($obj)) {
                          $this->collArrivalsRelatedByLocalityFrom->append($obj);
                        }
                      }

                      $this->collArrivalsRelatedByLocalityFromPartial = true;
                    }

                    return $collArrivalsRelatedByLocalityFrom;
                }

                if($partial && $this->collArrivalsRelatedByLocalityFrom) {
                    foreach($this->collArrivalsRelatedByLocalityFrom as $obj) {
                        if($obj->isNew()) {
                            $collArrivalsRelatedByLocalityFrom[] = $obj;
                        }
                    }
                }

                $this->collArrivalsRelatedByLocalityFrom = $collArrivalsRelatedByLocalityFrom;
                $this->collArrivalsRelatedByLocalityFromPartial = false;
            }
        }

        return $this->collArrivalsRelatedByLocalityFrom;
    }

    /**
     * Sets a collection of ArrivalRelatedByLocalityFrom objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $arrivalsRelatedByLocalityFrom A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setArrivalsRelatedByLocalityFrom(PropelCollection $arrivalsRelatedByLocalityFrom, PropelPDO $con = null)
    {
        $this->arrivalsRelatedByLocalityFromScheduledForDeletion = $this->getArrivalsRelatedByLocalityFrom(new Criteria(), $con)->diff($arrivalsRelatedByLocalityFrom);

        foreach ($this->arrivalsRelatedByLocalityFromScheduledForDeletion as $arrivalRelatedByLocalityFromRemoved) {
            $arrivalRelatedByLocalityFromRemoved->setLocalityRelatedByLocalityFrom(null);
        }

        $this->collArrivalsRelatedByLocalityFrom = null;
        foreach ($arrivalsRelatedByLocalityFrom as $arrivalRelatedByLocalityFrom) {
            $this->addArrivalRelatedByLocalityFrom($arrivalRelatedByLocalityFrom);
        }

        $this->collArrivalsRelatedByLocalityFrom = $arrivalsRelatedByLocalityFrom;
        $this->collArrivalsRelatedByLocalityFromPartial = false;
    }

    /**
     * Returns the number of related Arrival objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Arrival objects.
     * @throws PropelException
     */
    public function countArrivalsRelatedByLocalityFrom(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collArrivalsRelatedByLocalityFromPartial && !$this->isNew();
        if (null === $this->collArrivalsRelatedByLocalityFrom || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collArrivalsRelatedByLocalityFrom) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getArrivalsRelatedByLocalityFrom());
                }
                $query = ArrivalQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByLocalityRelatedByLocalityFrom($this)
                    ->count($con);
            }
        } else {
            return count($this->collArrivalsRelatedByLocalityFrom);
        }
    }

    /**
     * Method called to associate a Arrival object to this object
     * through the Arrival foreign key attribute.
     *
     * @param    Arrival $l Arrival
     * @return Locality The current object (for fluent API support)
     */
    public function addArrivalRelatedByLocalityFrom(Arrival $l)
    {
        if ($this->collArrivalsRelatedByLocalityFrom === null) {
            $this->initArrivalsRelatedByLocalityFrom();
            $this->collArrivalsRelatedByLocalityFromPartial = true;
        }
        if (!$this->collArrivalsRelatedByLocalityFrom->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddArrivalRelatedByLocalityFrom($l);
        }

        return $this;
    }

    /**
     * @param	ArrivalRelatedByLocalityFrom $arrivalRelatedByLocalityFrom The arrivalRelatedByLocalityFrom object to add.
     */
    protected function doAddArrivalRelatedByLocalityFrom($arrivalRelatedByLocalityFrom)
    {
        $this->collArrivalsRelatedByLocalityFrom[]= $arrivalRelatedByLocalityFrom;
        $arrivalRelatedByLocalityFrom->setLocalityRelatedByLocalityFrom($this);
    }

    /**
     * @param	ArrivalRelatedByLocalityFrom $arrivalRelatedByLocalityFrom The arrivalRelatedByLocalityFrom object to remove.
     */
    public function removeArrivalRelatedByLocalityFrom($arrivalRelatedByLocalityFrom)
    {
        if ($this->getArrivalsRelatedByLocalityFrom()->contains($arrivalRelatedByLocalityFrom)) {
            $this->collArrivalsRelatedByLocalityFrom->remove($this->collArrivalsRelatedByLocalityFrom->search($arrivalRelatedByLocalityFrom));
            if (null === $this->arrivalsRelatedByLocalityFromScheduledForDeletion) {
                $this->arrivalsRelatedByLocalityFromScheduledForDeletion = clone $this->collArrivalsRelatedByLocalityFrom;
                $this->arrivalsRelatedByLocalityFromScheduledForDeletion->clear();
            }
            $this->arrivalsRelatedByLocalityFromScheduledForDeletion[]= $arrivalRelatedByLocalityFrom;
            $arrivalRelatedByLocalityFrom->setLocalityRelatedByLocalityFrom(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related ArrivalsRelatedByLocalityFrom from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Arrival[] List of Arrival objects
     */
    public function getArrivalsRelatedByLocalityFromJoinBooking($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = ArrivalQuery::create(null, $criteria);
        $query->joinWith('Booking', $join_behavior);

        return $this->getArrivalsRelatedByLocalityFrom($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related ArrivalsRelatedByLocalityFrom from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Arrival[] List of Arrival objects
     */
    public function getArrivalsRelatedByLocalityFromJoinPaymentMethod($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = ArrivalQuery::create(null, $criteria);
        $query->joinWith('PaymentMethod', $join_behavior);

        return $this->getArrivalsRelatedByLocalityFrom($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related ArrivalsRelatedByLocalityFrom from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Arrival[] List of Arrival objects
     */
    public function getArrivalsRelatedByLocalityFromJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = ArrivalQuery::create(null, $criteria);
        $query->joinWith('sfGuardUser', $join_behavior);

        return $this->getArrivalsRelatedByLocalityFrom($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related ArrivalsRelatedByLocalityFrom from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Arrival[] List of Arrival objects
     */
    public function getArrivalsRelatedByLocalityFromJoinVehicle($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = ArrivalQuery::create(null, $criteria);
        $query->joinWith('Vehicle', $join_behavior);

        return $this->getArrivalsRelatedByLocalityFrom($query, $con);
    }

    /**
     * Clears out the collArrivalsRelatedByLocalityTo collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addArrivalsRelatedByLocalityTo()
     */
    public function clearArrivalsRelatedByLocalityTo()
    {
        $this->collArrivalsRelatedByLocalityTo = null; // important to set this to null since that means it is uninitialized
        $this->collArrivalsRelatedByLocalityToPartial = null;
    }

    /**
     * reset is the collArrivalsRelatedByLocalityTo collection loaded partially
     *
     * @return void
     */
    public function resetPartialArrivalsRelatedByLocalityTo($v = true)
    {
        $this->collArrivalsRelatedByLocalityToPartial = $v;
    }

    /**
     * Initializes the collArrivalsRelatedByLocalityTo collection.
     *
     * By default this just sets the collArrivalsRelatedByLocalityTo collection to an empty array (like clearcollArrivalsRelatedByLocalityTo());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initArrivalsRelatedByLocalityTo($overrideExisting = true)
    {
        if (null !== $this->collArrivalsRelatedByLocalityTo && !$overrideExisting) {
            return;
        }
        $this->collArrivalsRelatedByLocalityTo = new PropelObjectCollection();
        $this->collArrivalsRelatedByLocalityTo->setModel('Arrival');
    }

    /**
     * Gets an array of Arrival objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Locality is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Arrival[] List of Arrival objects
     * @throws PropelException
     */
    public function getArrivalsRelatedByLocalityTo($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collArrivalsRelatedByLocalityToPartial && !$this->isNew();
        if (null === $this->collArrivalsRelatedByLocalityTo || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collArrivalsRelatedByLocalityTo) {
                // return empty collection
                $this->initArrivalsRelatedByLocalityTo();
            } else {
                $collArrivalsRelatedByLocalityTo = ArrivalQuery::create(null, $criteria)
                    ->filterByLocalityRelatedByLocalityTo($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collArrivalsRelatedByLocalityToPartial && count($collArrivalsRelatedByLocalityTo)) {
                      $this->initArrivalsRelatedByLocalityTo(false);

                      foreach($collArrivalsRelatedByLocalityTo as $obj) {
                        if (false == $this->collArrivalsRelatedByLocalityTo->contains($obj)) {
                          $this->collArrivalsRelatedByLocalityTo->append($obj);
                        }
                      }

                      $this->collArrivalsRelatedByLocalityToPartial = true;
                    }

                    return $collArrivalsRelatedByLocalityTo;
                }

                if($partial && $this->collArrivalsRelatedByLocalityTo) {
                    foreach($this->collArrivalsRelatedByLocalityTo as $obj) {
                        if($obj->isNew()) {
                            $collArrivalsRelatedByLocalityTo[] = $obj;
                        }
                    }
                }

                $this->collArrivalsRelatedByLocalityTo = $collArrivalsRelatedByLocalityTo;
                $this->collArrivalsRelatedByLocalityToPartial = false;
            }
        }

        return $this->collArrivalsRelatedByLocalityTo;
    }

    /**
     * Sets a collection of ArrivalRelatedByLocalityTo objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $arrivalsRelatedByLocalityTo A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setArrivalsRelatedByLocalityTo(PropelCollection $arrivalsRelatedByLocalityTo, PropelPDO $con = null)
    {
        $this->arrivalsRelatedByLocalityToScheduledForDeletion = $this->getArrivalsRelatedByLocalityTo(new Criteria(), $con)->diff($arrivalsRelatedByLocalityTo);

        foreach ($this->arrivalsRelatedByLocalityToScheduledForDeletion as $arrivalRelatedByLocalityToRemoved) {
            $arrivalRelatedByLocalityToRemoved->setLocalityRelatedByLocalityTo(null);
        }

        $this->collArrivalsRelatedByLocalityTo = null;
        foreach ($arrivalsRelatedByLocalityTo as $arrivalRelatedByLocalityTo) {
            $this->addArrivalRelatedByLocalityTo($arrivalRelatedByLocalityTo);
        }

        $this->collArrivalsRelatedByLocalityTo = $arrivalsRelatedByLocalityTo;
        $this->collArrivalsRelatedByLocalityToPartial = false;
    }

    /**
     * Returns the number of related Arrival objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Arrival objects.
     * @throws PropelException
     */
    public function countArrivalsRelatedByLocalityTo(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collArrivalsRelatedByLocalityToPartial && !$this->isNew();
        if (null === $this->collArrivalsRelatedByLocalityTo || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collArrivalsRelatedByLocalityTo) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getArrivalsRelatedByLocalityTo());
                }
                $query = ArrivalQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByLocalityRelatedByLocalityTo($this)
                    ->count($con);
            }
        } else {
            return count($this->collArrivalsRelatedByLocalityTo);
        }
    }

    /**
     * Method called to associate a Arrival object to this object
     * through the Arrival foreign key attribute.
     *
     * @param    Arrival $l Arrival
     * @return Locality The current object (for fluent API support)
     */
    public function addArrivalRelatedByLocalityTo(Arrival $l)
    {
        if ($this->collArrivalsRelatedByLocalityTo === null) {
            $this->initArrivalsRelatedByLocalityTo();
            $this->collArrivalsRelatedByLocalityToPartial = true;
        }
        if (!$this->collArrivalsRelatedByLocalityTo->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddArrivalRelatedByLocalityTo($l);
        }

        return $this;
    }

    /**
     * @param	ArrivalRelatedByLocalityTo $arrivalRelatedByLocalityTo The arrivalRelatedByLocalityTo object to add.
     */
    protected function doAddArrivalRelatedByLocalityTo($arrivalRelatedByLocalityTo)
    {
        $this->collArrivalsRelatedByLocalityTo[]= $arrivalRelatedByLocalityTo;
        $arrivalRelatedByLocalityTo->setLocalityRelatedByLocalityTo($this);
    }

    /**
     * @param	ArrivalRelatedByLocalityTo $arrivalRelatedByLocalityTo The arrivalRelatedByLocalityTo object to remove.
     */
    public function removeArrivalRelatedByLocalityTo($arrivalRelatedByLocalityTo)
    {
        if ($this->getArrivalsRelatedByLocalityTo()->contains($arrivalRelatedByLocalityTo)) {
            $this->collArrivalsRelatedByLocalityTo->remove($this->collArrivalsRelatedByLocalityTo->search($arrivalRelatedByLocalityTo));
            if (null === $this->arrivalsRelatedByLocalityToScheduledForDeletion) {
                $this->arrivalsRelatedByLocalityToScheduledForDeletion = clone $this->collArrivalsRelatedByLocalityTo;
                $this->arrivalsRelatedByLocalityToScheduledForDeletion->clear();
            }
            $this->arrivalsRelatedByLocalityToScheduledForDeletion[]= $arrivalRelatedByLocalityTo;
            $arrivalRelatedByLocalityTo->setLocalityRelatedByLocalityTo(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related ArrivalsRelatedByLocalityTo from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Arrival[] List of Arrival objects
     */
    public function getArrivalsRelatedByLocalityToJoinBooking($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = ArrivalQuery::create(null, $criteria);
        $query->joinWith('Booking', $join_behavior);

        return $this->getArrivalsRelatedByLocalityTo($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related ArrivalsRelatedByLocalityTo from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Arrival[] List of Arrival objects
     */
    public function getArrivalsRelatedByLocalityToJoinPaymentMethod($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = ArrivalQuery::create(null, $criteria);
        $query->joinWith('PaymentMethod', $join_behavior);

        return $this->getArrivalsRelatedByLocalityTo($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related ArrivalsRelatedByLocalityTo from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Arrival[] List of Arrival objects
     */
    public function getArrivalsRelatedByLocalityToJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = ArrivalQuery::create(null, $criteria);
        $query->joinWith('sfGuardUser', $join_behavior);

        return $this->getArrivalsRelatedByLocalityTo($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related ArrivalsRelatedByLocalityTo from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Arrival[] List of Arrival objects
     */
    public function getArrivalsRelatedByLocalityToJoinVehicle($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = ArrivalQuery::create(null, $criteria);
        $query->joinWith('Vehicle', $join_behavior);

        return $this->getArrivalsRelatedByLocalityTo($query, $con);
    }

    /**
     * Clears out the collDeparturesRelatedByLocalityFrom collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addDeparturesRelatedByLocalityFrom()
     */
    public function clearDeparturesRelatedByLocalityFrom()
    {
        $this->collDeparturesRelatedByLocalityFrom = null; // important to set this to null since that means it is uninitialized
        $this->collDeparturesRelatedByLocalityFromPartial = null;
    }

    /**
     * reset is the collDeparturesRelatedByLocalityFrom collection loaded partially
     *
     * @return void
     */
    public function resetPartialDeparturesRelatedByLocalityFrom($v = true)
    {
        $this->collDeparturesRelatedByLocalityFromPartial = $v;
    }

    /**
     * Initializes the collDeparturesRelatedByLocalityFrom collection.
     *
     * By default this just sets the collDeparturesRelatedByLocalityFrom collection to an empty array (like clearcollDeparturesRelatedByLocalityFrom());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initDeparturesRelatedByLocalityFrom($overrideExisting = true)
    {
        if (null !== $this->collDeparturesRelatedByLocalityFrom && !$overrideExisting) {
            return;
        }
        $this->collDeparturesRelatedByLocalityFrom = new PropelObjectCollection();
        $this->collDeparturesRelatedByLocalityFrom->setModel('Departure');
    }

    /**
     * Gets an array of Departure objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Locality is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Departure[] List of Departure objects
     * @throws PropelException
     */
    public function getDeparturesRelatedByLocalityFrom($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collDeparturesRelatedByLocalityFromPartial && !$this->isNew();
        if (null === $this->collDeparturesRelatedByLocalityFrom || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collDeparturesRelatedByLocalityFrom) {
                // return empty collection
                $this->initDeparturesRelatedByLocalityFrom();
            } else {
                $collDeparturesRelatedByLocalityFrom = DepartureQuery::create(null, $criteria)
                    ->filterByLocalityRelatedByLocalityFrom($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collDeparturesRelatedByLocalityFromPartial && count($collDeparturesRelatedByLocalityFrom)) {
                      $this->initDeparturesRelatedByLocalityFrom(false);

                      foreach($collDeparturesRelatedByLocalityFrom as $obj) {
                        if (false == $this->collDeparturesRelatedByLocalityFrom->contains($obj)) {
                          $this->collDeparturesRelatedByLocalityFrom->append($obj);
                        }
                      }

                      $this->collDeparturesRelatedByLocalityFromPartial = true;
                    }

                    return $collDeparturesRelatedByLocalityFrom;
                }

                if($partial && $this->collDeparturesRelatedByLocalityFrom) {
                    foreach($this->collDeparturesRelatedByLocalityFrom as $obj) {
                        if($obj->isNew()) {
                            $collDeparturesRelatedByLocalityFrom[] = $obj;
                        }
                    }
                }

                $this->collDeparturesRelatedByLocalityFrom = $collDeparturesRelatedByLocalityFrom;
                $this->collDeparturesRelatedByLocalityFromPartial = false;
            }
        }

        return $this->collDeparturesRelatedByLocalityFrom;
    }

    /**
     * Sets a collection of DepartureRelatedByLocalityFrom objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $departuresRelatedByLocalityFrom A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setDeparturesRelatedByLocalityFrom(PropelCollection $departuresRelatedByLocalityFrom, PropelPDO $con = null)
    {
        $this->departuresRelatedByLocalityFromScheduledForDeletion = $this->getDeparturesRelatedByLocalityFrom(new Criteria(), $con)->diff($departuresRelatedByLocalityFrom);

        foreach ($this->departuresRelatedByLocalityFromScheduledForDeletion as $departureRelatedByLocalityFromRemoved) {
            $departureRelatedByLocalityFromRemoved->setLocalityRelatedByLocalityFrom(null);
        }

        $this->collDeparturesRelatedByLocalityFrom = null;
        foreach ($departuresRelatedByLocalityFrom as $departureRelatedByLocalityFrom) {
            $this->addDepartureRelatedByLocalityFrom($departureRelatedByLocalityFrom);
        }

        $this->collDeparturesRelatedByLocalityFrom = $departuresRelatedByLocalityFrom;
        $this->collDeparturesRelatedByLocalityFromPartial = false;
    }

    /**
     * Returns the number of related Departure objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Departure objects.
     * @throws PropelException
     */
    public function countDeparturesRelatedByLocalityFrom(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collDeparturesRelatedByLocalityFromPartial && !$this->isNew();
        if (null === $this->collDeparturesRelatedByLocalityFrom || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collDeparturesRelatedByLocalityFrom) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getDeparturesRelatedByLocalityFrom());
                }
                $query = DepartureQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByLocalityRelatedByLocalityFrom($this)
                    ->count($con);
            }
        } else {
            return count($this->collDeparturesRelatedByLocalityFrom);
        }
    }

    /**
     * Method called to associate a Departure object to this object
     * through the Departure foreign key attribute.
     *
     * @param    Departure $l Departure
     * @return Locality The current object (for fluent API support)
     */
    public function addDepartureRelatedByLocalityFrom(Departure $l)
    {
        if ($this->collDeparturesRelatedByLocalityFrom === null) {
            $this->initDeparturesRelatedByLocalityFrom();
            $this->collDeparturesRelatedByLocalityFromPartial = true;
        }
        if (!$this->collDeparturesRelatedByLocalityFrom->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddDepartureRelatedByLocalityFrom($l);
        }

        return $this;
    }

    /**
     * @param	DepartureRelatedByLocalityFrom $departureRelatedByLocalityFrom The departureRelatedByLocalityFrom object to add.
     */
    protected function doAddDepartureRelatedByLocalityFrom($departureRelatedByLocalityFrom)
    {
        $this->collDeparturesRelatedByLocalityFrom[]= $departureRelatedByLocalityFrom;
        $departureRelatedByLocalityFrom->setLocalityRelatedByLocalityFrom($this);
    }

    /**
     * @param	DepartureRelatedByLocalityFrom $departureRelatedByLocalityFrom The departureRelatedByLocalityFrom object to remove.
     */
    public function removeDepartureRelatedByLocalityFrom($departureRelatedByLocalityFrom)
    {
        if ($this->getDeparturesRelatedByLocalityFrom()->contains($departureRelatedByLocalityFrom)) {
            $this->collDeparturesRelatedByLocalityFrom->remove($this->collDeparturesRelatedByLocalityFrom->search($departureRelatedByLocalityFrom));
            if (null === $this->departuresRelatedByLocalityFromScheduledForDeletion) {
                $this->departuresRelatedByLocalityFromScheduledForDeletion = clone $this->collDeparturesRelatedByLocalityFrom;
                $this->departuresRelatedByLocalityFromScheduledForDeletion->clear();
            }
            $this->departuresRelatedByLocalityFromScheduledForDeletion[]= $departureRelatedByLocalityFrom;
            $departureRelatedByLocalityFrom->setLocalityRelatedByLocalityFrom(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related DeparturesRelatedByLocalityFrom from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Departure[] List of Departure objects
     */
    public function getDeparturesRelatedByLocalityFromJoinBooking($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = DepartureQuery::create(null, $criteria);
        $query->joinWith('Booking', $join_behavior);

        return $this->getDeparturesRelatedByLocalityFrom($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related DeparturesRelatedByLocalityFrom from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Departure[] List of Departure objects
     */
    public function getDeparturesRelatedByLocalityFromJoinPaymentMethod($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = DepartureQuery::create(null, $criteria);
        $query->joinWith('PaymentMethod', $join_behavior);

        return $this->getDeparturesRelatedByLocalityFrom($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related DeparturesRelatedByLocalityFrom from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Departure[] List of Departure objects
     */
    public function getDeparturesRelatedByLocalityFromJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = DepartureQuery::create(null, $criteria);
        $query->joinWith('sfGuardUser', $join_behavior);

        return $this->getDeparturesRelatedByLocalityFrom($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related DeparturesRelatedByLocalityFrom from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Departure[] List of Departure objects
     */
    public function getDeparturesRelatedByLocalityFromJoinVehicle($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = DepartureQuery::create(null, $criteria);
        $query->joinWith('Vehicle', $join_behavior);

        return $this->getDeparturesRelatedByLocalityFrom($query, $con);
    }

    /**
     * Clears out the collDeparturesRelatedByLocalityTo collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addDeparturesRelatedByLocalityTo()
     */
    public function clearDeparturesRelatedByLocalityTo()
    {
        $this->collDeparturesRelatedByLocalityTo = null; // important to set this to null since that means it is uninitialized
        $this->collDeparturesRelatedByLocalityToPartial = null;
    }

    /**
     * reset is the collDeparturesRelatedByLocalityTo collection loaded partially
     *
     * @return void
     */
    public function resetPartialDeparturesRelatedByLocalityTo($v = true)
    {
        $this->collDeparturesRelatedByLocalityToPartial = $v;
    }

    /**
     * Initializes the collDeparturesRelatedByLocalityTo collection.
     *
     * By default this just sets the collDeparturesRelatedByLocalityTo collection to an empty array (like clearcollDeparturesRelatedByLocalityTo());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initDeparturesRelatedByLocalityTo($overrideExisting = true)
    {
        if (null !== $this->collDeparturesRelatedByLocalityTo && !$overrideExisting) {
            return;
        }
        $this->collDeparturesRelatedByLocalityTo = new PropelObjectCollection();
        $this->collDeparturesRelatedByLocalityTo->setModel('Departure');
    }

    /**
     * Gets an array of Departure objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Locality is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Departure[] List of Departure objects
     * @throws PropelException
     */
    public function getDeparturesRelatedByLocalityTo($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collDeparturesRelatedByLocalityToPartial && !$this->isNew();
        if (null === $this->collDeparturesRelatedByLocalityTo || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collDeparturesRelatedByLocalityTo) {
                // return empty collection
                $this->initDeparturesRelatedByLocalityTo();
            } else {
                $collDeparturesRelatedByLocalityTo = DepartureQuery::create(null, $criteria)
                    ->filterByLocalityRelatedByLocalityTo($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collDeparturesRelatedByLocalityToPartial && count($collDeparturesRelatedByLocalityTo)) {
                      $this->initDeparturesRelatedByLocalityTo(false);

                      foreach($collDeparturesRelatedByLocalityTo as $obj) {
                        if (false == $this->collDeparturesRelatedByLocalityTo->contains($obj)) {
                          $this->collDeparturesRelatedByLocalityTo->append($obj);
                        }
                      }

                      $this->collDeparturesRelatedByLocalityToPartial = true;
                    }

                    return $collDeparturesRelatedByLocalityTo;
                }

                if($partial && $this->collDeparturesRelatedByLocalityTo) {
                    foreach($this->collDeparturesRelatedByLocalityTo as $obj) {
                        if($obj->isNew()) {
                            $collDeparturesRelatedByLocalityTo[] = $obj;
                        }
                    }
                }

                $this->collDeparturesRelatedByLocalityTo = $collDeparturesRelatedByLocalityTo;
                $this->collDeparturesRelatedByLocalityToPartial = false;
            }
        }

        return $this->collDeparturesRelatedByLocalityTo;
    }

    /**
     * Sets a collection of DepartureRelatedByLocalityTo objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $departuresRelatedByLocalityTo A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setDeparturesRelatedByLocalityTo(PropelCollection $departuresRelatedByLocalityTo, PropelPDO $con = null)
    {
        $this->departuresRelatedByLocalityToScheduledForDeletion = $this->getDeparturesRelatedByLocalityTo(new Criteria(), $con)->diff($departuresRelatedByLocalityTo);

        foreach ($this->departuresRelatedByLocalityToScheduledForDeletion as $departureRelatedByLocalityToRemoved) {
            $departureRelatedByLocalityToRemoved->setLocalityRelatedByLocalityTo(null);
        }

        $this->collDeparturesRelatedByLocalityTo = null;
        foreach ($departuresRelatedByLocalityTo as $departureRelatedByLocalityTo) {
            $this->addDepartureRelatedByLocalityTo($departureRelatedByLocalityTo);
        }

        $this->collDeparturesRelatedByLocalityTo = $departuresRelatedByLocalityTo;
        $this->collDeparturesRelatedByLocalityToPartial = false;
    }

    /**
     * Returns the number of related Departure objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Departure objects.
     * @throws PropelException
     */
    public function countDeparturesRelatedByLocalityTo(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collDeparturesRelatedByLocalityToPartial && !$this->isNew();
        if (null === $this->collDeparturesRelatedByLocalityTo || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collDeparturesRelatedByLocalityTo) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getDeparturesRelatedByLocalityTo());
                }
                $query = DepartureQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByLocalityRelatedByLocalityTo($this)
                    ->count($con);
            }
        } else {
            return count($this->collDeparturesRelatedByLocalityTo);
        }
    }

    /**
     * Method called to associate a Departure object to this object
     * through the Departure foreign key attribute.
     *
     * @param    Departure $l Departure
     * @return Locality The current object (for fluent API support)
     */
    public function addDepartureRelatedByLocalityTo(Departure $l)
    {
        if ($this->collDeparturesRelatedByLocalityTo === null) {
            $this->initDeparturesRelatedByLocalityTo();
            $this->collDeparturesRelatedByLocalityToPartial = true;
        }
        if (!$this->collDeparturesRelatedByLocalityTo->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddDepartureRelatedByLocalityTo($l);
        }

        return $this;
    }

    /**
     * @param	DepartureRelatedByLocalityTo $departureRelatedByLocalityTo The departureRelatedByLocalityTo object to add.
     */
    protected function doAddDepartureRelatedByLocalityTo($departureRelatedByLocalityTo)
    {
        $this->collDeparturesRelatedByLocalityTo[]= $departureRelatedByLocalityTo;
        $departureRelatedByLocalityTo->setLocalityRelatedByLocalityTo($this);
    }

    /**
     * @param	DepartureRelatedByLocalityTo $departureRelatedByLocalityTo The departureRelatedByLocalityTo object to remove.
     */
    public function removeDepartureRelatedByLocalityTo($departureRelatedByLocalityTo)
    {
        if ($this->getDeparturesRelatedByLocalityTo()->contains($departureRelatedByLocalityTo)) {
            $this->collDeparturesRelatedByLocalityTo->remove($this->collDeparturesRelatedByLocalityTo->search($departureRelatedByLocalityTo));
            if (null === $this->departuresRelatedByLocalityToScheduledForDeletion) {
                $this->departuresRelatedByLocalityToScheduledForDeletion = clone $this->collDeparturesRelatedByLocalityTo;
                $this->departuresRelatedByLocalityToScheduledForDeletion->clear();
            }
            $this->departuresRelatedByLocalityToScheduledForDeletion[]= $departureRelatedByLocalityTo;
            $departureRelatedByLocalityTo->setLocalityRelatedByLocalityTo(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related DeparturesRelatedByLocalityTo from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Departure[] List of Departure objects
     */
    public function getDeparturesRelatedByLocalityToJoinBooking($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = DepartureQuery::create(null, $criteria);
        $query->joinWith('Booking', $join_behavior);

        return $this->getDeparturesRelatedByLocalityTo($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related DeparturesRelatedByLocalityTo from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Departure[] List of Departure objects
     */
    public function getDeparturesRelatedByLocalityToJoinPaymentMethod($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = DepartureQuery::create(null, $criteria);
        $query->joinWith('PaymentMethod', $join_behavior);

        return $this->getDeparturesRelatedByLocalityTo($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related DeparturesRelatedByLocalityTo from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Departure[] List of Departure objects
     */
    public function getDeparturesRelatedByLocalityToJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = DepartureQuery::create(null, $criteria);
        $query->joinWith('sfGuardUser', $join_behavior);

        return $this->getDeparturesRelatedByLocalityTo($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Locality is new, it will return
     * an empty collection; or if this Locality has previously
     * been saved, it will retrieve related DeparturesRelatedByLocalityTo from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Locality.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Departure[] List of Departure objects
     */
    public function getDeparturesRelatedByLocalityToJoinVehicle($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = DepartureQuery::create(null, $criteria);
        $query->joinWith('Vehicle', $join_behavior);

        return $this->getDeparturesRelatedByLocalityTo($query, $con);
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->user_id = null;
        $this->is_vector = null;
        $this->is_active = null;
        $this->name = null;
        $this->phone = null;
        $this->fax = null;
        $this->mobile = null;
        $this->email = null;
        $this->site = null;
        $this->formatted_address = null;
        $this->created_at = null;
        $this->updated_at = null;
        $this->latitude = null;
        $this->longitude = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
            if ($this->collRoutesRelatedByLocalityFrom) {
                foreach ($this->collRoutesRelatedByLocalityFrom as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collRoutesRelatedByLocalityTo) {
                foreach ($this->collRoutesRelatedByLocalityTo as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collArrivalsRelatedByLocalityFrom) {
                foreach ($this->collArrivalsRelatedByLocalityFrom as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collArrivalsRelatedByLocalityTo) {
                foreach ($this->collArrivalsRelatedByLocalityTo as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collDeparturesRelatedByLocalityFrom) {
                foreach ($this->collDeparturesRelatedByLocalityFrom as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collDeparturesRelatedByLocalityTo) {
                foreach ($this->collDeparturesRelatedByLocalityTo as $o) {
                    $o->clearAllReferences($deep);
                }
            }
        } // if ($deep)

        if ($this->collRoutesRelatedByLocalityFrom instanceof PropelCollection) {
            $this->collRoutesRelatedByLocalityFrom->clearIterator();
        }
        $this->collRoutesRelatedByLocalityFrom = null;
        if ($this->collRoutesRelatedByLocalityTo instanceof PropelCollection) {
            $this->collRoutesRelatedByLocalityTo->clearIterator();
        }
        $this->collRoutesRelatedByLocalityTo = null;
        if ($this->collArrivalsRelatedByLocalityFrom instanceof PropelCollection) {
            $this->collArrivalsRelatedByLocalityFrom->clearIterator();
        }
        $this->collArrivalsRelatedByLocalityFrom = null;
        if ($this->collArrivalsRelatedByLocalityTo instanceof PropelCollection) {
            $this->collArrivalsRelatedByLocalityTo->clearIterator();
        }
        $this->collArrivalsRelatedByLocalityTo = null;
        if ($this->collDeparturesRelatedByLocalityFrom instanceof PropelCollection) {
            $this->collDeparturesRelatedByLocalityFrom->clearIterator();
        }
        $this->collDeparturesRelatedByLocalityFrom = null;
        if ($this->collDeparturesRelatedByLocalityTo instanceof PropelCollection) {
            $this->collDeparturesRelatedByLocalityTo->clearIterator();
        }
        $this->collDeparturesRelatedByLocalityTo = null;
        $this->asfGuardUser = null;
    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(LocalityPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    // Timestampable behavior

    /**
     * Mark the current object so that the update date doesn't get updated during next save
     *
     * @return     Locality The current object (for fluent API support)
     */
    public function keepUpdateDateUnchanged()
    {
        $this->modifiedColumns[] = LocalityPeer::UPDATED_AT;

        return $this;
    }

    // Geocodable behavior

    /**
     * Convenient method to set latitude and longitude values.
     *
     * @param double $latitude     A latitude value.
     * @param double $longitude    A longitude value.
     */
    public function setCoordinates($latitude, $longitude)
    {
        $this->setLatitude($latitude);
        $this->setLongitude($longitude);
    }

    /**
     * Returns an array with latitude and longitude values.
     *
     * @return array
     */
    public function getCoordinates()
    {
        return array(
            'latitude'  => $this->getLatitude(),
            'longitude' => $this->getLongitude()
        );
    }

    /**
     * Returns whether this object has been geocoded or not.
     *
     * @return boolean
     */
    public function isGeocoded()
    {
        $lat = $this->getLatitude();
        $lng = $this->getLongitude();

        return (!empty($lat) && !empty($lng));
    }

    /**
     * Calculates the distance between a given locality and this one.
     *
     * @param Locality $locality    A Locality object.
     * @param double $unit     The unit measure.
     *
     * @return double   The distance between the two objects.
     */
    public function getDistanceTo(Locality $locality, $unit = LocalityPeer::KILOMETERS_UNIT)
    {
        $dist = rad2deg(acos(sin(deg2rad($this->getLatitude())) * sin(deg2rad($locality->getLatitude())) +  cos(deg2rad($this->getLatitude())) * cos(deg2rad($locality->getLatitude())) * cos(deg2rad($this->getLongitude() - $locality->getLongitude())))) * 60 * LocalityPeer::MILES_UNIT;

        if (LocalityPeer::MILES_UNIT === $unit) {
            return $dist;
        } elseif (LocalityPeer::NAUTICAL_MILES_UNIT === $unit) {
            return $dist * LocalityPeer::NAUTICAL_MILES_UNIT;
        }

        return $dist * LocalityPeer::KILOMETERS_UNIT;
    }

    /**
     * Return a geocoder to be used to geocode the objects information.
     *
     * @return \Geocoder\GeocoderInterface
     */
    public function getGeocoder()
    {
        ProjectConfiguration::registerGeocoder();
        $geocoder = new \Geocoder\Geocoder(new \Geocoder\Provider\GoogleMapsProvider(new \Geocoder\HttpAdapter\CurlHttpAdapter(), 'AIzaSyDHe1uZEarjAj5pYie_sNwZsEqwLaeuUeY'));

        return $geocoder;
    }

    /**
     * Update geocode information.
     *
     * @return \Geocoder\Result\ResultInterface|null
     */
    public function geocode()
    {
        $geocodedResult = null;
        $geocoder = $this->getGeocoder();

        if ($this->hasAddressChanged() && $address = join(',', array_filter($this->getAddressParts()))) {
            $geocodedResult = $geocoder->geocode($address);
        }

        if (null !== $geocodedResult && $coordinates = $geocodedResult->getCoordinates()) {
            $this->setCoordinates($coordinates[0], $coordinates[1]);
        }

        return $geocodedResult;
    }

    /**
     * Retrieve the address parts to be geocoded.
     *
     * You can extend this method to fill in other fields.
     *
     * @return array
     */
    public function getAddressParts()
    {
        $parts    = array();
        // FormattedAddress
        $parts['formattedaddress'] = $this->getFormattedAddress();


        return $parts;
    }

    /**
     * Check whether the address of this object has changed.
     *
     * @return boolean
     */
    public function hasAddressChanged()
    {
        $changed = false;
        // FormattedAddress
        $changed = $changed || $this->isColumnModified(LocalityPeer::FORMATTED_ADDRESS);

        return $changed;
    }

    /**
     * Check whether the current object is required to be geocoded (again).
     *
     * @return boolean
     */
    public function isGeocodingNecessary()
    {

        return !$this->isColumnModified(LocalityPeer::LATITUDE) && !$this->isColumnModified(LocalityPeer::LONGITUDE);
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BaseLocality:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
