<?php


/**
 * Base class that represents a row from the 'arrival_archive' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Wed Apr 30 12:00:20 2014
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseArrivalArchive extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'ArrivalArchivePeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        ArrivalArchivePeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the booking_id field.
     * @var        int
     */
    protected $booking_id;

    /**
     * The value for the day field.
     * @var        string
     */
    protected $day;

    /**
     * The value for the hour field.
     * @var        string
     */
    protected $hour;

    /**
     * The value for the flight field.
     * @var        string
     */
    protected $flight;

    /**
     * The value for the cost field.
     * @var        string
     */
    protected $cost;

    /**
     * The value for the note field.
     * @var        string
     */
    protected $note;

    /**
     * The value for the payment_method_id field.
     * @var        int
     */
    protected $payment_method_id;

    /**
     * The value for the locality_from field.
     * @var        int
     */
    protected $locality_from;

    /**
     * The value for the locality_to field.
     * @var        int
     */
    protected $locality_to;

    /**
     * The value for the driver_id field.
     * @var        int
     */
    protected $driver_id;

    /**
     * The value for the vehicle_id field.
     * @var        int
     */
    protected $vehicle_id;

    /**
     * The value for the cancelled field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $cancelled;

    /**
     * The value for the created_at field.
     * @var        string
     */
    protected $created_at;

    /**
     * The value for the updated_at field.
     * @var        string
     */
    protected $updated_at;

    /**
     * The value for the archived_at field.
     * @var        string
     */
    protected $archived_at;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->cancelled = false;
    }

    /**
     * Initializes internal state of BaseArrivalArchive object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [booking_id] column value.
     *
     * @return int
     */
    public function getBookingId()
    {
        return $this->booking_id;
    }

    /**
     * Get the [optionally formatted] temporal [day] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getDay($format = 'Y-m-d')
    {
        if ($this->day === null) {
            return null;
        }

        if ($this->day === '0000-00-00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->day);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->day, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [hour] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getHour($format = 'H:i:s')
    {
        if ($this->hour === null) {
            return null;
        }


        try {
            $dt = new DateTime($this->hour);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->hour, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [flight] column value.
     *
     * @return string
     */
    public function getFlight()
    {
        return $this->flight;
    }

    /**
     * Get the [cost] column value.
     *
     * @return string
     */
    public function getCost()
    {
        return $this->cost;
    }

    /**
     * Get the [note] column value.
     *
     * @return string
     */
    public function getNote()
    {
        return $this->note;
    }

    /**
     * Get the [payment_method_id] column value.
     *
     * @return int
     */
    public function getPaymentMethodId()
    {
        return $this->payment_method_id;
    }

    /**
     * Get the [locality_from] column value.
     *
     * @return int
     */
    public function getLocalityFrom()
    {
        return $this->locality_from;
    }

    /**
     * Get the [locality_to] column value.
     *
     * @return int
     */
    public function getLocalityTo()
    {
        return $this->locality_to;
    }

    /**
     * Get the [driver_id] column value.
     *
     * @return int
     */
    public function getDriverId()
    {
        return $this->driver_id;
    }

    /**
     * Get the [vehicle_id] column value.
     *
     * @return int
     */
    public function getVehicleId()
    {
        return $this->vehicle_id;
    }

    /**
     * Get the [cancelled] column value.
     *
     * @return boolean
     */
    public function getCancelled()
    {
        return $this->cancelled;
    }

    /**
     * Get the [optionally formatted] temporal [created_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getCreatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->created_at === null) {
            return null;
        }

        if ($this->created_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->created_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [updated_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getUpdatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->updated_at === null) {
            return null;
        }

        if ($this->updated_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->updated_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [archived_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getArchivedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->archived_at === null) {
            return null;
        }

        if ($this->archived_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->archived_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->archived_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = ArrivalArchivePeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [booking_id] column.
     *
     * @param int $v new value
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setBookingId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->booking_id !== $v) {
            $this->booking_id = $v;
            $this->modifiedColumns[] = ArrivalArchivePeer::BOOKING_ID;
        }


        return $this;
    } // setBookingId()

    /**
     * Sets the value of [day] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setDay($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->day !== null || $dt !== null) {
            $currentDateAsString = ($this->day !== null && $tmpDt = new DateTime($this->day)) ? $tmpDt->format('Y-m-d') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->day = $newDateAsString;
                $this->modifiedColumns[] = ArrivalArchivePeer::DAY;
            }
        } // if either are not null


        return $this;
    } // setDay()

    /**
     * Sets the value of [hour] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setHour($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->hour !== null || $dt !== null) {
            $currentDateAsString = ($this->hour !== null && $tmpDt = new DateTime($this->hour)) ? $tmpDt->format('H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->hour = $newDateAsString;
                $this->modifiedColumns[] = ArrivalArchivePeer::HOUR;
            }
        } // if either are not null


        return $this;
    } // setHour()

    /**
     * Set the value of [flight] column.
     *
     * @param string $v new value
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setFlight($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->flight !== $v) {
            $this->flight = $v;
            $this->modifiedColumns[] = ArrivalArchivePeer::FLIGHT;
        }


        return $this;
    } // setFlight()

    /**
     * Set the value of [cost] column.
     *
     * @param string $v new value
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setCost($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->cost !== $v) {
            $this->cost = $v;
            $this->modifiedColumns[] = ArrivalArchivePeer::COST;
        }


        return $this;
    } // setCost()

    /**
     * Set the value of [note] column.
     *
     * @param string $v new value
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setNote($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->note !== $v) {
            $this->note = $v;
            $this->modifiedColumns[] = ArrivalArchivePeer::NOTE;
        }


        return $this;
    } // setNote()

    /**
     * Set the value of [payment_method_id] column.
     *
     * @param int $v new value
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setPaymentMethodId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->payment_method_id !== $v) {
            $this->payment_method_id = $v;
            $this->modifiedColumns[] = ArrivalArchivePeer::PAYMENT_METHOD_ID;
        }


        return $this;
    } // setPaymentMethodId()

    /**
     * Set the value of [locality_from] column.
     *
     * @param int $v new value
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setLocalityFrom($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->locality_from !== $v) {
            $this->locality_from = $v;
            $this->modifiedColumns[] = ArrivalArchivePeer::LOCALITY_FROM;
        }


        return $this;
    } // setLocalityFrom()

    /**
     * Set the value of [locality_to] column.
     *
     * @param int $v new value
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setLocalityTo($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->locality_to !== $v) {
            $this->locality_to = $v;
            $this->modifiedColumns[] = ArrivalArchivePeer::LOCALITY_TO;
        }


        return $this;
    } // setLocalityTo()

    /**
     * Set the value of [driver_id] column.
     *
     * @param int $v new value
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setDriverId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->driver_id !== $v) {
            $this->driver_id = $v;
            $this->modifiedColumns[] = ArrivalArchivePeer::DRIVER_ID;
        }


        return $this;
    } // setDriverId()

    /**
     * Set the value of [vehicle_id] column.
     *
     * @param int $v new value
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setVehicleId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->vehicle_id !== $v) {
            $this->vehicle_id = $v;
            $this->modifiedColumns[] = ArrivalArchivePeer::VEHICLE_ID;
        }


        return $this;
    } // setVehicleId()

    /**
     * Sets the value of the [cancelled] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setCancelled($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->cancelled !== $v) {
            $this->cancelled = $v;
            $this->modifiedColumns[] = ArrivalArchivePeer::CANCELLED;
        }


        return $this;
    } // setCancelled()

    /**
     * Sets the value of [created_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setCreatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->created_at !== null || $dt !== null) {
            $currentDateAsString = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->created_at = $newDateAsString;
                $this->modifiedColumns[] = ArrivalArchivePeer::CREATED_AT;
            }
        } // if either are not null


        return $this;
    } // setCreatedAt()

    /**
     * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setUpdatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->updated_at !== null || $dt !== null) {
            $currentDateAsString = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->updated_at = $newDateAsString;
                $this->modifiedColumns[] = ArrivalArchivePeer::UPDATED_AT;
            }
        } // if either are not null


        return $this;
    } // setUpdatedAt()

    /**
     * Sets the value of [archived_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return ArrivalArchive The current object (for fluent API support)
     */
    public function setArchivedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->archived_at !== null || $dt !== null) {
            $currentDateAsString = ($this->archived_at !== null && $tmpDt = new DateTime($this->archived_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->archived_at = $newDateAsString;
                $this->modifiedColumns[] = ArrivalArchivePeer::ARCHIVED_AT;
            }
        } // if either are not null


        return $this;
    } // setArchivedAt()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->cancelled !== false) {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->booking_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
            $this->day = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->hour = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->flight = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
            $this->cost = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
            $this->note = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
            $this->payment_method_id = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
            $this->locality_from = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
            $this->locality_to = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
            $this->driver_id = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
            $this->vehicle_id = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
            $this->cancelled = ($row[$startcol + 12] !== null) ? (boolean) $row[$startcol + 12] : null;
            $this->created_at = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
            $this->updated_at = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
            $this->archived_at = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 16; // 16 = ArrivalArchivePeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating ArrivalArchive object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(ArrivalArchivePeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = ArrivalArchivePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(ArrivalArchivePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = ArrivalArchiveQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseArrivalArchive:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseArrivalArchive:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(ArrivalArchivePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseArrivalArchive:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            // symfony_timestampable behavior
            if ($this->isModified() && !$this->isColumnModified(ArrivalArchivePeer::UPDATED_AT))
            {
                $this->setUpdatedAt(time());
            }
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
                // symfony_timestampable behavior
                if (!$this->isColumnModified(ArrivalArchivePeer::CREATED_AT))
                {
                  $this->setCreatedAt(time());
                }

            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseArrivalArchive:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                ArrivalArchivePeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;


         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(ArrivalArchivePeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(ArrivalArchivePeer::BOOKING_ID)) {
            $modifiedColumns[':p' . $index++]  = '`BOOKING_ID`';
        }
        if ($this->isColumnModified(ArrivalArchivePeer::DAY)) {
            $modifiedColumns[':p' . $index++]  = '`DAY`';
        }
        if ($this->isColumnModified(ArrivalArchivePeer::HOUR)) {
            $modifiedColumns[':p' . $index++]  = '`HOUR`';
        }
        if ($this->isColumnModified(ArrivalArchivePeer::FLIGHT)) {
            $modifiedColumns[':p' . $index++]  = '`FLIGHT`';
        }
        if ($this->isColumnModified(ArrivalArchivePeer::COST)) {
            $modifiedColumns[':p' . $index++]  = '`COST`';
        }
        if ($this->isColumnModified(ArrivalArchivePeer::NOTE)) {
            $modifiedColumns[':p' . $index++]  = '`NOTE`';
        }
        if ($this->isColumnModified(ArrivalArchivePeer::PAYMENT_METHOD_ID)) {
            $modifiedColumns[':p' . $index++]  = '`PAYMENT_METHOD_ID`';
        }
        if ($this->isColumnModified(ArrivalArchivePeer::LOCALITY_FROM)) {
            $modifiedColumns[':p' . $index++]  = '`LOCALITY_FROM`';
        }
        if ($this->isColumnModified(ArrivalArchivePeer::LOCALITY_TO)) {
            $modifiedColumns[':p' . $index++]  = '`LOCALITY_TO`';
        }
        if ($this->isColumnModified(ArrivalArchivePeer::DRIVER_ID)) {
            $modifiedColumns[':p' . $index++]  = '`DRIVER_ID`';
        }
        if ($this->isColumnModified(ArrivalArchivePeer::VEHICLE_ID)) {
            $modifiedColumns[':p' . $index++]  = '`VEHICLE_ID`';
        }
        if ($this->isColumnModified(ArrivalArchivePeer::CANCELLED)) {
            $modifiedColumns[':p' . $index++]  = '`CANCELLED`';
        }
        if ($this->isColumnModified(ArrivalArchivePeer::CREATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_AT`';
        }
        if ($this->isColumnModified(ArrivalArchivePeer::UPDATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`UPDATED_AT`';
        }
        if ($this->isColumnModified(ArrivalArchivePeer::ARCHIVED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`ARCHIVED_AT`';
        }

        $sql = sprintf(
            'INSERT INTO `arrival_archive` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`BOOKING_ID`':
                        $stmt->bindValue($identifier, $this->booking_id, PDO::PARAM_INT);
                        break;
                    case '`DAY`':
                        $stmt->bindValue($identifier, $this->day, PDO::PARAM_STR);
                        break;
                    case '`HOUR`':
                        $stmt->bindValue($identifier, $this->hour, PDO::PARAM_STR);
                        break;
                    case '`FLIGHT`':
                        $stmt->bindValue($identifier, $this->flight, PDO::PARAM_STR);
                        break;
                    case '`COST`':
                        $stmt->bindValue($identifier, $this->cost, PDO::PARAM_STR);
                        break;
                    case '`NOTE`':
                        $stmt->bindValue($identifier, $this->note, PDO::PARAM_STR);
                        break;
                    case '`PAYMENT_METHOD_ID`':
                        $stmt->bindValue($identifier, $this->payment_method_id, PDO::PARAM_INT);
                        break;
                    case '`LOCALITY_FROM`':
                        $stmt->bindValue($identifier, $this->locality_from, PDO::PARAM_INT);
                        break;
                    case '`LOCALITY_TO`':
                        $stmt->bindValue($identifier, $this->locality_to, PDO::PARAM_INT);
                        break;
                    case '`DRIVER_ID`':
                        $stmt->bindValue($identifier, $this->driver_id, PDO::PARAM_INT);
                        break;
                    case '`VEHICLE_ID`':
                        $stmt->bindValue($identifier, $this->vehicle_id, PDO::PARAM_INT);
                        break;
                    case '`CANCELLED`':
                        $stmt->bindValue($identifier, (int) $this->cancelled, PDO::PARAM_INT);
                        break;
                    case '`CREATED_AT`':
                        $stmt->bindValue($identifier, $this->created_at, PDO::PARAM_STR);
                        break;
                    case '`UPDATED_AT`':
                        $stmt->bindValue($identifier, $this->updated_at, PDO::PARAM_STR);
                        break;
                    case '`ARCHIVED_AT`':
                        $stmt->bindValue($identifier, $this->archived_at, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            if (($retval = ArrivalArchivePeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }



            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = ArrivalArchivePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getBookingId();
                break;
            case 2:
                return $this->getDay();
                break;
            case 3:
                return $this->getHour();
                break;
            case 4:
                return $this->getFlight();
                break;
            case 5:
                return $this->getCost();
                break;
            case 6:
                return $this->getNote();
                break;
            case 7:
                return $this->getPaymentMethodId();
                break;
            case 8:
                return $this->getLocalityFrom();
                break;
            case 9:
                return $this->getLocalityTo();
                break;
            case 10:
                return $this->getDriverId();
                break;
            case 11:
                return $this->getVehicleId();
                break;
            case 12:
                return $this->getCancelled();
                break;
            case 13:
                return $this->getCreatedAt();
                break;
            case 14:
                return $this->getUpdatedAt();
                break;
            case 15:
                return $this->getArchivedAt();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array())
    {
        if (isset($alreadyDumpedObjects['ArrivalArchive'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['ArrivalArchive'][$this->getPrimaryKey()] = true;
        $keys = ArrivalArchivePeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getBookingId(),
            $keys[2] => $this->getDay(),
            $keys[3] => $this->getHour(),
            $keys[4] => $this->getFlight(),
            $keys[5] => $this->getCost(),
            $keys[6] => $this->getNote(),
            $keys[7] => $this->getPaymentMethodId(),
            $keys[8] => $this->getLocalityFrom(),
            $keys[9] => $this->getLocalityTo(),
            $keys[10] => $this->getDriverId(),
            $keys[11] => $this->getVehicleId(),
            $keys[12] => $this->getCancelled(),
            $keys[13] => $this->getCreatedAt(),
            $keys[14] => $this->getUpdatedAt(),
            $keys[15] => $this->getArchivedAt(),
        );

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = ArrivalArchivePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setBookingId($value);
                break;
            case 2:
                $this->setDay($value);
                break;
            case 3:
                $this->setHour($value);
                break;
            case 4:
                $this->setFlight($value);
                break;
            case 5:
                $this->setCost($value);
                break;
            case 6:
                $this->setNote($value);
                break;
            case 7:
                $this->setPaymentMethodId($value);
                break;
            case 8:
                $this->setLocalityFrom($value);
                break;
            case 9:
                $this->setLocalityTo($value);
                break;
            case 10:
                $this->setDriverId($value);
                break;
            case 11:
                $this->setVehicleId($value);
                break;
            case 12:
                $this->setCancelled($value);
                break;
            case 13:
                $this->setCreatedAt($value);
                break;
            case 14:
                $this->setUpdatedAt($value);
                break;
            case 15:
                $this->setArchivedAt($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = ArrivalArchivePeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setBookingId($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setDay($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setHour($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setFlight($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setCost($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setNote($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setPaymentMethodId($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setLocalityFrom($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setLocalityTo($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setDriverId($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setVehicleId($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setCancelled($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setCreatedAt($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setUpdatedAt($arr[$keys[14]]);
        if (array_key_exists($keys[15], $arr)) $this->setArchivedAt($arr[$keys[15]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(ArrivalArchivePeer::DATABASE_NAME);

        if ($this->isColumnModified(ArrivalArchivePeer::ID)) $criteria->add(ArrivalArchivePeer::ID, $this->id);
        if ($this->isColumnModified(ArrivalArchivePeer::BOOKING_ID)) $criteria->add(ArrivalArchivePeer::BOOKING_ID, $this->booking_id);
        if ($this->isColumnModified(ArrivalArchivePeer::DAY)) $criteria->add(ArrivalArchivePeer::DAY, $this->day);
        if ($this->isColumnModified(ArrivalArchivePeer::HOUR)) $criteria->add(ArrivalArchivePeer::HOUR, $this->hour);
        if ($this->isColumnModified(ArrivalArchivePeer::FLIGHT)) $criteria->add(ArrivalArchivePeer::FLIGHT, $this->flight);
        if ($this->isColumnModified(ArrivalArchivePeer::COST)) $criteria->add(ArrivalArchivePeer::COST, $this->cost);
        if ($this->isColumnModified(ArrivalArchivePeer::NOTE)) $criteria->add(ArrivalArchivePeer::NOTE, $this->note);
        if ($this->isColumnModified(ArrivalArchivePeer::PAYMENT_METHOD_ID)) $criteria->add(ArrivalArchivePeer::PAYMENT_METHOD_ID, $this->payment_method_id);
        if ($this->isColumnModified(ArrivalArchivePeer::LOCALITY_FROM)) $criteria->add(ArrivalArchivePeer::LOCALITY_FROM, $this->locality_from);
        if ($this->isColumnModified(ArrivalArchivePeer::LOCALITY_TO)) $criteria->add(ArrivalArchivePeer::LOCALITY_TO, $this->locality_to);
        if ($this->isColumnModified(ArrivalArchivePeer::DRIVER_ID)) $criteria->add(ArrivalArchivePeer::DRIVER_ID, $this->driver_id);
        if ($this->isColumnModified(ArrivalArchivePeer::VEHICLE_ID)) $criteria->add(ArrivalArchivePeer::VEHICLE_ID, $this->vehicle_id);
        if ($this->isColumnModified(ArrivalArchivePeer::CANCELLED)) $criteria->add(ArrivalArchivePeer::CANCELLED, $this->cancelled);
        if ($this->isColumnModified(ArrivalArchivePeer::CREATED_AT)) $criteria->add(ArrivalArchivePeer::CREATED_AT, $this->created_at);
        if ($this->isColumnModified(ArrivalArchivePeer::UPDATED_AT)) $criteria->add(ArrivalArchivePeer::UPDATED_AT, $this->updated_at);
        if ($this->isColumnModified(ArrivalArchivePeer::ARCHIVED_AT)) $criteria->add(ArrivalArchivePeer::ARCHIVED_AT, $this->archived_at);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(ArrivalArchivePeer::DATABASE_NAME);
        $criteria->add(ArrivalArchivePeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of ArrivalArchive (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setBookingId($this->getBookingId());
        $copyObj->setDay($this->getDay());
        $copyObj->setHour($this->getHour());
        $copyObj->setFlight($this->getFlight());
        $copyObj->setCost($this->getCost());
        $copyObj->setNote($this->getNote());
        $copyObj->setPaymentMethodId($this->getPaymentMethodId());
        $copyObj->setLocalityFrom($this->getLocalityFrom());
        $copyObj->setLocalityTo($this->getLocalityTo());
        $copyObj->setDriverId($this->getDriverId());
        $copyObj->setVehicleId($this->getVehicleId());
        $copyObj->setCancelled($this->getCancelled());
        $copyObj->setCreatedAt($this->getCreatedAt());
        $copyObj->setUpdatedAt($this->getUpdatedAt());
        $copyObj->setArchivedAt($this->getArchivedAt());
        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return ArrivalArchive Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return ArrivalArchivePeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new ArrivalArchivePeer();
        }

        return self::$peer;
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->booking_id = null;
        $this->day = null;
        $this->hour = null;
        $this->flight = null;
        $this->cost = null;
        $this->note = null;
        $this->payment_method_id = null;
        $this->locality_from = null;
        $this->locality_to = null;
        $this->driver_id = null;
        $this->vehicle_id = null;
        $this->cancelled = null;
        $this->created_at = null;
        $this->updated_at = null;
        $this->archived_at = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
        } // if ($deep)

    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(ArrivalArchivePeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BaseArrivalArchive:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
