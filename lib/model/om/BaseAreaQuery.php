<?php


/**
 * Base class that represents a query for the 'area' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Wed Dec  3 16:02:41 2014
 *
 * @method AreaQuery orderById($order = Criteria::ASC) Order by the id column
 * @method AreaQuery orderByIsActive($order = Criteria::ASC) Order by the is_active column
 * @method AreaQuery orderByName($order = Criteria::ASC) Order by the name column
 * @method AreaQuery orderByLatitude($order = Criteria::ASC) Order by the latitude column
 * @method AreaQuery orderByLongitude($order = Criteria::ASC) Order by the longitude column
 * @method AreaQuery orderByViewportSwLt($order = Criteria::ASC) Order by the viewport_sw_lt column
 * @method AreaQuery orderByViewportSwLn($order = Criteria::ASC) Order by the viewport_sw_ln column
 * @method AreaQuery orderByViewportNeLt($order = Criteria::ASC) Order by the viewport_ne_lt column
 * @method AreaQuery orderByViewportNeLn($order = Criteria::ASC) Order by the viewport_ne_ln column
 * @method AreaQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method AreaQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method AreaQuery groupById() Group by the id column
 * @method AreaQuery groupByIsActive() Group by the is_active column
 * @method AreaQuery groupByName() Group by the name column
 * @method AreaQuery groupByLatitude() Group by the latitude column
 * @method AreaQuery groupByLongitude() Group by the longitude column
 * @method AreaQuery groupByViewportSwLt() Group by the viewport_sw_lt column
 * @method AreaQuery groupByViewportSwLn() Group by the viewport_sw_ln column
 * @method AreaQuery groupByViewportNeLt() Group by the viewport_ne_lt column
 * @method AreaQuery groupByViewportNeLn() Group by the viewport_ne_ln column
 * @method AreaQuery groupByCreatedAt() Group by the created_at column
 * @method AreaQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method AreaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method AreaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method AreaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method AreaQuery leftJoinLocality($relationAlias = null) Adds a LEFT JOIN clause to the query using the Locality relation
 * @method AreaQuery rightJoinLocality($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Locality relation
 * @method AreaQuery innerJoinLocality($relationAlias = null) Adds a INNER JOIN clause to the query using the Locality relation
 *
 * @method AreaQuery leftJoinAreaVehicleRateTable($relationAlias = null) Adds a LEFT JOIN clause to the query using the AreaVehicleRateTable relation
 * @method AreaQuery rightJoinAreaVehicleRateTable($relationAlias = null) Adds a RIGHT JOIN clause to the query using the AreaVehicleRateTable relation
 * @method AreaQuery innerJoinAreaVehicleRateTable($relationAlias = null) Adds a INNER JOIN clause to the query using the AreaVehicleRateTable relation
 *
 * @method Area findOne(PropelPDO $con = null) Return the first Area matching the query
 * @method Area findOneOrCreate(PropelPDO $con = null) Return the first Area matching the query, or a new Area object populated from the query conditions when no match is found
 *
 * @method Area findOneById(int $id) Return the first Area filtered by the id column
 * @method Area findOneByIsActive(boolean $is_active) Return the first Area filtered by the is_active column
 * @method Area findOneByName(string $name) Return the first Area filtered by the name column
 * @method Area findOneByLatitude(double $latitude) Return the first Area filtered by the latitude column
 * @method Area findOneByLongitude(double $longitude) Return the first Area filtered by the longitude column
 * @method Area findOneByViewportSwLt(double $viewport_sw_lt) Return the first Area filtered by the viewport_sw_lt column
 * @method Area findOneByViewportSwLn(double $viewport_sw_ln) Return the first Area filtered by the viewport_sw_ln column
 * @method Area findOneByViewportNeLt(double $viewport_ne_lt) Return the first Area filtered by the viewport_ne_lt column
 * @method Area findOneByViewportNeLn(double $viewport_ne_ln) Return the first Area filtered by the viewport_ne_ln column
 * @method Area findOneByCreatedAt(string $created_at) Return the first Area filtered by the created_at column
 * @method Area findOneByUpdatedAt(string $updated_at) Return the first Area filtered by the updated_at column
 *
 * @method array findById(int $id) Return Area objects filtered by the id column
 * @method array findByIsActive(boolean $is_active) Return Area objects filtered by the is_active column
 * @method array findByName(string $name) Return Area objects filtered by the name column
 * @method array findByLatitude(double $latitude) Return Area objects filtered by the latitude column
 * @method array findByLongitude(double $longitude) Return Area objects filtered by the longitude column
 * @method array findByViewportSwLt(double $viewport_sw_lt) Return Area objects filtered by the viewport_sw_lt column
 * @method array findByViewportSwLn(double $viewport_sw_ln) Return Area objects filtered by the viewport_sw_ln column
 * @method array findByViewportNeLt(double $viewport_ne_lt) Return Area objects filtered by the viewport_ne_lt column
 * @method array findByViewportNeLn(double $viewport_ne_ln) Return Area objects filtered by the viewport_ne_ln column
 * @method array findByCreatedAt(string $created_at) Return Area objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Area objects filtered by the updated_at column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseAreaQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseAreaQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Area', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new AreaQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     AreaQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return AreaQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof AreaQuery) {
            return $criteria;
        }
        $query = new AreaQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Area|Area[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = AreaPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(AreaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Area A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `IS_ACTIVE`, `NAME`, `LATITUDE`, `LONGITUDE`, `VIEWPORT_SW_LT`, `VIEWPORT_SW_LN`, `VIEWPORT_NE_LT`, `VIEWPORT_NE_LN`, `CREATED_AT`, `UPDATED_AT` FROM `area` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Area();
            $obj->hydrate($row);
            AreaPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Area|Area[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Area[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(AreaPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(AreaPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(AreaPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the is_active column
     *
     * Example usage:
     * <code>
     * $query->filterByIsActive(true); // WHERE is_active = true
     * $query->filterByIsActive('yes'); // WHERE is_active = true
     * </code>
     *
     * @param     boolean|string $isActive The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function filterByIsActive($isActive = null, $comparison = null)
    {
        if (is_string($isActive)) {
            $is_active = in_array(strtolower($isActive), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(AreaPeer::IS_ACTIVE, $isActive, $comparison);
    }

    /**
     * Filter the query on the name column
     *
     * Example usage:
     * <code>
     * $query->filterByName('fooValue');   // WHERE name = 'fooValue'
     * $query->filterByName('%fooValue%'); // WHERE name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $name The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function filterByName($name = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($name)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $name)) {
                $name = str_replace('*', '%', $name);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AreaPeer::NAME, $name, $comparison);
    }

    /**
     * Filter the query on the latitude column
     *
     * Example usage:
     * <code>
     * $query->filterByLatitude(1234); // WHERE latitude = 1234
     * $query->filterByLatitude(array(12, 34)); // WHERE latitude IN (12, 34)
     * $query->filterByLatitude(array('min' => 12)); // WHERE latitude > 12
     * </code>
     *
     * @param     mixed $latitude The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function filterByLatitude($latitude = null, $comparison = null)
    {
        if (is_array($latitude)) {
            $useMinMax = false;
            if (isset($latitude['min'])) {
                $this->addUsingAlias(AreaPeer::LATITUDE, $latitude['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($latitude['max'])) {
                $this->addUsingAlias(AreaPeer::LATITUDE, $latitude['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AreaPeer::LATITUDE, $latitude, $comparison);
    }

    /**
     * Filter the query on the longitude column
     *
     * Example usage:
     * <code>
     * $query->filterByLongitude(1234); // WHERE longitude = 1234
     * $query->filterByLongitude(array(12, 34)); // WHERE longitude IN (12, 34)
     * $query->filterByLongitude(array('min' => 12)); // WHERE longitude > 12
     * </code>
     *
     * @param     mixed $longitude The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function filterByLongitude($longitude = null, $comparison = null)
    {
        if (is_array($longitude)) {
            $useMinMax = false;
            if (isset($longitude['min'])) {
                $this->addUsingAlias(AreaPeer::LONGITUDE, $longitude['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($longitude['max'])) {
                $this->addUsingAlias(AreaPeer::LONGITUDE, $longitude['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AreaPeer::LONGITUDE, $longitude, $comparison);
    }

    /**
     * Filter the query on the viewport_sw_lt column
     *
     * Example usage:
     * <code>
     * $query->filterByViewportSwLt(1234); // WHERE viewport_sw_lt = 1234
     * $query->filterByViewportSwLt(array(12, 34)); // WHERE viewport_sw_lt IN (12, 34)
     * $query->filterByViewportSwLt(array('min' => 12)); // WHERE viewport_sw_lt > 12
     * </code>
     *
     * @param     mixed $viewportSwLt The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function filterByViewportSwLt($viewportSwLt = null, $comparison = null)
    {
        if (is_array($viewportSwLt)) {
            $useMinMax = false;
            if (isset($viewportSwLt['min'])) {
                $this->addUsingAlias(AreaPeer::VIEWPORT_SW_LT, $viewportSwLt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($viewportSwLt['max'])) {
                $this->addUsingAlias(AreaPeer::VIEWPORT_SW_LT, $viewportSwLt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AreaPeer::VIEWPORT_SW_LT, $viewportSwLt, $comparison);
    }

    /**
     * Filter the query on the viewport_sw_ln column
     *
     * Example usage:
     * <code>
     * $query->filterByViewportSwLn(1234); // WHERE viewport_sw_ln = 1234
     * $query->filterByViewportSwLn(array(12, 34)); // WHERE viewport_sw_ln IN (12, 34)
     * $query->filterByViewportSwLn(array('min' => 12)); // WHERE viewport_sw_ln > 12
     * </code>
     *
     * @param     mixed $viewportSwLn The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function filterByViewportSwLn($viewportSwLn = null, $comparison = null)
    {
        if (is_array($viewportSwLn)) {
            $useMinMax = false;
            if (isset($viewportSwLn['min'])) {
                $this->addUsingAlias(AreaPeer::VIEWPORT_SW_LN, $viewportSwLn['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($viewportSwLn['max'])) {
                $this->addUsingAlias(AreaPeer::VIEWPORT_SW_LN, $viewportSwLn['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AreaPeer::VIEWPORT_SW_LN, $viewportSwLn, $comparison);
    }

    /**
     * Filter the query on the viewport_ne_lt column
     *
     * Example usage:
     * <code>
     * $query->filterByViewportNeLt(1234); // WHERE viewport_ne_lt = 1234
     * $query->filterByViewportNeLt(array(12, 34)); // WHERE viewport_ne_lt IN (12, 34)
     * $query->filterByViewportNeLt(array('min' => 12)); // WHERE viewport_ne_lt > 12
     * </code>
     *
     * @param     mixed $viewportNeLt The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function filterByViewportNeLt($viewportNeLt = null, $comparison = null)
    {
        if (is_array($viewportNeLt)) {
            $useMinMax = false;
            if (isset($viewportNeLt['min'])) {
                $this->addUsingAlias(AreaPeer::VIEWPORT_NE_LT, $viewportNeLt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($viewportNeLt['max'])) {
                $this->addUsingAlias(AreaPeer::VIEWPORT_NE_LT, $viewportNeLt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AreaPeer::VIEWPORT_NE_LT, $viewportNeLt, $comparison);
    }

    /**
     * Filter the query on the viewport_ne_ln column
     *
     * Example usage:
     * <code>
     * $query->filterByViewportNeLn(1234); // WHERE viewport_ne_ln = 1234
     * $query->filterByViewportNeLn(array(12, 34)); // WHERE viewport_ne_ln IN (12, 34)
     * $query->filterByViewportNeLn(array('min' => 12)); // WHERE viewport_ne_ln > 12
     * </code>
     *
     * @param     mixed $viewportNeLn The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function filterByViewportNeLn($viewportNeLn = null, $comparison = null)
    {
        if (is_array($viewportNeLn)) {
            $useMinMax = false;
            if (isset($viewportNeLn['min'])) {
                $this->addUsingAlias(AreaPeer::VIEWPORT_NE_LN, $viewportNeLn['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($viewportNeLn['max'])) {
                $this->addUsingAlias(AreaPeer::VIEWPORT_NE_LN, $viewportNeLn['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AreaPeer::VIEWPORT_NE_LN, $viewportNeLn, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(AreaPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(AreaPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AreaPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(AreaPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(AreaPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AreaPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query by a related Locality object
     *
     * @param   Locality|PropelObjectCollection $locality  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AreaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByLocality($locality, $comparison = null)
    {
        if ($locality instanceof Locality) {
            return $this
                ->addUsingAlias(AreaPeer::ID, $locality->getAreaId(), $comparison);
        } elseif ($locality instanceof PropelObjectCollection) {
            return $this
                ->useLocalityQuery()
                ->filterByPrimaryKeys($locality->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByLocality() only accepts arguments of type Locality or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Locality relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function joinLocality($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Locality');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Locality');
        }

        return $this;
    }

    /**
     * Use the Locality relation Locality object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   LocalityQuery A secondary query class using the current class as primary query
     */
    public function useLocalityQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinLocality($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Locality', 'LocalityQuery');
    }

    /**
     * Filter the query by a related AreaVehicleRateTable object
     *
     * @param   AreaVehicleRateTable|PropelObjectCollection $areaVehicleRateTable  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AreaQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByAreaVehicleRateTable($areaVehicleRateTable, $comparison = null)
    {
        if ($areaVehicleRateTable instanceof AreaVehicleRateTable) {
            return $this
                ->addUsingAlias(AreaPeer::ID, $areaVehicleRateTable->getAreaId(), $comparison);
        } elseif ($areaVehicleRateTable instanceof PropelObjectCollection) {
            return $this
                ->useAreaVehicleRateTableQuery()
                ->filterByPrimaryKeys($areaVehicleRateTable->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByAreaVehicleRateTable() only accepts arguments of type AreaVehicleRateTable or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the AreaVehicleRateTable relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function joinAreaVehicleRateTable($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('AreaVehicleRateTable');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'AreaVehicleRateTable');
        }

        return $this;
    }

    /**
     * Use the AreaVehicleRateTable relation AreaVehicleRateTable object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   AreaVehicleRateTableQuery A secondary query class using the current class as primary query
     */
    public function useAreaVehicleRateTableQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinAreaVehicleRateTable($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'AreaVehicleRateTable', 'AreaVehicleRateTableQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Area $area Object to remove from the list of results
     *
     * @return AreaQuery The current query, for fluid interface
     */
    public function prune($area = null)
    {
        if ($area) {
            $this->addUsingAlias(AreaPeer::ID, $area->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

    // Timestampable behavior

    /**
     * Filter by the latest updated
     *
     * @param      int $nbDays Maximum age of the latest update in days
     *
     * @return     AreaQuery The current query, for fluid interface
     */
    public function recentlyUpdated($nbDays = 7)
    {
        return $this->addUsingAlias(AreaPeer::UPDATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
    }

    /**
     * Order by update date desc
     *
     * @return     AreaQuery The current query, for fluid interface
     */
    public function lastUpdatedFirst()
    {
        return $this->addDescendingOrderByColumn(AreaPeer::UPDATED_AT);
    }

    /**
     * Order by update date asc
     *
     * @return     AreaQuery The current query, for fluid interface
     */
    public function firstUpdatedFirst()
    {
        return $this->addAscendingOrderByColumn(AreaPeer::UPDATED_AT);
    }

    /**
     * Filter by the latest created
     *
     * @param      int $nbDays Maximum age of in days
     *
     * @return     AreaQuery The current query, for fluid interface
     */
    public function recentlyCreated($nbDays = 7)
    {
        return $this->addUsingAlias(AreaPeer::CREATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
    }

    /**
     * Order by create date desc
     *
     * @return     AreaQuery The current query, for fluid interface
     */
    public function lastCreatedFirst()
    {
        return $this->addDescendingOrderByColumn(AreaPeer::CREATED_AT);
    }

    /**
     * Order by create date asc
     *
     * @return     AreaQuery The current query, for fluid interface
     */
    public function firstCreatedFirst()
    {
        return $this->addAscendingOrderByColumn(AreaPeer::CREATED_AT);
    }
}
