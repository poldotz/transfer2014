<?php


/**
 * Base class that represents a query for the 'rate_archive' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue 13 May 2014 04:15:10 PM CEST
 *
 * @method RateArchiveQuery orderById($order = Criteria::ASC) Order by the id column
 * @method RateArchiveQuery orderByName($order = Criteria::ASC) Order by the name column
 * @method RateArchiveQuery orderByDescription($order = Criteria::ASC) Order by the description column
 * @method RateArchiveQuery orderByDay($order = Criteria::ASC) Order by the day column
 * @method RateArchiveQuery orderByHourFrom($order = Criteria::ASC) Order by the hour_from column
 * @method RateArchiveQuery orderByHourTo($order = Criteria::ASC) Order by the hour_to column
 * @method RateArchiveQuery orderBySurcharge($order = Criteria::ASC) Order by the surcharge column
 * @method RateArchiveQuery orderByPerPerson($order = Criteria::ASC) Order by the per_person column
 * @method RateArchiveQuery orderByNote($order = Criteria::ASC) Order by the note column
 * @method RateArchiveQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method RateArchiveQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method RateArchiveQuery orderByArchivedAt($order = Criteria::ASC) Order by the archived_at column
 *
 * @method RateArchiveQuery groupById() Group by the id column
 * @method RateArchiveQuery groupByName() Group by the name column
 * @method RateArchiveQuery groupByDescription() Group by the description column
 * @method RateArchiveQuery groupByDay() Group by the day column
 * @method RateArchiveQuery groupByHourFrom() Group by the hour_from column
 * @method RateArchiveQuery groupByHourTo() Group by the hour_to column
 * @method RateArchiveQuery groupBySurcharge() Group by the surcharge column
 * @method RateArchiveQuery groupByPerPerson() Group by the per_person column
 * @method RateArchiveQuery groupByNote() Group by the note column
 * @method RateArchiveQuery groupByCreatedAt() Group by the created_at column
 * @method RateArchiveQuery groupByUpdatedAt() Group by the updated_at column
 * @method RateArchiveQuery groupByArchivedAt() Group by the archived_at column
 *
 * @method RateArchiveQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method RateArchiveQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method RateArchiveQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method RateArchive findOne(PropelPDO $con = null) Return the first RateArchive matching the query
 * @method RateArchive findOneOrCreate(PropelPDO $con = null) Return the first RateArchive matching the query, or a new RateArchive object populated from the query conditions when no match is found
 *
 * @method RateArchive findOneById(int $id) Return the first RateArchive filtered by the id column
 * @method RateArchive findOneByName(string $name) Return the first RateArchive filtered by the name column
 * @method RateArchive findOneByDescription(string $description) Return the first RateArchive filtered by the description column
 * @method RateArchive findOneByDay(string $day) Return the first RateArchive filtered by the day column
 * @method RateArchive findOneByHourFrom(string $hour_from) Return the first RateArchive filtered by the hour_from column
 * @method RateArchive findOneByHourTo(string $hour_to) Return the first RateArchive filtered by the hour_to column
 * @method RateArchive findOneBySurcharge(int $surcharge) Return the first RateArchive filtered by the surcharge column
 * @method RateArchive findOneByPerPerson(boolean $per_person) Return the first RateArchive filtered by the per_person column
 * @method RateArchive findOneByNote(string $note) Return the first RateArchive filtered by the note column
 * @method RateArchive findOneByCreatedAt(string $created_at) Return the first RateArchive filtered by the created_at column
 * @method RateArchive findOneByUpdatedAt(string $updated_at) Return the first RateArchive filtered by the updated_at column
 * @method RateArchive findOneByArchivedAt(string $archived_at) Return the first RateArchive filtered by the archived_at column
 *
 * @method array findById(int $id) Return RateArchive objects filtered by the id column
 * @method array findByName(string $name) Return RateArchive objects filtered by the name column
 * @method array findByDescription(string $description) Return RateArchive objects filtered by the description column
 * @method array findByDay(string $day) Return RateArchive objects filtered by the day column
 * @method array findByHourFrom(string $hour_from) Return RateArchive objects filtered by the hour_from column
 * @method array findByHourTo(string $hour_to) Return RateArchive objects filtered by the hour_to column
 * @method array findBySurcharge(int $surcharge) Return RateArchive objects filtered by the surcharge column
 * @method array findByPerPerson(boolean $per_person) Return RateArchive objects filtered by the per_person column
 * @method array findByNote(string $note) Return RateArchive objects filtered by the note column
 * @method array findByCreatedAt(string $created_at) Return RateArchive objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return RateArchive objects filtered by the updated_at column
 * @method array findByArchivedAt(string $archived_at) Return RateArchive objects filtered by the archived_at column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseRateArchiveQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseRateArchiveQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'RateArchive', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new RateArchiveQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     RateArchiveQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return RateArchiveQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof RateArchiveQuery) {
            return $criteria;
        }
        $query = new RateArchiveQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   RateArchive|RateArchive[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = RateArchivePeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(RateArchivePeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   RateArchive A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `NAME`, `DESCRIPTION`, `DAY`, `HOUR_FROM`, `HOUR_TO`, `SURCHARGE`, `PER_PERSON`, `NOTE`, `CREATED_AT`, `UPDATED_AT`, `ARCHIVED_AT` FROM `rate_archive` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new RateArchive();
            $obj->hydrate($row);
            RateArchivePeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return RateArchive|RateArchive[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|RateArchive[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return RateArchiveQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(RateArchivePeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return RateArchiveQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(RateArchivePeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateArchiveQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(RateArchivePeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the name column
     *
     * Example usage:
     * <code>
     * $query->filterByName('fooValue');   // WHERE name = 'fooValue'
     * $query->filterByName('%fooValue%'); // WHERE name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $name The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateArchiveQuery The current query, for fluid interface
     */
    public function filterByName($name = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($name)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $name)) {
                $name = str_replace('*', '%', $name);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RateArchivePeer::NAME, $name, $comparison);
    }

    /**
     * Filter the query on the description column
     *
     * Example usage:
     * <code>
     * $query->filterByDescription('fooValue');   // WHERE description = 'fooValue'
     * $query->filterByDescription('%fooValue%'); // WHERE description LIKE '%fooValue%'
     * </code>
     *
     * @param     string $description The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateArchiveQuery The current query, for fluid interface
     */
    public function filterByDescription($description = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($description)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $description)) {
                $description = str_replace('*', '%', $description);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RateArchivePeer::DESCRIPTION, $description, $comparison);
    }

    /**
     * Filter the query on the day column
     *
     * Example usage:
     * <code>
     * $query->filterByDay('fooValue');   // WHERE day = 'fooValue'
     * $query->filterByDay('%fooValue%'); // WHERE day LIKE '%fooValue%'
     * </code>
     *
     * @param     string $day The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateArchiveQuery The current query, for fluid interface
     */
    public function filterByDay($day = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($day)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $day)) {
                $day = str_replace('*', '%', $day);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RateArchivePeer::DAY, $day, $comparison);
    }

    /**
     * Filter the query on the hour_from column
     *
     * Example usage:
     * <code>
     * $query->filterByHourFrom('2011-03-14'); // WHERE hour_from = '2011-03-14'
     * $query->filterByHourFrom('now'); // WHERE hour_from = '2011-03-14'
     * $query->filterByHourFrom(array('max' => 'yesterday')); // WHERE hour_from > '2011-03-13'
     * </code>
     *
     * @param     mixed $hourFrom The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateArchiveQuery The current query, for fluid interface
     */
    public function filterByHourFrom($hourFrom = null, $comparison = null)
    {
        if (is_array($hourFrom)) {
            $useMinMax = false;
            if (isset($hourFrom['min'])) {
                $this->addUsingAlias(RateArchivePeer::HOUR_FROM, $hourFrom['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($hourFrom['max'])) {
                $this->addUsingAlias(RateArchivePeer::HOUR_FROM, $hourFrom['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RateArchivePeer::HOUR_FROM, $hourFrom, $comparison);
    }

    /**
     * Filter the query on the hour_to column
     *
     * Example usage:
     * <code>
     * $query->filterByHourTo('2011-03-14'); // WHERE hour_to = '2011-03-14'
     * $query->filterByHourTo('now'); // WHERE hour_to = '2011-03-14'
     * $query->filterByHourTo(array('max' => 'yesterday')); // WHERE hour_to > '2011-03-13'
     * </code>
     *
     * @param     mixed $hourTo The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateArchiveQuery The current query, for fluid interface
     */
    public function filterByHourTo($hourTo = null, $comparison = null)
    {
        if (is_array($hourTo)) {
            $useMinMax = false;
            if (isset($hourTo['min'])) {
                $this->addUsingAlias(RateArchivePeer::HOUR_TO, $hourTo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($hourTo['max'])) {
                $this->addUsingAlias(RateArchivePeer::HOUR_TO, $hourTo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RateArchivePeer::HOUR_TO, $hourTo, $comparison);
    }

    /**
     * Filter the query on the surcharge column
     *
     * Example usage:
     * <code>
     * $query->filterBySurcharge(1234); // WHERE surcharge = 1234
     * $query->filterBySurcharge(array(12, 34)); // WHERE surcharge IN (12, 34)
     * $query->filterBySurcharge(array('min' => 12)); // WHERE surcharge > 12
     * </code>
     *
     * @param     mixed $surcharge The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateArchiveQuery The current query, for fluid interface
     */
    public function filterBySurcharge($surcharge = null, $comparison = null)
    {
        if (is_array($surcharge)) {
            $useMinMax = false;
            if (isset($surcharge['min'])) {
                $this->addUsingAlias(RateArchivePeer::SURCHARGE, $surcharge['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($surcharge['max'])) {
                $this->addUsingAlias(RateArchivePeer::SURCHARGE, $surcharge['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RateArchivePeer::SURCHARGE, $surcharge, $comparison);
    }

    /**
     * Filter the query on the per_person column
     *
     * Example usage:
     * <code>
     * $query->filterByPerPerson(true); // WHERE per_person = true
     * $query->filterByPerPerson('yes'); // WHERE per_person = true
     * </code>
     *
     * @param     boolean|string $perPerson The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateArchiveQuery The current query, for fluid interface
     */
    public function filterByPerPerson($perPerson = null, $comparison = null)
    {
        if (is_string($perPerson)) {
            $per_person = in_array(strtolower($perPerson), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(RateArchivePeer::PER_PERSON, $perPerson, $comparison);
    }

    /**
     * Filter the query on the note column
     *
     * Example usage:
     * <code>
     * $query->filterByNote('fooValue');   // WHERE note = 'fooValue'
     * $query->filterByNote('%fooValue%'); // WHERE note LIKE '%fooValue%'
     * </code>
     *
     * @param     string $note The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateArchiveQuery The current query, for fluid interface
     */
    public function filterByNote($note = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($note)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $note)) {
                $note = str_replace('*', '%', $note);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RateArchivePeer::NOTE, $note, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateArchiveQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(RateArchivePeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(RateArchivePeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RateArchivePeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateArchiveQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(RateArchivePeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(RateArchivePeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RateArchivePeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the archived_at column
     *
     * Example usage:
     * <code>
     * $query->filterByArchivedAt('2011-03-14'); // WHERE archived_at = '2011-03-14'
     * $query->filterByArchivedAt('now'); // WHERE archived_at = '2011-03-14'
     * $query->filterByArchivedAt(array('max' => 'yesterday')); // WHERE archived_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $archivedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateArchiveQuery The current query, for fluid interface
     */
    public function filterByArchivedAt($archivedAt = null, $comparison = null)
    {
        if (is_array($archivedAt)) {
            $useMinMax = false;
            if (isset($archivedAt['min'])) {
                $this->addUsingAlias(RateArchivePeer::ARCHIVED_AT, $archivedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($archivedAt['max'])) {
                $this->addUsingAlias(RateArchivePeer::ARCHIVED_AT, $archivedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RateArchivePeer::ARCHIVED_AT, $archivedAt, $comparison);
    }

    /**
     * Exclude object from result
     *
     * @param   RateArchive $rateArchive Object to remove from the list of results
     *
     * @return RateArchiveQuery The current query, for fluid interface
     */
    public function prune($rateArchive = null)
    {
        if ($rateArchive) {
            $this->addUsingAlias(RateArchivePeer::ID, $rateArchive->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
