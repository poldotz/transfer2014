<?php


/**
 * Base class that represents a query for the 'rate' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue 13 May 2014 11:44:56 AM CEST
 *
 * @method RateQuery orderById($order = Criteria::ASC) Order by the id column
 * @method RateQuery orderByName($order = Criteria::ASC) Order by the name column
 * @method RateQuery orderByDescription($order = Criteria::ASC) Order by the description column
 * @method RateQuery orderByDay($order = Criteria::ASC) Order by the day column
 * @method RateQuery orderByHourFrom($order = Criteria::ASC) Order by the hour_from column
 * @method RateQuery orderByHourTo($order = Criteria::ASC) Order by the hour_to column
 * @method RateQuery orderBySurcharge($order = Criteria::ASC) Order by the surcharge column
 * @method RateQuery orderByPerPerson($order = Criteria::ASC) Order by the per_person column
 * @method RateQuery orderByNote($order = Criteria::ASC) Order by the note column
 * @method RateQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method RateQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method RateQuery orderByVersion($order = Criteria::ASC) Order by the version column
 * @method RateQuery orderByVersionCreatedAt($order = Criteria::ASC) Order by the version_created_at column
 * @method RateQuery orderByVersionCreatedBy($order = Criteria::ASC) Order by the version_created_by column
 *
 * @method RateQuery groupById() Group by the id column
 * @method RateQuery groupByName() Group by the name column
 * @method RateQuery groupByDescription() Group by the description column
 * @method RateQuery groupByDay() Group by the day column
 * @method RateQuery groupByHourFrom() Group by the hour_from column
 * @method RateQuery groupByHourTo() Group by the hour_to column
 * @method RateQuery groupBySurcharge() Group by the surcharge column
 * @method RateQuery groupByPerPerson() Group by the per_person column
 * @method RateQuery groupByNote() Group by the note column
 * @method RateQuery groupByCreatedAt() Group by the created_at column
 * @method RateQuery groupByUpdatedAt() Group by the updated_at column
 * @method RateQuery groupByVersion() Group by the version column
 * @method RateQuery groupByVersionCreatedAt() Group by the version_created_at column
 * @method RateQuery groupByVersionCreatedBy() Group by the version_created_by column
 *
 * @method RateQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method RateQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method RateQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method RateQuery leftJoinCustomerRateTable($relationAlias = null) Adds a LEFT JOIN clause to the query using the CustomerRateTable relation
 * @method RateQuery rightJoinCustomerRateTable($relationAlias = null) Adds a RIGHT JOIN clause to the query using the CustomerRateTable relation
 * @method RateQuery innerJoinCustomerRateTable($relationAlias = null) Adds a INNER JOIN clause to the query using the CustomerRateTable relation
 *
 * @method RateQuery leftJoinRateVersion($relationAlias = null) Adds a LEFT JOIN clause to the query using the RateVersion relation
 * @method RateQuery rightJoinRateVersion($relationAlias = null) Adds a RIGHT JOIN clause to the query using the RateVersion relation
 * @method RateQuery innerJoinRateVersion($relationAlias = null) Adds a INNER JOIN clause to the query using the RateVersion relation
 *
 * @method Rate findOne(PropelPDO $con = null) Return the first Rate matching the query
 * @method Rate findOneOrCreate(PropelPDO $con = null) Return the first Rate matching the query, or a new Rate object populated from the query conditions when no match is found
 *
 * @method Rate findOneById(int $id) Return the first Rate filtered by the id column
 * @method Rate findOneByName(string $name) Return the first Rate filtered by the name column
 * @method Rate findOneByDescription(string $description) Return the first Rate filtered by the description column
 * @method Rate findOneByDay(string $day) Return the first Rate filtered by the day column
 * @method Rate findOneByHourFrom(string $hour_from) Return the first Rate filtered by the hour_from column
 * @method Rate findOneByHourTo(string $hour_to) Return the first Rate filtered by the hour_to column
 * @method Rate findOneBySurcharge(int $surcharge) Return the first Rate filtered by the surcharge column
 * @method Rate findOneByPerPerson(boolean $per_person) Return the first Rate filtered by the per_person column
 * @method Rate findOneByNote(string $note) Return the first Rate filtered by the note column
 * @method Rate findOneByCreatedAt(string $created_at) Return the first Rate filtered by the created_at column
 * @method Rate findOneByUpdatedAt(string $updated_at) Return the first Rate filtered by the updated_at column
 * @method Rate findOneByVersion(int $version) Return the first Rate filtered by the version column
 * @method Rate findOneByVersionCreatedAt(string $version_created_at) Return the first Rate filtered by the version_created_at column
 * @method Rate findOneByVersionCreatedBy(string $version_created_by) Return the first Rate filtered by the version_created_by column
 *
 * @method array findById(int $id) Return Rate objects filtered by the id column
 * @method array findByName(string $name) Return Rate objects filtered by the name column
 * @method array findByDescription(string $description) Return Rate objects filtered by the description column
 * @method array findByDay(string $day) Return Rate objects filtered by the day column
 * @method array findByHourFrom(string $hour_from) Return Rate objects filtered by the hour_from column
 * @method array findByHourTo(string $hour_to) Return Rate objects filtered by the hour_to column
 * @method array findBySurcharge(int $surcharge) Return Rate objects filtered by the surcharge column
 * @method array findByPerPerson(boolean $per_person) Return Rate objects filtered by the per_person column
 * @method array findByNote(string $note) Return Rate objects filtered by the note column
 * @method array findByCreatedAt(string $created_at) Return Rate objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Rate objects filtered by the updated_at column
 * @method array findByVersion(int $version) Return Rate objects filtered by the version column
 * @method array findByVersionCreatedAt(string $version_created_at) Return Rate objects filtered by the version_created_at column
 * @method array findByVersionCreatedBy(string $version_created_by) Return Rate objects filtered by the version_created_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseRateQuery extends ModelCriteria
{
    // archivable behavior
    protected $archiveOnDelete = true;

    /**
     * Initializes internal state of BaseRateQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Rate', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new RateQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     RateQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return RateQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof RateQuery) {
            return $criteria;
        }
        $query = new RateQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Rate|Rate[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = RatePeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(RatePeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Rate A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `NAME`, `DESCRIPTION`, `DAY`, `HOUR_FROM`, `HOUR_TO`, `SURCHARGE`, `PER_PERSON`, `NOTE`, `CREATED_AT`, `UPDATED_AT`, `VERSION`, `VERSION_CREATED_AT`, `VERSION_CREATED_BY` FROM `rate` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Rate();
            $obj->hydrate($row);
            RatePeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Rate|Rate[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Rate[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(RatePeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(RatePeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(RatePeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the name column
     *
     * Example usage:
     * <code>
     * $query->filterByName('fooValue');   // WHERE name = 'fooValue'
     * $query->filterByName('%fooValue%'); // WHERE name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $name The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterByName($name = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($name)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $name)) {
                $name = str_replace('*', '%', $name);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RatePeer::NAME, $name, $comparison);
    }

    /**
     * Filter the query on the description column
     *
     * Example usage:
     * <code>
     * $query->filterByDescription('fooValue');   // WHERE description = 'fooValue'
     * $query->filterByDescription('%fooValue%'); // WHERE description LIKE '%fooValue%'
     * </code>
     *
     * @param     string $description The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterByDescription($description = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($description)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $description)) {
                $description = str_replace('*', '%', $description);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RatePeer::DESCRIPTION, $description, $comparison);
    }

    /**
     * Filter the query on the day column
     *
     * Example usage:
     * <code>
     * $query->filterByDay('fooValue');   // WHERE day = 'fooValue'
     * $query->filterByDay('%fooValue%'); // WHERE day LIKE '%fooValue%'
     * </code>
     *
     * @param     string $day The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterByDay($day = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($day)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $day)) {
                $day = str_replace('*', '%', $day);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RatePeer::DAY, $day, $comparison);
    }

    /**
     * Filter the query on the hour_from column
     *
     * Example usage:
     * <code>
     * $query->filterByHourFrom('2011-03-14'); // WHERE hour_from = '2011-03-14'
     * $query->filterByHourFrom('now'); // WHERE hour_from = '2011-03-14'
     * $query->filterByHourFrom(array('max' => 'yesterday')); // WHERE hour_from > '2011-03-13'
     * </code>
     *
     * @param     mixed $hourFrom The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterByHourFrom($hourFrom = null, $comparison = null)
    {
        if (is_array($hourFrom)) {
            $useMinMax = false;
            if (isset($hourFrom['min'])) {
                $this->addUsingAlias(RatePeer::HOUR_FROM, $hourFrom['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($hourFrom['max'])) {
                $this->addUsingAlias(RatePeer::HOUR_FROM, $hourFrom['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RatePeer::HOUR_FROM, $hourFrom, $comparison);
    }

    /**
     * Filter the query on the hour_to column
     *
     * Example usage:
     * <code>
     * $query->filterByHourTo('2011-03-14'); // WHERE hour_to = '2011-03-14'
     * $query->filterByHourTo('now'); // WHERE hour_to = '2011-03-14'
     * $query->filterByHourTo(array('max' => 'yesterday')); // WHERE hour_to > '2011-03-13'
     * </code>
     *
     * @param     mixed $hourTo The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterByHourTo($hourTo = null, $comparison = null)
    {
        if (is_array($hourTo)) {
            $useMinMax = false;
            if (isset($hourTo['min'])) {
                $this->addUsingAlias(RatePeer::HOUR_TO, $hourTo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($hourTo['max'])) {
                $this->addUsingAlias(RatePeer::HOUR_TO, $hourTo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RatePeer::HOUR_TO, $hourTo, $comparison);
    }

    /**
     * Filter the query on the surcharge column
     *
     * Example usage:
     * <code>
     * $query->filterBySurcharge(1234); // WHERE surcharge = 1234
     * $query->filterBySurcharge(array(12, 34)); // WHERE surcharge IN (12, 34)
     * $query->filterBySurcharge(array('min' => 12)); // WHERE surcharge > 12
     * </code>
     *
     * @param     mixed $surcharge The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterBySurcharge($surcharge = null, $comparison = null)
    {
        if (is_array($surcharge)) {
            $useMinMax = false;
            if (isset($surcharge['min'])) {
                $this->addUsingAlias(RatePeer::SURCHARGE, $surcharge['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($surcharge['max'])) {
                $this->addUsingAlias(RatePeer::SURCHARGE, $surcharge['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RatePeer::SURCHARGE, $surcharge, $comparison);
    }

    /**
     * Filter the query on the per_person column
     *
     * Example usage:
     * <code>
     * $query->filterByPerPerson(true); // WHERE per_person = true
     * $query->filterByPerPerson('yes'); // WHERE per_person = true
     * </code>
     *
     * @param     boolean|string $perPerson The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterByPerPerson($perPerson = null, $comparison = null)
    {
        if (is_string($perPerson)) {
            $per_person = in_array(strtolower($perPerson), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(RatePeer::PER_PERSON, $perPerson, $comparison);
    }

    /**
     * Filter the query on the note column
     *
     * Example usage:
     * <code>
     * $query->filterByNote('fooValue');   // WHERE note = 'fooValue'
     * $query->filterByNote('%fooValue%'); // WHERE note LIKE '%fooValue%'
     * </code>
     *
     * @param     string $note The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterByNote($note = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($note)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $note)) {
                $note = str_replace('*', '%', $note);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RatePeer::NOTE, $note, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(RatePeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(RatePeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RatePeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(RatePeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(RatePeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RatePeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the version column
     *
     * Example usage:
     * <code>
     * $query->filterByVersion(1234); // WHERE version = 1234
     * $query->filterByVersion(array(12, 34)); // WHERE version IN (12, 34)
     * $query->filterByVersion(array('min' => 12)); // WHERE version > 12
     * </code>
     *
     * @param     mixed $version The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterByVersion($version = null, $comparison = null)
    {
        if (is_array($version)) {
            $useMinMax = false;
            if (isset($version['min'])) {
                $this->addUsingAlias(RatePeer::VERSION, $version['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($version['max'])) {
                $this->addUsingAlias(RatePeer::VERSION, $version['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RatePeer::VERSION, $version, $comparison);
    }

    /**
     * Filter the query on the version_created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByVersionCreatedAt('2011-03-14'); // WHERE version_created_at = '2011-03-14'
     * $query->filterByVersionCreatedAt('now'); // WHERE version_created_at = '2011-03-14'
     * $query->filterByVersionCreatedAt(array('max' => 'yesterday')); // WHERE version_created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $versionCreatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterByVersionCreatedAt($versionCreatedAt = null, $comparison = null)
    {
        if (is_array($versionCreatedAt)) {
            $useMinMax = false;
            if (isset($versionCreatedAt['min'])) {
                $this->addUsingAlias(RatePeer::VERSION_CREATED_AT, $versionCreatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($versionCreatedAt['max'])) {
                $this->addUsingAlias(RatePeer::VERSION_CREATED_AT, $versionCreatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RatePeer::VERSION_CREATED_AT, $versionCreatedAt, $comparison);
    }

    /**
     * Filter the query on the version_created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByVersionCreatedBy('fooValue');   // WHERE version_created_by = 'fooValue'
     * $query->filterByVersionCreatedBy('%fooValue%'); // WHERE version_created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $versionCreatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function filterByVersionCreatedBy($versionCreatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($versionCreatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $versionCreatedBy)) {
                $versionCreatedBy = str_replace('*', '%', $versionCreatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RatePeer::VERSION_CREATED_BY, $versionCreatedBy, $comparison);
    }

    /**
     * Filter the query by a related CustomerRateTable object
     *
     * @param   CustomerRateTable|PropelObjectCollection $customerRateTable  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   RateQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByCustomerRateTable($customerRateTable, $comparison = null)
    {
        if ($customerRateTable instanceof CustomerRateTable) {
            return $this
                ->addUsingAlias(RatePeer::ID, $customerRateTable->getRateId(), $comparison);
        } elseif ($customerRateTable instanceof PropelObjectCollection) {
            return $this
                ->useCustomerRateTableQuery()
                ->filterByPrimaryKeys($customerRateTable->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByCustomerRateTable() only accepts arguments of type CustomerRateTable or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the CustomerRateTable relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function joinCustomerRateTable($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('CustomerRateTable');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'CustomerRateTable');
        }

        return $this;
    }

    /**
     * Use the CustomerRateTable relation CustomerRateTable object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   CustomerRateTableQuery A secondary query class using the current class as primary query
     */
    public function useCustomerRateTableQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinCustomerRateTable($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'CustomerRateTable', 'CustomerRateTableQuery');
    }

    /**
     * Filter the query by a related RateVersion object
     *
     * @param   RateVersion|PropelObjectCollection $rateVersion  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   RateQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByRateVersion($rateVersion, $comparison = null)
    {
        if ($rateVersion instanceof RateVersion) {
            return $this
                ->addUsingAlias(RatePeer::ID, $rateVersion->getId(), $comparison);
        } elseif ($rateVersion instanceof PropelObjectCollection) {
            return $this
                ->useRateVersionQuery()
                ->filterByPrimaryKeys($rateVersion->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByRateVersion() only accepts arguments of type RateVersion or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the RateVersion relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function joinRateVersion($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('RateVersion');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'RateVersion');
        }

        return $this;
    }

    /**
     * Use the RateVersion relation RateVersion object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   RateVersionQuery A secondary query class using the current class as primary query
     */
    public function useRateVersionQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinRateVersion($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'RateVersion', 'RateVersionQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Rate $rate Object to remove from the list of results
     *
     * @return RateQuery The current query, for fluid interface
     */
    public function prune($rate = null)
    {
        if ($rate) {
            $this->addUsingAlias(RatePeer::ID, $rate->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

    /**
     * Code to execute before every DELETE statement
     *
     * @param     PropelPDO $con The connection object used by the query
     */
    protected function basePreDelete(PropelPDO $con)
    {
        // archivable behavior

        if ($this->archiveOnDelete) {
            $this->archive($con);
        } else {
            $this->archiveOnDelete = true;
        }


        return $this->preDelete($con);
    }

    // Timestampable behavior

    /**
     * Filter by the latest updated
     *
     * @param      int $nbDays Maximum age of the latest update in days
     *
     * @return     RateQuery The current query, for fluid interface
     */
    public function recentlyUpdated($nbDays = 7)
    {
        return $this->addUsingAlias(RatePeer::UPDATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
    }

    /**
     * Order by update date desc
     *
     * @return     RateQuery The current query, for fluid interface
     */
    public function lastUpdatedFirst()
    {
        return $this->addDescendingOrderByColumn(RatePeer::UPDATED_AT);
    }

    /**
     * Order by update date asc
     *
     * @return     RateQuery The current query, for fluid interface
     */
    public function firstUpdatedFirst()
    {
        return $this->addAscendingOrderByColumn(RatePeer::UPDATED_AT);
    }

    /**
     * Filter by the latest created
     *
     * @param      int $nbDays Maximum age of in days
     *
     * @return     RateQuery The current query, for fluid interface
     */
    public function recentlyCreated($nbDays = 7)
    {
        return $this->addUsingAlias(RatePeer::CREATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
    }

    /**
     * Order by create date desc
     *
     * @return     RateQuery The current query, for fluid interface
     */
    public function lastCreatedFirst()
    {
        return $this->addDescendingOrderByColumn(RatePeer::CREATED_AT);
    }

    /**
     * Order by create date asc
     *
     * @return     RateQuery The current query, for fluid interface
     */
    public function firstCreatedFirst()
    {
        return $this->addAscendingOrderByColumn(RatePeer::CREATED_AT);
    }
    // archivable behavior

    /**
     * Copy the data of the objects satisfying the query into RateArchive archive objects.
     * The archived objects are then saved.
     * If any of the objects has already been archived, the archived object
     * is updated and not duplicated.
     * Warning: This termination methods issues 2n+1 queries.
     *
     * @param      PropelPDO $con	Connection to use.
     * @param      Boolean $useLittleMemory	Whether or not to use PropelOnDemandFormatter to retrieve objects.
     *               Set to false if the identity map matters.
     *               Set to true (default) to use less memory.
     *
     * @return     int the number of archived objects
     * @throws     PropelException
     */
    public function archive($con = null, $useLittleMemory = true)
    {
        $totalArchivedObjects = 0;
        $criteria = clone $this;
        // prepare the query
        $criteria->setWith(array());
        if ($useLittleMemory) {
            $criteria->setFormatter(ModelCriteria::FORMAT_ON_DEMAND);
        }
        if ($con === null) {
            $con = Propel::getConnection(RatePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }
        $con->beginTransaction();
        try {
            // archive all results one by one
            foreach ($criteria->find($con) as $object) {
                $object->archive($con);
                $totalArchivedObjects++;
            }
            $con->commit();
        } catch (PropelException $e) {
            $con->rollBack();
            throw $e;
        }

        return $totalArchivedObjects;
    }

    /**
     * Enable/disable auto-archiving on delete for the next query.
     *
     * @param boolean $archiveOnDelete True if the query must archive deleted objects, false otherwise.
     */
    public function setArchiveOnDelete($archiveOnDelete)
    {
        $this->archiveOnDelete = $archiveOnDelete;
    }

    /**
     * Delete records matching the current query without archiving them.
     *
     * @param      PropelPDO $con	Connection to use.
     *
     * @return integer the number of deleted rows
     */
    public function deleteWithoutArchive($con = null)
    {
        $this->archiveOnDelete = false;

        return $this->delete($con);
    }

    /**
     * Delete all records without archiving them.
     *
     * @param      PropelPDO $con	Connection to use.
     *
     * @return integer the number of deleted rows
     */
    public function deleteAllWithoutArchive($con = null)
    {
        $this->archiveOnDelete = false;

        return $this->deleteAll($con);
    }

}
