<?php


/**
 * Base class that represents a query for the 'booking_version' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Mon May 12 21:42:32 2014
 *
 * @method BookingVersionQuery orderById($order = Criteria::ASC) Order by the id column
 * @method BookingVersionQuery orderByBookingDate($order = Criteria::ASC) Order by the booking_date column
 * @method BookingVersionQuery orderByYear($order = Criteria::ASC) Order by the year column
 * @method BookingVersionQuery orderByNumber($order = Criteria::ASC) Order by the number column
 * @method BookingVersionQuery orderByAdult($order = Criteria::ASC) Order by the adult column
 * @method BookingVersionQuery orderByChild($order = Criteria::ASC) Order by the child column
 * @method BookingVersionQuery orderByContact($order = Criteria::ASC) Order by the contact column
 * @method BookingVersionQuery orderByRifFile($order = Criteria::ASC) Order by the rif_file column
 * @method BookingVersionQuery orderByCustomerId($order = Criteria::ASC) Order by the customer_id column
 * @method BookingVersionQuery orderByVehicleTypeId($order = Criteria::ASC) Order by the vehicle_type_id column
 * @method BookingVersionQuery orderByIsConfirmed($order = Criteria::ASC) Order by the is_confirmed column
 * @method BookingVersionQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method BookingVersionQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method BookingVersionQuery orderByVersion($order = Criteria::ASC) Order by the version column
 * @method BookingVersionQuery orderByVersionCreatedAt($order = Criteria::ASC) Order by the version_created_at column
 * @method BookingVersionQuery orderByVersionCreatedBy($order = Criteria::ASC) Order by the version_created_by column
 * @method BookingVersionQuery orderByArrivalIds($order = Criteria::ASC) Order by the arrival_ids column
 * @method BookingVersionQuery orderByArrivalVersions($order = Criteria::ASC) Order by the arrival_versions column
 * @method BookingVersionQuery orderByDepartureIds($order = Criteria::ASC) Order by the departure_ids column
 * @method BookingVersionQuery orderByDepartureVersions($order = Criteria::ASC) Order by the departure_versions column
 *
 * @method BookingVersionQuery groupById() Group by the id column
 * @method BookingVersionQuery groupByBookingDate() Group by the booking_date column
 * @method BookingVersionQuery groupByYear() Group by the year column
 * @method BookingVersionQuery groupByNumber() Group by the number column
 * @method BookingVersionQuery groupByAdult() Group by the adult column
 * @method BookingVersionQuery groupByChild() Group by the child column
 * @method BookingVersionQuery groupByContact() Group by the contact column
 * @method BookingVersionQuery groupByRifFile() Group by the rif_file column
 * @method BookingVersionQuery groupByCustomerId() Group by the customer_id column
 * @method BookingVersionQuery groupByVehicleTypeId() Group by the vehicle_type_id column
 * @method BookingVersionQuery groupByIsConfirmed() Group by the is_confirmed column
 * @method BookingVersionQuery groupByCreatedAt() Group by the created_at column
 * @method BookingVersionQuery groupByUpdatedAt() Group by the updated_at column
 * @method BookingVersionQuery groupByVersion() Group by the version column
 * @method BookingVersionQuery groupByVersionCreatedAt() Group by the version_created_at column
 * @method BookingVersionQuery groupByVersionCreatedBy() Group by the version_created_by column
 * @method BookingVersionQuery groupByArrivalIds() Group by the arrival_ids column
 * @method BookingVersionQuery groupByArrivalVersions() Group by the arrival_versions column
 * @method BookingVersionQuery groupByDepartureIds() Group by the departure_ids column
 * @method BookingVersionQuery groupByDepartureVersions() Group by the departure_versions column
 *
 * @method BookingVersionQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method BookingVersionQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method BookingVersionQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method BookingVersionQuery leftJoinBooking($relationAlias = null) Adds a LEFT JOIN clause to the query using the Booking relation
 * @method BookingVersionQuery rightJoinBooking($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Booking relation
 * @method BookingVersionQuery innerJoinBooking($relationAlias = null) Adds a INNER JOIN clause to the query using the Booking relation
 *
 * @method BookingVersion findOne(PropelPDO $con = null) Return the first BookingVersion matching the query
 * @method BookingVersion findOneOrCreate(PropelPDO $con = null) Return the first BookingVersion matching the query, or a new BookingVersion object populated from the query conditions when no match is found
 *
 * @method BookingVersion findOneById(int $id) Return the first BookingVersion filtered by the id column
 * @method BookingVersion findOneByBookingDate(string $booking_date) Return the first BookingVersion filtered by the booking_date column
 * @method BookingVersion findOneByYear(int $year) Return the first BookingVersion filtered by the year column
 * @method BookingVersion findOneByNumber(int $number) Return the first BookingVersion filtered by the number column
 * @method BookingVersion findOneByAdult(int $adult) Return the first BookingVersion filtered by the adult column
 * @method BookingVersion findOneByChild(int $child) Return the first BookingVersion filtered by the child column
 * @method BookingVersion findOneByContact(string $contact) Return the first BookingVersion filtered by the contact column
 * @method BookingVersion findOneByRifFile(string $rif_file) Return the first BookingVersion filtered by the rif_file column
 * @method BookingVersion findOneByCustomerId(int $customer_id) Return the first BookingVersion filtered by the customer_id column
 * @method BookingVersion findOneByVehicleTypeId(int $vehicle_type_id) Return the first BookingVersion filtered by the vehicle_type_id column
 * @method BookingVersion findOneByIsConfirmed(boolean $is_confirmed) Return the first BookingVersion filtered by the is_confirmed column
 * @method BookingVersion findOneByCreatedAt(string $created_at) Return the first BookingVersion filtered by the created_at column
 * @method BookingVersion findOneByUpdatedAt(string $updated_at) Return the first BookingVersion filtered by the updated_at column
 * @method BookingVersion findOneByVersion(int $version) Return the first BookingVersion filtered by the version column
 * @method BookingVersion findOneByVersionCreatedAt(string $version_created_at) Return the first BookingVersion filtered by the version_created_at column
 * @method BookingVersion findOneByVersionCreatedBy(string $version_created_by) Return the first BookingVersion filtered by the version_created_by column
 * @method BookingVersion findOneByArrivalIds(array $arrival_ids) Return the first BookingVersion filtered by the arrival_ids column
 * @method BookingVersion findOneByArrivalVersions(array $arrival_versions) Return the first BookingVersion filtered by the arrival_versions column
 * @method BookingVersion findOneByDepartureIds(array $departure_ids) Return the first BookingVersion filtered by the departure_ids column
 * @method BookingVersion findOneByDepartureVersions(array $departure_versions) Return the first BookingVersion filtered by the departure_versions column
 *
 * @method array findById(int $id) Return BookingVersion objects filtered by the id column
 * @method array findByBookingDate(string $booking_date) Return BookingVersion objects filtered by the booking_date column
 * @method array findByYear(int $year) Return BookingVersion objects filtered by the year column
 * @method array findByNumber(int $number) Return BookingVersion objects filtered by the number column
 * @method array findByAdult(int $adult) Return BookingVersion objects filtered by the adult column
 * @method array findByChild(int $child) Return BookingVersion objects filtered by the child column
 * @method array findByContact(string $contact) Return BookingVersion objects filtered by the contact column
 * @method array findByRifFile(string $rif_file) Return BookingVersion objects filtered by the rif_file column
 * @method array findByCustomerId(int $customer_id) Return BookingVersion objects filtered by the customer_id column
 * @method array findByVehicleTypeId(int $vehicle_type_id) Return BookingVersion objects filtered by the vehicle_type_id column
 * @method array findByIsConfirmed(boolean $is_confirmed) Return BookingVersion objects filtered by the is_confirmed column
 * @method array findByCreatedAt(string $created_at) Return BookingVersion objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return BookingVersion objects filtered by the updated_at column
 * @method array findByVersion(int $version) Return BookingVersion objects filtered by the version column
 * @method array findByVersionCreatedAt(string $version_created_at) Return BookingVersion objects filtered by the version_created_at column
 * @method array findByVersionCreatedBy(string $version_created_by) Return BookingVersion objects filtered by the version_created_by column
 * @method array findByArrivalIds(array $arrival_ids) Return BookingVersion objects filtered by the arrival_ids column
 * @method array findByArrivalVersions(array $arrival_versions) Return BookingVersion objects filtered by the arrival_versions column
 * @method array findByDepartureIds(array $departure_ids) Return BookingVersion objects filtered by the departure_ids column
 * @method array findByDepartureVersions(array $departure_versions) Return BookingVersion objects filtered by the departure_versions column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseBookingVersionQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseBookingVersionQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'BookingVersion', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new BookingVersionQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     BookingVersionQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return BookingVersionQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof BookingVersionQuery) {
            return $criteria;
        }
        $query = new BookingVersionQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj = $c->findPk(array(12, 34), $con);
     * </code>
     *
     * @param array $key Primary key to use for the query
                         A Primary key composition: [$id, $version]
     * @param     PropelPDO $con an optional connection object
     *
     * @return   BookingVersion|BookingVersion[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = BookingVersionPeer::getInstanceFromPool(serialize(array((string) $key[0], (string) $key[1]))))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(BookingVersionPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   BookingVersion A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `BOOKING_DATE`, `YEAR`, `NUMBER`, `ADULT`, `CHILD`, `CONTACT`, `RIF_FILE`, `CUSTOMER_ID`, `VEHICLE_TYPE_ID`, `IS_CONFIRMED`, `CREATED_AT`, `UPDATED_AT`, `VERSION`, `VERSION_CREATED_AT`, `VERSION_CREATED_BY`, `ARRIVAL_IDS`, `ARRIVAL_VERSIONS`, `DEPARTURE_IDS`, `DEPARTURE_VERSIONS` FROM `booking_version` WHERE `ID` = :p0 AND `VERSION` = :p1';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key[0], PDO::PARAM_INT);
            $stmt->bindValue(':p1', $key[1], PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new BookingVersion();
            $obj->hydrate($row);
            BookingVersionPeer::addInstanceToPool($obj, serialize(array((string) $key[0], (string) $key[1])));
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return BookingVersion|BookingVersion[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(array(12, 56), array(832, 123), array(123, 456)), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|BookingVersion[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {
        $this->addUsingAlias(BookingVersionPeer::ID, $key[0], Criteria::EQUAL);
        $this->addUsingAlias(BookingVersionPeer::VERSION, $key[1], Criteria::EQUAL);

        return $this;
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {
        if (empty($keys)) {
            return $this->add(null, '1<>1', Criteria::CUSTOM);
        }
        foreach ($keys as $key) {
            $cton0 = $this->getNewCriterion(BookingVersionPeer::ID, $key[0], Criteria::EQUAL);
            $cton1 = $this->getNewCriterion(BookingVersionPeer::VERSION, $key[1], Criteria::EQUAL);
            $cton0->addAnd($cton1);
            $this->addOr($cton0);
        }

        return $this;
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @see       filterByBooking()
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(BookingVersionPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the booking_date column
     *
     * Example usage:
     * <code>
     * $query->filterByBookingDate('2011-03-14'); // WHERE booking_date = '2011-03-14'
     * $query->filterByBookingDate('now'); // WHERE booking_date = '2011-03-14'
     * $query->filterByBookingDate(array('max' => 'yesterday')); // WHERE booking_date > '2011-03-13'
     * </code>
     *
     * @param     mixed $bookingDate The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByBookingDate($bookingDate = null, $comparison = null)
    {
        if (is_array($bookingDate)) {
            $useMinMax = false;
            if (isset($bookingDate['min'])) {
                $this->addUsingAlias(BookingVersionPeer::BOOKING_DATE, $bookingDate['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($bookingDate['max'])) {
                $this->addUsingAlias(BookingVersionPeer::BOOKING_DATE, $bookingDate['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingVersionPeer::BOOKING_DATE, $bookingDate, $comparison);
    }

    /**
     * Filter the query on the year column
     *
     * Example usage:
     * <code>
     * $query->filterByYear(1234); // WHERE year = 1234
     * $query->filterByYear(array(12, 34)); // WHERE year IN (12, 34)
     * $query->filterByYear(array('min' => 12)); // WHERE year > 12
     * </code>
     *
     * @param     mixed $year The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByYear($year = null, $comparison = null)
    {
        if (is_array($year)) {
            $useMinMax = false;
            if (isset($year['min'])) {
                $this->addUsingAlias(BookingVersionPeer::YEAR, $year['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($year['max'])) {
                $this->addUsingAlias(BookingVersionPeer::YEAR, $year['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingVersionPeer::YEAR, $year, $comparison);
    }

    /**
     * Filter the query on the number column
     *
     * Example usage:
     * <code>
     * $query->filterByNumber(1234); // WHERE number = 1234
     * $query->filterByNumber(array(12, 34)); // WHERE number IN (12, 34)
     * $query->filterByNumber(array('min' => 12)); // WHERE number > 12
     * </code>
     *
     * @param     mixed $number The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByNumber($number = null, $comparison = null)
    {
        if (is_array($number)) {
            $useMinMax = false;
            if (isset($number['min'])) {
                $this->addUsingAlias(BookingVersionPeer::NUMBER, $number['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($number['max'])) {
                $this->addUsingAlias(BookingVersionPeer::NUMBER, $number['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingVersionPeer::NUMBER, $number, $comparison);
    }

    /**
     * Filter the query on the adult column
     *
     * Example usage:
     * <code>
     * $query->filterByAdult(1234); // WHERE adult = 1234
     * $query->filterByAdult(array(12, 34)); // WHERE adult IN (12, 34)
     * $query->filterByAdult(array('min' => 12)); // WHERE adult > 12
     * </code>
     *
     * @param     mixed $adult The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByAdult($adult = null, $comparison = null)
    {
        if (is_array($adult)) {
            $useMinMax = false;
            if (isset($adult['min'])) {
                $this->addUsingAlias(BookingVersionPeer::ADULT, $adult['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($adult['max'])) {
                $this->addUsingAlias(BookingVersionPeer::ADULT, $adult['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingVersionPeer::ADULT, $adult, $comparison);
    }

    /**
     * Filter the query on the child column
     *
     * Example usage:
     * <code>
     * $query->filterByChild(1234); // WHERE child = 1234
     * $query->filterByChild(array(12, 34)); // WHERE child IN (12, 34)
     * $query->filterByChild(array('min' => 12)); // WHERE child > 12
     * </code>
     *
     * @param     mixed $child The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByChild($child = null, $comparison = null)
    {
        if (is_array($child)) {
            $useMinMax = false;
            if (isset($child['min'])) {
                $this->addUsingAlias(BookingVersionPeer::CHILD, $child['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($child['max'])) {
                $this->addUsingAlias(BookingVersionPeer::CHILD, $child['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingVersionPeer::CHILD, $child, $comparison);
    }

    /**
     * Filter the query on the contact column
     *
     * Example usage:
     * <code>
     * $query->filterByContact('fooValue');   // WHERE contact = 'fooValue'
     * $query->filterByContact('%fooValue%'); // WHERE contact LIKE '%fooValue%'
     * </code>
     *
     * @param     string $contact The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByContact($contact = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($contact)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $contact)) {
                $contact = str_replace('*', '%', $contact);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(BookingVersionPeer::CONTACT, $contact, $comparison);
    }

    /**
     * Filter the query on the rif_file column
     *
     * Example usage:
     * <code>
     * $query->filterByRifFile('fooValue');   // WHERE rif_file = 'fooValue'
     * $query->filterByRifFile('%fooValue%'); // WHERE rif_file LIKE '%fooValue%'
     * </code>
     *
     * @param     string $rifFile The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByRifFile($rifFile = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($rifFile)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $rifFile)) {
                $rifFile = str_replace('*', '%', $rifFile);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(BookingVersionPeer::RIF_FILE, $rifFile, $comparison);
    }

    /**
     * Filter the query on the customer_id column
     *
     * Example usage:
     * <code>
     * $query->filterByCustomerId(1234); // WHERE customer_id = 1234
     * $query->filterByCustomerId(array(12, 34)); // WHERE customer_id IN (12, 34)
     * $query->filterByCustomerId(array('min' => 12)); // WHERE customer_id > 12
     * </code>
     *
     * @param     mixed $customerId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByCustomerId($customerId = null, $comparison = null)
    {
        if (is_array($customerId)) {
            $useMinMax = false;
            if (isset($customerId['min'])) {
                $this->addUsingAlias(BookingVersionPeer::CUSTOMER_ID, $customerId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($customerId['max'])) {
                $this->addUsingAlias(BookingVersionPeer::CUSTOMER_ID, $customerId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingVersionPeer::CUSTOMER_ID, $customerId, $comparison);
    }

    /**
     * Filter the query on the vehicle_type_id column
     *
     * Example usage:
     * <code>
     * $query->filterByVehicleTypeId(1234); // WHERE vehicle_type_id = 1234
     * $query->filterByVehicleTypeId(array(12, 34)); // WHERE vehicle_type_id IN (12, 34)
     * $query->filterByVehicleTypeId(array('min' => 12)); // WHERE vehicle_type_id > 12
     * </code>
     *
     * @param     mixed $vehicleTypeId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByVehicleTypeId($vehicleTypeId = null, $comparison = null)
    {
        if (is_array($vehicleTypeId)) {
            $useMinMax = false;
            if (isset($vehicleTypeId['min'])) {
                $this->addUsingAlias(BookingVersionPeer::VEHICLE_TYPE_ID, $vehicleTypeId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($vehicleTypeId['max'])) {
                $this->addUsingAlias(BookingVersionPeer::VEHICLE_TYPE_ID, $vehicleTypeId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingVersionPeer::VEHICLE_TYPE_ID, $vehicleTypeId, $comparison);
    }

    /**
     * Filter the query on the is_confirmed column
     *
     * Example usage:
     * <code>
     * $query->filterByIsConfirmed(true); // WHERE is_confirmed = true
     * $query->filterByIsConfirmed('yes'); // WHERE is_confirmed = true
     * </code>
     *
     * @param     boolean|string $isConfirmed The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByIsConfirmed($isConfirmed = null, $comparison = null)
    {
        if (is_string($isConfirmed)) {
            $is_confirmed = in_array(strtolower($isConfirmed), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(BookingVersionPeer::IS_CONFIRMED, $isConfirmed, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(BookingVersionPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(BookingVersionPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingVersionPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(BookingVersionPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(BookingVersionPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingVersionPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the version column
     *
     * Example usage:
     * <code>
     * $query->filterByVersion(1234); // WHERE version = 1234
     * $query->filterByVersion(array(12, 34)); // WHERE version IN (12, 34)
     * $query->filterByVersion(array('min' => 12)); // WHERE version > 12
     * </code>
     *
     * @param     mixed $version The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByVersion($version = null, $comparison = null)
    {
        if (is_array($version) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(BookingVersionPeer::VERSION, $version, $comparison);
    }

    /**
     * Filter the query on the version_created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByVersionCreatedAt('2011-03-14'); // WHERE version_created_at = '2011-03-14'
     * $query->filterByVersionCreatedAt('now'); // WHERE version_created_at = '2011-03-14'
     * $query->filterByVersionCreatedAt(array('max' => 'yesterday')); // WHERE version_created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $versionCreatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByVersionCreatedAt($versionCreatedAt = null, $comparison = null)
    {
        if (is_array($versionCreatedAt)) {
            $useMinMax = false;
            if (isset($versionCreatedAt['min'])) {
                $this->addUsingAlias(BookingVersionPeer::VERSION_CREATED_AT, $versionCreatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($versionCreatedAt['max'])) {
                $this->addUsingAlias(BookingVersionPeer::VERSION_CREATED_AT, $versionCreatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingVersionPeer::VERSION_CREATED_AT, $versionCreatedAt, $comparison);
    }

    /**
     * Filter the query on the version_created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByVersionCreatedBy('fooValue');   // WHERE version_created_by = 'fooValue'
     * $query->filterByVersionCreatedBy('%fooValue%'); // WHERE version_created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $versionCreatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByVersionCreatedBy($versionCreatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($versionCreatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $versionCreatedBy)) {
                $versionCreatedBy = str_replace('*', '%', $versionCreatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(BookingVersionPeer::VERSION_CREATED_BY, $versionCreatedBy, $comparison);
    }

    /**
     * Filter the query on the arrival_ids column
     *
     * @param     array $arrivalIds The values to use as filter.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByArrivalIds($arrivalIds = null, $comparison = null)
    {
        $key = $this->getAliasedColName(BookingVersionPeer::ARRIVAL_IDS);
        if (null === $comparison || $comparison == Criteria::CONTAINS_ALL) {
            foreach ($arrivalIds as $value) {
                $value = '%| ' . $value . ' |%';
                if ($this->containsKey($key)) {
                    $this->addAnd($key, $value, Criteria::LIKE);
                } else {
                    $this->add($key, $value, Criteria::LIKE);
                }
            }

            return $this;
        } elseif ($comparison == Criteria::CONTAINS_SOME) {
            foreach ($arrivalIds as $value) {
                $value = '%| ' . $value . ' |%';
                if ($this->containsKey($key)) {
                    $this->addOr($key, $value, Criteria::LIKE);
                } else {
                    $this->add($key, $value, Criteria::LIKE);
                }
            }

            return $this;
        } elseif ($comparison == Criteria::CONTAINS_NONE) {
            foreach ($arrivalIds as $value) {
                $value = '%| ' . $value . ' |%';
                if ($this->containsKey($key)) {
                    $this->addAnd($key, $value, Criteria::NOT_LIKE);
                } else {
                    $this->add($key, $value, Criteria::NOT_LIKE);
                }
            }
            $this->addOr($key, null, Criteria::ISNULL);

            return $this;
        }

        return $this->addUsingAlias(BookingVersionPeer::ARRIVAL_IDS, $arrivalIds, $comparison);
    }

    /**
     * Filter the query on the arrival_ids column
     * @param     mixed $arrivalIds The value to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::CONTAINS_ALL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByArrivalId($arrivalIds = null, $comparison = null)
    {
        if (null === $comparison || $comparison == Criteria::CONTAINS_ALL) {
            if (is_scalar($arrivalIds)) {
                $arrivalIds = '%| ' . $arrivalIds . ' |%';
                $comparison = Criteria::LIKE;
            }
        } elseif ($comparison == Criteria::CONTAINS_NONE) {
            $arrivalIds = '%| ' . $arrivalIds . ' |%';
            $comparison = Criteria::NOT_LIKE;
            $key = $this->getAliasedColName(BookingVersionPeer::ARRIVAL_IDS);
            if ($this->containsKey($key)) {
                $this->addAnd($key, $arrivalIds, $comparison);
            } else {
                $this->addAnd($key, $arrivalIds, $comparison);
            }
            $this->addOr($key, null, Criteria::ISNULL);

            return $this;
        }

        return $this->addUsingAlias(BookingVersionPeer::ARRIVAL_IDS, $arrivalIds, $comparison);
    }

    /**
     * Filter the query on the arrival_versions column
     *
     * @param     array $arrivalVersions The values to use as filter.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByArrivalVersions($arrivalVersions = null, $comparison = null)
    {
        $key = $this->getAliasedColName(BookingVersionPeer::ARRIVAL_VERSIONS);
        if (null === $comparison || $comparison == Criteria::CONTAINS_ALL) {
            foreach ($arrivalVersions as $value) {
                $value = '%| ' . $value . ' |%';
                if ($this->containsKey($key)) {
                    $this->addAnd($key, $value, Criteria::LIKE);
                } else {
                    $this->add($key, $value, Criteria::LIKE);
                }
            }

            return $this;
        } elseif ($comparison == Criteria::CONTAINS_SOME) {
            foreach ($arrivalVersions as $value) {
                $value = '%| ' . $value . ' |%';
                if ($this->containsKey($key)) {
                    $this->addOr($key, $value, Criteria::LIKE);
                } else {
                    $this->add($key, $value, Criteria::LIKE);
                }
            }

            return $this;
        } elseif ($comparison == Criteria::CONTAINS_NONE) {
            foreach ($arrivalVersions as $value) {
                $value = '%| ' . $value . ' |%';
                if ($this->containsKey($key)) {
                    $this->addAnd($key, $value, Criteria::NOT_LIKE);
                } else {
                    $this->add($key, $value, Criteria::NOT_LIKE);
                }
            }
            $this->addOr($key, null, Criteria::ISNULL);

            return $this;
        }

        return $this->addUsingAlias(BookingVersionPeer::ARRIVAL_VERSIONS, $arrivalVersions, $comparison);
    }

    /**
     * Filter the query on the arrival_versions column
     * @param     mixed $arrivalVersions The value to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::CONTAINS_ALL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByArrivalVersion($arrivalVersions = null, $comparison = null)
    {
        if (null === $comparison || $comparison == Criteria::CONTAINS_ALL) {
            if (is_scalar($arrivalVersions)) {
                $arrivalVersions = '%| ' . $arrivalVersions . ' |%';
                $comparison = Criteria::LIKE;
            }
        } elseif ($comparison == Criteria::CONTAINS_NONE) {
            $arrivalVersions = '%| ' . $arrivalVersions . ' |%';
            $comparison = Criteria::NOT_LIKE;
            $key = $this->getAliasedColName(BookingVersionPeer::ARRIVAL_VERSIONS);
            if ($this->containsKey($key)) {
                $this->addAnd($key, $arrivalVersions, $comparison);
            } else {
                $this->addAnd($key, $arrivalVersions, $comparison);
            }
            $this->addOr($key, null, Criteria::ISNULL);

            return $this;
        }

        return $this->addUsingAlias(BookingVersionPeer::ARRIVAL_VERSIONS, $arrivalVersions, $comparison);
    }

    /**
     * Filter the query on the departure_ids column
     *
     * @param     array $departureIds The values to use as filter.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByDepartureIds($departureIds = null, $comparison = null)
    {
        $key = $this->getAliasedColName(BookingVersionPeer::DEPARTURE_IDS);
        if (null === $comparison || $comparison == Criteria::CONTAINS_ALL) {
            foreach ($departureIds as $value) {
                $value = '%| ' . $value . ' |%';
                if ($this->containsKey($key)) {
                    $this->addAnd($key, $value, Criteria::LIKE);
                } else {
                    $this->add($key, $value, Criteria::LIKE);
                }
            }

            return $this;
        } elseif ($comparison == Criteria::CONTAINS_SOME) {
            foreach ($departureIds as $value) {
                $value = '%| ' . $value . ' |%';
                if ($this->containsKey($key)) {
                    $this->addOr($key, $value, Criteria::LIKE);
                } else {
                    $this->add($key, $value, Criteria::LIKE);
                }
            }

            return $this;
        } elseif ($comparison == Criteria::CONTAINS_NONE) {
            foreach ($departureIds as $value) {
                $value = '%| ' . $value . ' |%';
                if ($this->containsKey($key)) {
                    $this->addAnd($key, $value, Criteria::NOT_LIKE);
                } else {
                    $this->add($key, $value, Criteria::NOT_LIKE);
                }
            }
            $this->addOr($key, null, Criteria::ISNULL);

            return $this;
        }

        return $this->addUsingAlias(BookingVersionPeer::DEPARTURE_IDS, $departureIds, $comparison);
    }

    /**
     * Filter the query on the departure_ids column
     * @param     mixed $departureIds The value to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::CONTAINS_ALL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByDepartureId($departureIds = null, $comparison = null)
    {
        if (null === $comparison || $comparison == Criteria::CONTAINS_ALL) {
            if (is_scalar($departureIds)) {
                $departureIds = '%| ' . $departureIds . ' |%';
                $comparison = Criteria::LIKE;
            }
        } elseif ($comparison == Criteria::CONTAINS_NONE) {
            $departureIds = '%| ' . $departureIds . ' |%';
            $comparison = Criteria::NOT_LIKE;
            $key = $this->getAliasedColName(BookingVersionPeer::DEPARTURE_IDS);
            if ($this->containsKey($key)) {
                $this->addAnd($key, $departureIds, $comparison);
            } else {
                $this->addAnd($key, $departureIds, $comparison);
            }
            $this->addOr($key, null, Criteria::ISNULL);

            return $this;
        }

        return $this->addUsingAlias(BookingVersionPeer::DEPARTURE_IDS, $departureIds, $comparison);
    }

    /**
     * Filter the query on the departure_versions column
     *
     * @param     array $departureVersions The values to use as filter.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByDepartureVersions($departureVersions = null, $comparison = null)
    {
        $key = $this->getAliasedColName(BookingVersionPeer::DEPARTURE_VERSIONS);
        if (null === $comparison || $comparison == Criteria::CONTAINS_ALL) {
            foreach ($departureVersions as $value) {
                $value = '%| ' . $value . ' |%';
                if ($this->containsKey($key)) {
                    $this->addAnd($key, $value, Criteria::LIKE);
                } else {
                    $this->add($key, $value, Criteria::LIKE);
                }
            }

            return $this;
        } elseif ($comparison == Criteria::CONTAINS_SOME) {
            foreach ($departureVersions as $value) {
                $value = '%| ' . $value . ' |%';
                if ($this->containsKey($key)) {
                    $this->addOr($key, $value, Criteria::LIKE);
                } else {
                    $this->add($key, $value, Criteria::LIKE);
                }
            }

            return $this;
        } elseif ($comparison == Criteria::CONTAINS_NONE) {
            foreach ($departureVersions as $value) {
                $value = '%| ' . $value . ' |%';
                if ($this->containsKey($key)) {
                    $this->addAnd($key, $value, Criteria::NOT_LIKE);
                } else {
                    $this->add($key, $value, Criteria::NOT_LIKE);
                }
            }
            $this->addOr($key, null, Criteria::ISNULL);

            return $this;
        }

        return $this->addUsingAlias(BookingVersionPeer::DEPARTURE_VERSIONS, $departureVersions, $comparison);
    }

    /**
     * Filter the query on the departure_versions column
     * @param     mixed $departureVersions The value to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::CONTAINS_ALL
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function filterByDepartureVersion($departureVersions = null, $comparison = null)
    {
        if (null === $comparison || $comparison == Criteria::CONTAINS_ALL) {
            if (is_scalar($departureVersions)) {
                $departureVersions = '%| ' . $departureVersions . ' |%';
                $comparison = Criteria::LIKE;
            }
        } elseif ($comparison == Criteria::CONTAINS_NONE) {
            $departureVersions = '%| ' . $departureVersions . ' |%';
            $comparison = Criteria::NOT_LIKE;
            $key = $this->getAliasedColName(BookingVersionPeer::DEPARTURE_VERSIONS);
            if ($this->containsKey($key)) {
                $this->addAnd($key, $departureVersions, $comparison);
            } else {
                $this->addAnd($key, $departureVersions, $comparison);
            }
            $this->addOr($key, null, Criteria::ISNULL);

            return $this;
        }

        return $this->addUsingAlias(BookingVersionPeer::DEPARTURE_VERSIONS, $departureVersions, $comparison);
    }

    /**
     * Filter the query by a related Booking object
     *
     * @param   Booking|PropelObjectCollection $booking The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   BookingVersionQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByBooking($booking, $comparison = null)
    {
        if ($booking instanceof Booking) {
            return $this
                ->addUsingAlias(BookingVersionPeer::ID, $booking->getId(), $comparison);
        } elseif ($booking instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(BookingVersionPeer::ID, $booking->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByBooking() only accepts arguments of type Booking or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Booking relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function joinBooking($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Booking');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Booking');
        }

        return $this;
    }

    /**
     * Use the Booking relation Booking object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   BookingQuery A secondary query class using the current class as primary query
     */
    public function useBookingQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinBooking($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Booking', 'BookingQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   BookingVersion $bookingVersion Object to remove from the list of results
     *
     * @return BookingVersionQuery The current query, for fluid interface
     */
    public function prune($bookingVersion = null)
    {
        if ($bookingVersion) {
            $this->addCond('pruneCond0', $this->getAliasedColName(BookingVersionPeer::ID), $bookingVersion->getId(), Criteria::NOT_EQUAL);
            $this->addCond('pruneCond1', $this->getAliasedColName(BookingVersionPeer::VERSION), $bookingVersion->getVersion(), Criteria::NOT_EQUAL);
            $this->combine(array('pruneCond0', 'pruneCond1'), Criteria::LOGICAL_OR);
        }

        return $this;
    }

}
