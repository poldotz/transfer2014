<?php


/**
 * Base class that represents a query for the 'booking' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Wed Nov 19 15:30:21 2014
 *
 * @method BookingQuery orderById($order = Criteria::ASC) Order by the id column
 * @method BookingQuery orderByBookingDate($order = Criteria::ASC) Order by the booking_date column
 * @method BookingQuery orderByYear($order = Criteria::ASC) Order by the year column
 * @method BookingQuery orderByNumber($order = Criteria::ASC) Order by the number column
 * @method BookingQuery orderByAdult($order = Criteria::ASC) Order by the adult column
 * @method BookingQuery orderByReduced($order = Criteria::ASC) Order by the reduced column
 * @method BookingQuery orderByChild($order = Criteria::ASC) Order by the child column
 * @method BookingQuery orderByContact($order = Criteria::ASC) Order by the contact column
 * @method BookingQuery orderByRifFile($order = Criteria::ASC) Order by the rif_file column
 * @method BookingQuery orderByCustomerId($order = Criteria::ASC) Order by the customer_id column
 * @method BookingQuery orderByVehicleTypeId($order = Criteria::ASC) Order by the vehicle_type_id column
 * @method BookingQuery orderByIsConfirmed($order = Criteria::ASC) Order by the is_confirmed column
 * @method BookingQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method BookingQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method BookingQuery orderByVersion($order = Criteria::ASC) Order by the version column
 * @method BookingQuery orderByVersionCreatedAt($order = Criteria::ASC) Order by the version_created_at column
 * @method BookingQuery orderByVersionCreatedBy($order = Criteria::ASC) Order by the version_created_by column
 *
 * @method BookingQuery groupById() Group by the id column
 * @method BookingQuery groupByBookingDate() Group by the booking_date column
 * @method BookingQuery groupByYear() Group by the year column
 * @method BookingQuery groupByNumber() Group by the number column
 * @method BookingQuery groupByAdult() Group by the adult column
 * @method BookingQuery groupByReduced() Group by the reduced column
 * @method BookingQuery groupByChild() Group by the child column
 * @method BookingQuery groupByContact() Group by the contact column
 * @method BookingQuery groupByRifFile() Group by the rif_file column
 * @method BookingQuery groupByCustomerId() Group by the customer_id column
 * @method BookingQuery groupByVehicleTypeId() Group by the vehicle_type_id column
 * @method BookingQuery groupByIsConfirmed() Group by the is_confirmed column
 * @method BookingQuery groupByCreatedAt() Group by the created_at column
 * @method BookingQuery groupByUpdatedAt() Group by the updated_at column
 * @method BookingQuery groupByVersion() Group by the version column
 * @method BookingQuery groupByVersionCreatedAt() Group by the version_created_at column
 * @method BookingQuery groupByVersionCreatedBy() Group by the version_created_by column
 *
 * @method BookingQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method BookingQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method BookingQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method BookingQuery leftJoinCustomer($relationAlias = null) Adds a LEFT JOIN clause to the query using the Customer relation
 * @method BookingQuery rightJoinCustomer($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Customer relation
 * @method BookingQuery innerJoinCustomer($relationAlias = null) Adds a INNER JOIN clause to the query using the Customer relation
 *
 * @method BookingQuery leftJoinVehicleType($relationAlias = null) Adds a LEFT JOIN clause to the query using the VehicleType relation
 * @method BookingQuery rightJoinVehicleType($relationAlias = null) Adds a RIGHT JOIN clause to the query using the VehicleType relation
 * @method BookingQuery innerJoinVehicleType($relationAlias = null) Adds a INNER JOIN clause to the query using the VehicleType relation
 *
 * @method BookingQuery leftJoinArrival($relationAlias = null) Adds a LEFT JOIN clause to the query using the Arrival relation
 * @method BookingQuery rightJoinArrival($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Arrival relation
 * @method BookingQuery innerJoinArrival($relationAlias = null) Adds a INNER JOIN clause to the query using the Arrival relation
 *
 * @method BookingQuery leftJoinDeparture($relationAlias = null) Adds a LEFT JOIN clause to the query using the Departure relation
 * @method BookingQuery rightJoinDeparture($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Departure relation
 * @method BookingQuery innerJoinDeparture($relationAlias = null) Adds a INNER JOIN clause to the query using the Departure relation
 *
 * @method BookingQuery leftJoinBookingVersion($relationAlias = null) Adds a LEFT JOIN clause to the query using the BookingVersion relation
 * @method BookingQuery rightJoinBookingVersion($relationAlias = null) Adds a RIGHT JOIN clause to the query using the BookingVersion relation
 * @method BookingQuery innerJoinBookingVersion($relationAlias = null) Adds a INNER JOIN clause to the query using the BookingVersion relation
 *
 * @method Booking findOne(PropelPDO $con = null) Return the first Booking matching the query
 * @method Booking findOneOrCreate(PropelPDO $con = null) Return the first Booking matching the query, or a new Booking object populated from the query conditions when no match is found
 *
 * @method Booking findOneById(int $id) Return the first Booking filtered by the id column
 * @method Booking findOneByBookingDate(string $booking_date) Return the first Booking filtered by the booking_date column
 * @method Booking findOneByYear(int $year) Return the first Booking filtered by the year column
 * @method Booking findOneByNumber(int $number) Return the first Booking filtered by the number column
 * @method Booking findOneByAdult(int $adult) Return the first Booking filtered by the adult column
 * @method Booking findOneByReduced(int $reduced) Return the first Booking filtered by the reduced column
 * @method Booking findOneByChild(int $child) Return the first Booking filtered by the child column
 * @method Booking findOneByContact(string $contact) Return the first Booking filtered by the contact column
 * @method Booking findOneByRifFile(string $rif_file) Return the first Booking filtered by the rif_file column
 * @method Booking findOneByCustomerId(int $customer_id) Return the first Booking filtered by the customer_id column
 * @method Booking findOneByVehicleTypeId(int $vehicle_type_id) Return the first Booking filtered by the vehicle_type_id column
 * @method Booking findOneByIsConfirmed(boolean $is_confirmed) Return the first Booking filtered by the is_confirmed column
 * @method Booking findOneByCreatedAt(string $created_at) Return the first Booking filtered by the created_at column
 * @method Booking findOneByUpdatedAt(string $updated_at) Return the first Booking filtered by the updated_at column
 * @method Booking findOneByVersion(int $version) Return the first Booking filtered by the version column
 * @method Booking findOneByVersionCreatedAt(string $version_created_at) Return the first Booking filtered by the version_created_at column
 * @method Booking findOneByVersionCreatedBy(string $version_created_by) Return the first Booking filtered by the version_created_by column
 *
 * @method array findById(int $id) Return Booking objects filtered by the id column
 * @method array findByBookingDate(string $booking_date) Return Booking objects filtered by the booking_date column
 * @method array findByYear(int $year) Return Booking objects filtered by the year column
 * @method array findByNumber(int $number) Return Booking objects filtered by the number column
 * @method array findByAdult(int $adult) Return Booking objects filtered by the adult column
 * @method array findByReduced(int $reduced) Return Booking objects filtered by the reduced column
 * @method array findByChild(int $child) Return Booking objects filtered by the child column
 * @method array findByContact(string $contact) Return Booking objects filtered by the contact column
 * @method array findByRifFile(string $rif_file) Return Booking objects filtered by the rif_file column
 * @method array findByCustomerId(int $customer_id) Return Booking objects filtered by the customer_id column
 * @method array findByVehicleTypeId(int $vehicle_type_id) Return Booking objects filtered by the vehicle_type_id column
 * @method array findByIsConfirmed(boolean $is_confirmed) Return Booking objects filtered by the is_confirmed column
 * @method array findByCreatedAt(string $created_at) Return Booking objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Booking objects filtered by the updated_at column
 * @method array findByVersion(int $version) Return Booking objects filtered by the version column
 * @method array findByVersionCreatedAt(string $version_created_at) Return Booking objects filtered by the version_created_at column
 * @method array findByVersionCreatedBy(string $version_created_by) Return Booking objects filtered by the version_created_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseBookingQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseBookingQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Booking', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new BookingQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     BookingQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return BookingQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof BookingQuery) {
            return $criteria;
        }
        $query = new BookingQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Booking|Booking[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = BookingPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(BookingPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Booking A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `BOOKING_DATE`, `YEAR`, `NUMBER`, `ADULT`, `REDUCED`, `CHILD`, `CONTACT`, `RIF_FILE`, `CUSTOMER_ID`, `VEHICLE_TYPE_ID`, `IS_CONFIRMED`, `CREATED_AT`, `UPDATED_AT`, `VERSION`, `VERSION_CREATED_AT`, `VERSION_CREATED_BY` FROM `booking` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Booking();
            $obj->hydrate($row);
            BookingPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Booking|Booking[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Booking[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(BookingPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(BookingPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(BookingPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the booking_date column
     *
     * Example usage:
     * <code>
     * $query->filterByBookingDate('2011-03-14'); // WHERE booking_date = '2011-03-14'
     * $query->filterByBookingDate('now'); // WHERE booking_date = '2011-03-14'
     * $query->filterByBookingDate(array('max' => 'yesterday')); // WHERE booking_date > '2011-03-13'
     * </code>
     *
     * @param     mixed $bookingDate The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByBookingDate($bookingDate = null, $comparison = null)
    {
        if (is_array($bookingDate)) {
            $useMinMax = false;
            if (isset($bookingDate['min'])) {
                $this->addUsingAlias(BookingPeer::BOOKING_DATE, $bookingDate['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($bookingDate['max'])) {
                $this->addUsingAlias(BookingPeer::BOOKING_DATE, $bookingDate['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingPeer::BOOKING_DATE, $bookingDate, $comparison);
    }

    /**
     * Filter the query on the year column
     *
     * Example usage:
     * <code>
     * $query->filterByYear(1234); // WHERE year = 1234
     * $query->filterByYear(array(12, 34)); // WHERE year IN (12, 34)
     * $query->filterByYear(array('min' => 12)); // WHERE year > 12
     * </code>
     *
     * @param     mixed $year The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByYear($year = null, $comparison = null)
    {
        if (is_array($year)) {
            $useMinMax = false;
            if (isset($year['min'])) {
                $this->addUsingAlias(BookingPeer::YEAR, $year['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($year['max'])) {
                $this->addUsingAlias(BookingPeer::YEAR, $year['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingPeer::YEAR, $year, $comparison);
    }

    /**
     * Filter the query on the number column
     *
     * Example usage:
     * <code>
     * $query->filterByNumber(1234); // WHERE number = 1234
     * $query->filterByNumber(array(12, 34)); // WHERE number IN (12, 34)
     * $query->filterByNumber(array('min' => 12)); // WHERE number > 12
     * </code>
     *
     * @param     mixed $number The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByNumber($number = null, $comparison = null)
    {
        if (is_array($number)) {
            $useMinMax = false;
            if (isset($number['min'])) {
                $this->addUsingAlias(BookingPeer::NUMBER, $number['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($number['max'])) {
                $this->addUsingAlias(BookingPeer::NUMBER, $number['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingPeer::NUMBER, $number, $comparison);
    }

    /**
     * Filter the query on the adult column
     *
     * Example usage:
     * <code>
     * $query->filterByAdult(1234); // WHERE adult = 1234
     * $query->filterByAdult(array(12, 34)); // WHERE adult IN (12, 34)
     * $query->filterByAdult(array('min' => 12)); // WHERE adult > 12
     * </code>
     *
     * @param     mixed $adult The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByAdult($adult = null, $comparison = null)
    {
        if (is_array($adult)) {
            $useMinMax = false;
            if (isset($adult['min'])) {
                $this->addUsingAlias(BookingPeer::ADULT, $adult['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($adult['max'])) {
                $this->addUsingAlias(BookingPeer::ADULT, $adult['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingPeer::ADULT, $adult, $comparison);
    }

    /**
     * Filter the query on the reduced column
     *
     * Example usage:
     * <code>
     * $query->filterByReduced(1234); // WHERE reduced = 1234
     * $query->filterByReduced(array(12, 34)); // WHERE reduced IN (12, 34)
     * $query->filterByReduced(array('min' => 12)); // WHERE reduced > 12
     * </code>
     *
     * @param     mixed $reduced The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByReduced($reduced = null, $comparison = null)
    {
        if (is_array($reduced)) {
            $useMinMax = false;
            if (isset($reduced['min'])) {
                $this->addUsingAlias(BookingPeer::REDUCED, $reduced['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($reduced['max'])) {
                $this->addUsingAlias(BookingPeer::REDUCED, $reduced['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingPeer::REDUCED, $reduced, $comparison);
    }

    /**
     * Filter the query on the child column
     *
     * Example usage:
     * <code>
     * $query->filterByChild(1234); // WHERE child = 1234
     * $query->filterByChild(array(12, 34)); // WHERE child IN (12, 34)
     * $query->filterByChild(array('min' => 12)); // WHERE child > 12
     * </code>
     *
     * @param     mixed $child The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByChild($child = null, $comparison = null)
    {
        if (is_array($child)) {
            $useMinMax = false;
            if (isset($child['min'])) {
                $this->addUsingAlias(BookingPeer::CHILD, $child['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($child['max'])) {
                $this->addUsingAlias(BookingPeer::CHILD, $child['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingPeer::CHILD, $child, $comparison);
    }

    /**
     * Filter the query on the contact column
     *
     * Example usage:
     * <code>
     * $query->filterByContact('fooValue');   // WHERE contact = 'fooValue'
     * $query->filterByContact('%fooValue%'); // WHERE contact LIKE '%fooValue%'
     * </code>
     *
     * @param     string $contact The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByContact($contact = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($contact)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $contact)) {
                $contact = str_replace('*', '%', $contact);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(BookingPeer::CONTACT, $contact, $comparison);
    }

    /**
     * Filter the query on the rif_file column
     *
     * Example usage:
     * <code>
     * $query->filterByRifFile('fooValue');   // WHERE rif_file = 'fooValue'
     * $query->filterByRifFile('%fooValue%'); // WHERE rif_file LIKE '%fooValue%'
     * </code>
     *
     * @param     string $rifFile The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByRifFile($rifFile = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($rifFile)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $rifFile)) {
                $rifFile = str_replace('*', '%', $rifFile);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(BookingPeer::RIF_FILE, $rifFile, $comparison);
    }

    /**
     * Filter the query on the customer_id column
     *
     * Example usage:
     * <code>
     * $query->filterByCustomerId(1234); // WHERE customer_id = 1234
     * $query->filterByCustomerId(array(12, 34)); // WHERE customer_id IN (12, 34)
     * $query->filterByCustomerId(array('min' => 12)); // WHERE customer_id > 12
     * </code>
     *
     * @see       filterByCustomer()
     *
     * @param     mixed $customerId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByCustomerId($customerId = null, $comparison = null)
    {
        if (is_array($customerId)) {
            $useMinMax = false;
            if (isset($customerId['min'])) {
                $this->addUsingAlias(BookingPeer::CUSTOMER_ID, $customerId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($customerId['max'])) {
                $this->addUsingAlias(BookingPeer::CUSTOMER_ID, $customerId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingPeer::CUSTOMER_ID, $customerId, $comparison);
    }

    /**
     * Filter the query on the vehicle_type_id column
     *
     * Example usage:
     * <code>
     * $query->filterByVehicleTypeId(1234); // WHERE vehicle_type_id = 1234
     * $query->filterByVehicleTypeId(array(12, 34)); // WHERE vehicle_type_id IN (12, 34)
     * $query->filterByVehicleTypeId(array('min' => 12)); // WHERE vehicle_type_id > 12
     * </code>
     *
     * @see       filterByVehicleType()
     *
     * @param     mixed $vehicleTypeId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByVehicleTypeId($vehicleTypeId = null, $comparison = null)
    {
        if (is_array($vehicleTypeId)) {
            $useMinMax = false;
            if (isset($vehicleTypeId['min'])) {
                $this->addUsingAlias(BookingPeer::VEHICLE_TYPE_ID, $vehicleTypeId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($vehicleTypeId['max'])) {
                $this->addUsingAlias(BookingPeer::VEHICLE_TYPE_ID, $vehicleTypeId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingPeer::VEHICLE_TYPE_ID, $vehicleTypeId, $comparison);
    }

    /**
     * Filter the query on the is_confirmed column
     *
     * Example usage:
     * <code>
     * $query->filterByIsConfirmed(true); // WHERE is_confirmed = true
     * $query->filterByIsConfirmed('yes'); // WHERE is_confirmed = true
     * </code>
     *
     * @param     boolean|string $isConfirmed The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByIsConfirmed($isConfirmed = null, $comparison = null)
    {
        if (is_string($isConfirmed)) {
            $is_confirmed = in_array(strtolower($isConfirmed), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(BookingPeer::IS_CONFIRMED, $isConfirmed, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(BookingPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(BookingPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(BookingPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(BookingPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the version column
     *
     * Example usage:
     * <code>
     * $query->filterByVersion(1234); // WHERE version = 1234
     * $query->filterByVersion(array(12, 34)); // WHERE version IN (12, 34)
     * $query->filterByVersion(array('min' => 12)); // WHERE version > 12
     * </code>
     *
     * @param     mixed $version The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByVersion($version = null, $comparison = null)
    {
        if (is_array($version)) {
            $useMinMax = false;
            if (isset($version['min'])) {
                $this->addUsingAlias(BookingPeer::VERSION, $version['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($version['max'])) {
                $this->addUsingAlias(BookingPeer::VERSION, $version['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingPeer::VERSION, $version, $comparison);
    }

    /**
     * Filter the query on the version_created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByVersionCreatedAt('2011-03-14'); // WHERE version_created_at = '2011-03-14'
     * $query->filterByVersionCreatedAt('now'); // WHERE version_created_at = '2011-03-14'
     * $query->filterByVersionCreatedAt(array('max' => 'yesterday')); // WHERE version_created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $versionCreatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByVersionCreatedAt($versionCreatedAt = null, $comparison = null)
    {
        if (is_array($versionCreatedAt)) {
            $useMinMax = false;
            if (isset($versionCreatedAt['min'])) {
                $this->addUsingAlias(BookingPeer::VERSION_CREATED_AT, $versionCreatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($versionCreatedAt['max'])) {
                $this->addUsingAlias(BookingPeer::VERSION_CREATED_AT, $versionCreatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BookingPeer::VERSION_CREATED_AT, $versionCreatedAt, $comparison);
    }

    /**
     * Filter the query on the version_created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByVersionCreatedBy('fooValue');   // WHERE version_created_by = 'fooValue'
     * $query->filterByVersionCreatedBy('%fooValue%'); // WHERE version_created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $versionCreatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function filterByVersionCreatedBy($versionCreatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($versionCreatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $versionCreatedBy)) {
                $versionCreatedBy = str_replace('*', '%', $versionCreatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(BookingPeer::VERSION_CREATED_BY, $versionCreatedBy, $comparison);
    }

    /**
     * Filter the query by a related Customer object
     *
     * @param   Customer|PropelObjectCollection $customer The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   BookingQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByCustomer($customer, $comparison = null)
    {
        if ($customer instanceof Customer) {
            return $this
                ->addUsingAlias(BookingPeer::CUSTOMER_ID, $customer->getId(), $comparison);
        } elseif ($customer instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(BookingPeer::CUSTOMER_ID, $customer->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByCustomer() only accepts arguments of type Customer or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Customer relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function joinCustomer($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Customer');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Customer');
        }

        return $this;
    }

    /**
     * Use the Customer relation Customer object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   CustomerQuery A secondary query class using the current class as primary query
     */
    public function useCustomerQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinCustomer($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Customer', 'CustomerQuery');
    }

    /**
     * Filter the query by a related VehicleType object
     *
     * @param   VehicleType|PropelObjectCollection $vehicleType The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   BookingQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByVehicleType($vehicleType, $comparison = null)
    {
        if ($vehicleType instanceof VehicleType) {
            return $this
                ->addUsingAlias(BookingPeer::VEHICLE_TYPE_ID, $vehicleType->getId(), $comparison);
        } elseif ($vehicleType instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(BookingPeer::VEHICLE_TYPE_ID, $vehicleType->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByVehicleType() only accepts arguments of type VehicleType or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the VehicleType relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function joinVehicleType($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('VehicleType');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'VehicleType');
        }

        return $this;
    }

    /**
     * Use the VehicleType relation VehicleType object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   VehicleTypeQuery A secondary query class using the current class as primary query
     */
    public function useVehicleTypeQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinVehicleType($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'VehicleType', 'VehicleTypeQuery');
    }

    /**
     * Filter the query by a related Arrival object
     *
     * @param   Arrival|PropelObjectCollection $arrival  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   BookingQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByArrival($arrival, $comparison = null)
    {
        if ($arrival instanceof Arrival) {
            return $this
                ->addUsingAlias(BookingPeer::ID, $arrival->getBookingId(), $comparison);
        } elseif ($arrival instanceof PropelObjectCollection) {
            return $this
                ->useArrivalQuery()
                ->filterByPrimaryKeys($arrival->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByArrival() only accepts arguments of type Arrival or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Arrival relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function joinArrival($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Arrival');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Arrival');
        }

        return $this;
    }

    /**
     * Use the Arrival relation Arrival object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   ArrivalQuery A secondary query class using the current class as primary query
     */
    public function useArrivalQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinArrival($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Arrival', 'ArrivalQuery');
    }

    /**
     * Filter the query by a related Departure object
     *
     * @param   Departure|PropelObjectCollection $departure  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   BookingQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByDeparture($departure, $comparison = null)
    {
        if ($departure instanceof Departure) {
            return $this
                ->addUsingAlias(BookingPeer::ID, $departure->getBookingId(), $comparison);
        } elseif ($departure instanceof PropelObjectCollection) {
            return $this
                ->useDepartureQuery()
                ->filterByPrimaryKeys($departure->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByDeparture() only accepts arguments of type Departure or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Departure relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function joinDeparture($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Departure');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Departure');
        }

        return $this;
    }

    /**
     * Use the Departure relation Departure object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   DepartureQuery A secondary query class using the current class as primary query
     */
    public function useDepartureQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinDeparture($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Departure', 'DepartureQuery');
    }

    /**
     * Filter the query by a related BookingVersion object
     *
     * @param   BookingVersion|PropelObjectCollection $bookingVersion  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   BookingQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByBookingVersion($bookingVersion, $comparison = null)
    {
        if ($bookingVersion instanceof BookingVersion) {
            return $this
                ->addUsingAlias(BookingPeer::ID, $bookingVersion->getId(), $comparison);
        } elseif ($bookingVersion instanceof PropelObjectCollection) {
            return $this
                ->useBookingVersionQuery()
                ->filterByPrimaryKeys($bookingVersion->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByBookingVersion() only accepts arguments of type BookingVersion or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the BookingVersion relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function joinBookingVersion($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('BookingVersion');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'BookingVersion');
        }

        return $this;
    }

    /**
     * Use the BookingVersion relation BookingVersion object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   BookingVersionQuery A secondary query class using the current class as primary query
     */
    public function useBookingVersionQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinBookingVersion($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'BookingVersion', 'BookingVersionQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Booking $booking Object to remove from the list of results
     *
     * @return BookingQuery The current query, for fluid interface
     */
    public function prune($booking = null)
    {
        if ($booking) {
            $this->addUsingAlias(BookingPeer::ID, $booking->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

    // Timestampable behavior

    /**
     * Filter by the latest updated
     *
     * @param      int $nbDays Maximum age of the latest update in days
     *
     * @return     BookingQuery The current query, for fluid interface
     */
    public function recentlyUpdated($nbDays = 7)
    {
        return $this->addUsingAlias(BookingPeer::UPDATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
    }

    /**
     * Order by update date desc
     *
     * @return     BookingQuery The current query, for fluid interface
     */
    public function lastUpdatedFirst()
    {
        return $this->addDescendingOrderByColumn(BookingPeer::UPDATED_AT);
    }

    /**
     * Order by update date asc
     *
     * @return     BookingQuery The current query, for fluid interface
     */
    public function firstUpdatedFirst()
    {
        return $this->addAscendingOrderByColumn(BookingPeer::UPDATED_AT);
    }

    /**
     * Filter by the latest created
     *
     * @param      int $nbDays Maximum age of in days
     *
     * @return     BookingQuery The current query, for fluid interface
     */
    public function recentlyCreated($nbDays = 7)
    {
        return $this->addUsingAlias(BookingPeer::CREATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
    }

    /**
     * Order by create date desc
     *
     * @return     BookingQuery The current query, for fluid interface
     */
    public function lastCreatedFirst()
    {
        return $this->addDescendingOrderByColumn(BookingPeer::CREATED_AT);
    }

    /**
     * Order by create date asc
     *
     * @return     BookingQuery The current query, for fluid interface
     */
    public function firstCreatedFirst()
    {
        return $this->addAscendingOrderByColumn(BookingPeer::CREATED_AT);
    }
}
