<?php


/**
 * Base class that represents a row from the 'booking_version' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue 13 May 2014 12:39:45 PM CEST
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseBookingVersion extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'BookingVersionPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        BookingVersionPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the booking_date field.
     * @var        string
     */
    protected $booking_date;

    /**
     * The value for the year field.
     * @var        int
     */
    protected $year;

    /**
     * The value for the number field.
     * @var        int
     */
    protected $number;

    /**
     * The value for the adult field.
     * @var        int
     */
    protected $adult;

    /**
     * The value for the child field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $child;

    /**
     * The value for the contact field.
     * @var        string
     */
    protected $contact;

    /**
     * The value for the rif_file field.
     * @var        string
     */
    protected $rif_file;

    /**
     * The value for the customer_id field.
     * @var        int
     */
    protected $customer_id;

    /**
     * The value for the vehicle_type_id field.
     * @var        int
     */
    protected $vehicle_type_id;

    /**
     * The value for the is_confirmed field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $is_confirmed;

    /**
     * The value for the created_at field.
     * @var        string
     */
    protected $created_at;

    /**
     * The value for the updated_at field.
     * @var        string
     */
    protected $updated_at;

    /**
     * The value for the version field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $version;

    /**
     * The value for the version_created_at field.
     * @var        string
     */
    protected $version_created_at;

    /**
     * The value for the version_created_by field.
     * @var        string
     */
    protected $version_created_by;

    /**
     * The value for the arrival_ids field.
     * @var        array
     */
    protected $arrival_ids;

    /**
     * The unserialized $arrival_ids value - i.e. the persisted object.
     * This is necessary to avoid repeated calls to unserialize() at runtime.
     * @var        object
     */
    protected $arrival_ids_unserialized;

    /**
     * The value for the arrival_versions field.
     * @var        array
     */
    protected $arrival_versions;

    /**
     * The unserialized $arrival_versions value - i.e. the persisted object.
     * This is necessary to avoid repeated calls to unserialize() at runtime.
     * @var        object
     */
    protected $arrival_versions_unserialized;

    /**
     * The value for the departure_ids field.
     * @var        array
     */
    protected $departure_ids;

    /**
     * The unserialized $departure_ids value - i.e. the persisted object.
     * This is necessary to avoid repeated calls to unserialize() at runtime.
     * @var        object
     */
    protected $departure_ids_unserialized;

    /**
     * The value for the departure_versions field.
     * @var        array
     */
    protected $departure_versions;

    /**
     * The unserialized $departure_versions value - i.e. the persisted object.
     * This is necessary to avoid repeated calls to unserialize() at runtime.
     * @var        object
     */
    protected $departure_versions_unserialized;

    /**
     * @var        Booking
     */
    protected $aBooking;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->child = 0;
        $this->is_confirmed = false;
        $this->version = 0;
    }

    /**
     * Initializes internal state of BaseBookingVersion object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [optionally formatted] temporal [booking_date] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getBookingDate($format = 'Y-m-d H:i:s')
    {
        if ($this->booking_date === null) {
            return null;
        }

        if ($this->booking_date === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->booking_date);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->booking_date, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [year] column value.
     *
     * @return int
     */
    public function getYear()
    {
        return $this->year;
    }

    /**
     * Get the [number] column value.
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->number;
    }

    /**
     * Get the [adult] column value.
     *
     * @return int
     */
    public function getAdult()
    {
        return $this->adult;
    }

    /**
     * Get the [child] column value.
     *
     * @return int
     */
    public function getChild()
    {
        return $this->child;
    }

    /**
     * Get the [contact] column value.
     *
     * @return string
     */
    public function getContact()
    {
        return $this->contact;
    }

    /**
     * Get the [rif_file] column value.
     *
     * @return string
     */
    public function getRifFile()
    {
        return $this->rif_file;
    }

    /**
     * Get the [customer_id] column value.
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->customer_id;
    }

    /**
     * Get the [vehicle_type_id] column value.
     *
     * @return int
     */
    public function getVehicleTypeId()
    {
        return $this->vehicle_type_id;
    }

    /**
     * Get the [is_confirmed] column value.
     *
     * @return boolean
     */
    public function getIsConfirmed()
    {
        return $this->is_confirmed;
    }

    /**
     * Get the [optionally formatted] temporal [created_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getCreatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->created_at === null) {
            return null;
        }

        if ($this->created_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->created_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [updated_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getUpdatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->updated_at === null) {
            return null;
        }

        if ($this->updated_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->updated_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [version] column value.
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Get the [optionally formatted] temporal [version_created_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getVersionCreatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->version_created_at === null) {
            return null;
        }

        if ($this->version_created_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->version_created_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->version_created_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [version_created_by] column value.
     *
     * @return string
     */
    public function getVersionCreatedBy()
    {
        return $this->version_created_by;
    }

    /**
     * Get the [arrival_ids] column value.
     *
     * @return array
     */
    public function getArrivalIds()
    {
        if (null === $this->arrival_ids_unserialized) {
            $this->arrival_ids_unserialized = array();
        }
        if (!$this->arrival_ids_unserialized && null !== $this->arrival_ids) {
            $arrival_ids_unserialized = substr($this->arrival_ids, 2, -2);
            $this->arrival_ids_unserialized = $arrival_ids_unserialized ? explode(' | ', $arrival_ids_unserialized) : array();
        }

        return $this->arrival_ids_unserialized;
    }

    /**
     * Test the presence of a value in the [arrival_ids] array column value.
     * @param mixed $value
     *
     * @return boolean
     */
    public function hasArrivalId($value)
    {
        return in_array($value, $this->getArrivalIds());
    } // hasArrivalId()

    /**
     * Get the [arrival_versions] column value.
     *
     * @return array
     */
    public function getArrivalVersions()
    {
        if (null === $this->arrival_versions_unserialized) {
            $this->arrival_versions_unserialized = array();
        }
        if (!$this->arrival_versions_unserialized && null !== $this->arrival_versions) {
            $arrival_versions_unserialized = substr($this->arrival_versions, 2, -2);
            $this->arrival_versions_unserialized = $arrival_versions_unserialized ? explode(' | ', $arrival_versions_unserialized) : array();
        }

        return $this->arrival_versions_unserialized;
    }

    /**
     * Test the presence of a value in the [arrival_versions] array column value.
     * @param mixed $value
     *
     * @return boolean
     */
    public function hasArrivalVersion($value)
    {
        return in_array($value, $this->getArrivalVersions());
    } // hasArrivalVersion()

    /**
     * Get the [departure_ids] column value.
     *
     * @return array
     */
    public function getDepartureIds()
    {
        if (null === $this->departure_ids_unserialized) {
            $this->departure_ids_unserialized = array();
        }
        if (!$this->departure_ids_unserialized && null !== $this->departure_ids) {
            $departure_ids_unserialized = substr($this->departure_ids, 2, -2);
            $this->departure_ids_unserialized = $departure_ids_unserialized ? explode(' | ', $departure_ids_unserialized) : array();
        }

        return $this->departure_ids_unserialized;
    }

    /**
     * Test the presence of a value in the [departure_ids] array column value.
     * @param mixed $value
     *
     * @return boolean
     */
    public function hasDepartureId($value)
    {
        return in_array($value, $this->getDepartureIds());
    } // hasDepartureId()

    /**
     * Get the [departure_versions] column value.
     *
     * @return array
     */
    public function getDepartureVersions()
    {
        if (null === $this->departure_versions_unserialized) {
            $this->departure_versions_unserialized = array();
        }
        if (!$this->departure_versions_unserialized && null !== $this->departure_versions) {
            $departure_versions_unserialized = substr($this->departure_versions, 2, -2);
            $this->departure_versions_unserialized = $departure_versions_unserialized ? explode(' | ', $departure_versions_unserialized) : array();
        }

        return $this->departure_versions_unserialized;
    }

    /**
     * Test the presence of a value in the [departure_versions] array column value.
     * @param mixed $value
     *
     * @return boolean
     */
    public function hasDepartureVersion($value)
    {
        return in_array($value, $this->getDepartureVersions());
    } // hasDepartureVersion()

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = BookingVersionPeer::ID;
        }

        if ($this->aBooking !== null && $this->aBooking->getId() !== $v) {
            $this->aBooking = null;
        }


        return $this;
    } // setId()

    /**
     * Sets the value of [booking_date] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setBookingDate($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->booking_date !== null || $dt !== null) {
            $currentDateAsString = ($this->booking_date !== null && $tmpDt = new DateTime($this->booking_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->booking_date = $newDateAsString;
                $this->modifiedColumns[] = BookingVersionPeer::BOOKING_DATE;
            }
        } // if either are not null


        return $this;
    } // setBookingDate()

    /**
     * Set the value of [year] column.
     *
     * @param int $v new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setYear($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->year !== $v) {
            $this->year = $v;
            $this->modifiedColumns[] = BookingVersionPeer::YEAR;
        }


        return $this;
    } // setYear()

    /**
     * Set the value of [number] column.
     *
     * @param int $v new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setNumber($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->number !== $v) {
            $this->number = $v;
            $this->modifiedColumns[] = BookingVersionPeer::NUMBER;
        }


        return $this;
    } // setNumber()

    /**
     * Set the value of [adult] column.
     *
     * @param int $v new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setAdult($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->adult !== $v) {
            $this->adult = $v;
            $this->modifiedColumns[] = BookingVersionPeer::ADULT;
        }


        return $this;
    } // setAdult()

    /**
     * Set the value of [child] column.
     *
     * @param int $v new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setChild($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->child !== $v) {
            $this->child = $v;
            $this->modifiedColumns[] = BookingVersionPeer::CHILD;
        }


        return $this;
    } // setChild()

    /**
     * Set the value of [contact] column.
     *
     * @param string $v new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setContact($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->contact !== $v) {
            $this->contact = $v;
            $this->modifiedColumns[] = BookingVersionPeer::CONTACT;
        }


        return $this;
    } // setContact()

    /**
     * Set the value of [rif_file] column.
     *
     * @param string $v new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setRifFile($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->rif_file !== $v) {
            $this->rif_file = $v;
            $this->modifiedColumns[] = BookingVersionPeer::RIF_FILE;
        }


        return $this;
    } // setRifFile()

    /**
     * Set the value of [customer_id] column.
     *
     * @param int $v new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setCustomerId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->customer_id !== $v) {
            $this->customer_id = $v;
            $this->modifiedColumns[] = BookingVersionPeer::CUSTOMER_ID;
        }


        return $this;
    } // setCustomerId()

    /**
     * Set the value of [vehicle_type_id] column.
     *
     * @param int $v new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setVehicleTypeId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->vehicle_type_id !== $v) {
            $this->vehicle_type_id = $v;
            $this->modifiedColumns[] = BookingVersionPeer::VEHICLE_TYPE_ID;
        }


        return $this;
    } // setVehicleTypeId()

    /**
     * Sets the value of the [is_confirmed] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setIsConfirmed($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->is_confirmed !== $v) {
            $this->is_confirmed = $v;
            $this->modifiedColumns[] = BookingVersionPeer::IS_CONFIRMED;
        }


        return $this;
    } // setIsConfirmed()

    /**
     * Sets the value of [created_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setCreatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->created_at !== null || $dt !== null) {
            $currentDateAsString = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->created_at = $newDateAsString;
                $this->modifiedColumns[] = BookingVersionPeer::CREATED_AT;
            }
        } // if either are not null


        return $this;
    } // setCreatedAt()

    /**
     * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setUpdatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->updated_at !== null || $dt !== null) {
            $currentDateAsString = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->updated_at = $newDateAsString;
                $this->modifiedColumns[] = BookingVersionPeer::UPDATED_AT;
            }
        } // if either are not null


        return $this;
    } // setUpdatedAt()

    /**
     * Set the value of [version] column.
     *
     * @param int $v new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setVersion($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->version !== $v) {
            $this->version = $v;
            $this->modifiedColumns[] = BookingVersionPeer::VERSION;
        }


        return $this;
    } // setVersion()

    /**
     * Sets the value of [version_created_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setVersionCreatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->version_created_at !== null || $dt !== null) {
            $currentDateAsString = ($this->version_created_at !== null && $tmpDt = new DateTime($this->version_created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->version_created_at = $newDateAsString;
                $this->modifiedColumns[] = BookingVersionPeer::VERSION_CREATED_AT;
            }
        } // if either are not null


        return $this;
    } // setVersionCreatedAt()

    /**
     * Set the value of [version_created_by] column.
     *
     * @param string $v new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setVersionCreatedBy($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->version_created_by !== $v) {
            $this->version_created_by = $v;
            $this->modifiedColumns[] = BookingVersionPeer::VERSION_CREATED_BY;
        }


        return $this;
    } // setVersionCreatedBy()

    /**
     * Set the value of [arrival_ids] column.
     *
     * @param array $v new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setArrivalIds($v)
    {
        if ($this->arrival_ids_unserialized !== $v) {
            $this->arrival_ids_unserialized = $v;
            $this->arrival_ids = '| ' . implode(' | ', $v) . ' |';
            $this->modifiedColumns[] = BookingVersionPeer::ARRIVAL_IDS;
        }


        return $this;
    } // setArrivalIds()

    /**
     * Adds a value to the [arrival_ids] array column value.
     * @param mixed $value
     *
     * @return BookingVersion The current object (for fluent API support)
     */
    public function addArrivalId($value)
    {
        $currentArray = $this->getArrivalIds();
        $currentArray []= $value;
        $this->setArrivalIds($currentArray);

        return $this;
    } // addArrivalId()

    /**
     * Removes a value from the [arrival_ids] array column value.
     * @param mixed $value
     *
     * @return BookingVersion The current object (for fluent API support)
     */
    public function removeArrivalId($value)
    {
        $targetArray = array();
        foreach ($this->getArrivalIds() as $element) {
            if ($element != $value) {
                $targetArray []= $element;
            }
        }
        $this->setArrivalIds($targetArray);

        return $this;
    } // removeArrivalId()

    /**
     * Set the value of [arrival_versions] column.
     *
     * @param array $v new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setArrivalVersions($v)
    {
        if ($this->arrival_versions_unserialized !== $v) {
            $this->arrival_versions_unserialized = $v;
            $this->arrival_versions = '| ' . implode(' | ', $v) . ' |';
            $this->modifiedColumns[] = BookingVersionPeer::ARRIVAL_VERSIONS;
        }


        return $this;
    } // setArrivalVersions()

    /**
     * Adds a value to the [arrival_versions] array column value.
     * @param mixed $value
     *
     * @return BookingVersion The current object (for fluent API support)
     */
    public function addArrivalVersion($value)
    {
        $currentArray = $this->getArrivalVersions();
        $currentArray []= $value;
        $this->setArrivalVersions($currentArray);

        return $this;
    } // addArrivalVersion()

    /**
     * Removes a value from the [arrival_versions] array column value.
     * @param mixed $value
     *
     * @return BookingVersion The current object (for fluent API support)
     */
    public function removeArrivalVersion($value)
    {
        $targetArray = array();
        foreach ($this->getArrivalVersions() as $element) {
            if ($element != $value) {
                $targetArray []= $element;
            }
        }
        $this->setArrivalVersions($targetArray);

        return $this;
    } // removeArrivalVersion()

    /**
     * Set the value of [departure_ids] column.
     *
     * @param array $v new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setDepartureIds($v)
    {
        if ($this->departure_ids_unserialized !== $v) {
            $this->departure_ids_unserialized = $v;
            $this->departure_ids = '| ' . implode(' | ', $v) . ' |';
            $this->modifiedColumns[] = BookingVersionPeer::DEPARTURE_IDS;
        }


        return $this;
    } // setDepartureIds()

    /**
     * Adds a value to the [departure_ids] array column value.
     * @param mixed $value
     *
     * @return BookingVersion The current object (for fluent API support)
     */
    public function addDepartureId($value)
    {
        $currentArray = $this->getDepartureIds();
        $currentArray []= $value;
        $this->setDepartureIds($currentArray);

        return $this;
    } // addDepartureId()

    /**
     * Removes a value from the [departure_ids] array column value.
     * @param mixed $value
     *
     * @return BookingVersion The current object (for fluent API support)
     */
    public function removeDepartureId($value)
    {
        $targetArray = array();
        foreach ($this->getDepartureIds() as $element) {
            if ($element != $value) {
                $targetArray []= $element;
            }
        }
        $this->setDepartureIds($targetArray);

        return $this;
    } // removeDepartureId()

    /**
     * Set the value of [departure_versions] column.
     *
     * @param array $v new value
     * @return BookingVersion The current object (for fluent API support)
     */
    public function setDepartureVersions($v)
    {
        if ($this->departure_versions_unserialized !== $v) {
            $this->departure_versions_unserialized = $v;
            $this->departure_versions = '| ' . implode(' | ', $v) . ' |';
            $this->modifiedColumns[] = BookingVersionPeer::DEPARTURE_VERSIONS;
        }


        return $this;
    } // setDepartureVersions()

    /**
     * Adds a value to the [departure_versions] array column value.
     * @param mixed $value
     *
     * @return BookingVersion The current object (for fluent API support)
     */
    public function addDepartureVersion($value)
    {
        $currentArray = $this->getDepartureVersions();
        $currentArray []= $value;
        $this->setDepartureVersions($currentArray);

        return $this;
    } // addDepartureVersion()

    /**
     * Removes a value from the [departure_versions] array column value.
     * @param mixed $value
     *
     * @return BookingVersion The current object (for fluent API support)
     */
    public function removeDepartureVersion($value)
    {
        $targetArray = array();
        foreach ($this->getDepartureVersions() as $element) {
            if ($element != $value) {
                $targetArray []= $element;
            }
        }
        $this->setDepartureVersions($targetArray);

        return $this;
    } // removeDepartureVersion()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->child !== 0) {
                return false;
            }

            if ($this->is_confirmed !== false) {
                return false;
            }

            if ($this->version !== 0) {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->booking_date = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
            $this->year = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
            $this->number = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
            $this->adult = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
            $this->child = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
            $this->contact = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
            $this->rif_file = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
            $this->customer_id = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
            $this->vehicle_type_id = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
            $this->is_confirmed = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
            $this->created_at = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
            $this->updated_at = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
            $this->version = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
            $this->version_created_at = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
            $this->version_created_by = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
            $this->arrival_ids = $row[$startcol + 16];
            $this->arrival_ids_unserialized = null;
            $this->arrival_versions = $row[$startcol + 17];
            $this->arrival_versions_unserialized = null;
            $this->departure_ids = $row[$startcol + 18];
            $this->departure_ids_unserialized = null;
            $this->departure_versions = $row[$startcol + 19];
            $this->departure_versions_unserialized = null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 20; // 20 = BookingVersionPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating BookingVersion object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

        if ($this->aBooking !== null && $this->id !== $this->aBooking->getId()) {
            $this->aBooking = null;
        }
    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(BookingVersionPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = BookingVersionPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->aBooking = null;
        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(BookingVersionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = BookingVersionQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseBookingVersion:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseBookingVersion:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(BookingVersionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseBookingVersion:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            // symfony_timestampable behavior
            if ($this->isModified() && !$this->isColumnModified(BookingVersionPeer::UPDATED_AT))
            {
                $this->setUpdatedAt(time());
            }
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
                // symfony_timestampable behavior
                if (!$this->isColumnModified(BookingVersionPeer::CREATED_AT))
                {
                  $this->setCreatedAt(time());
                }

            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseBookingVersion:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                BookingVersionPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            // We call the save method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aBooking !== null) {
                if ($this->aBooking->isModified() || $this->aBooking->isNew()) {
                    $affectedRows += $this->aBooking->save($con);
                }
                $this->setBooking($this->aBooking);
            }

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;


         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(BookingVersionPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(BookingVersionPeer::BOOKING_DATE)) {
            $modifiedColumns[':p' . $index++]  = '`BOOKING_DATE`';
        }
        if ($this->isColumnModified(BookingVersionPeer::YEAR)) {
            $modifiedColumns[':p' . $index++]  = '`YEAR`';
        }
        if ($this->isColumnModified(BookingVersionPeer::NUMBER)) {
            $modifiedColumns[':p' . $index++]  = '`NUMBER`';
        }
        if ($this->isColumnModified(BookingVersionPeer::ADULT)) {
            $modifiedColumns[':p' . $index++]  = '`ADULT`';
        }
        if ($this->isColumnModified(BookingVersionPeer::CHILD)) {
            $modifiedColumns[':p' . $index++]  = '`CHILD`';
        }
        if ($this->isColumnModified(BookingVersionPeer::CONTACT)) {
            $modifiedColumns[':p' . $index++]  = '`CONTACT`';
        }
        if ($this->isColumnModified(BookingVersionPeer::RIF_FILE)) {
            $modifiedColumns[':p' . $index++]  = '`RIF_FILE`';
        }
        if ($this->isColumnModified(BookingVersionPeer::CUSTOMER_ID)) {
            $modifiedColumns[':p' . $index++]  = '`CUSTOMER_ID`';
        }
        if ($this->isColumnModified(BookingVersionPeer::VEHICLE_TYPE_ID)) {
            $modifiedColumns[':p' . $index++]  = '`VEHICLE_TYPE_ID`';
        }
        if ($this->isColumnModified(BookingVersionPeer::IS_CONFIRMED)) {
            $modifiedColumns[':p' . $index++]  = '`IS_CONFIRMED`';
        }
        if ($this->isColumnModified(BookingVersionPeer::CREATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_AT`';
        }
        if ($this->isColumnModified(BookingVersionPeer::UPDATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`UPDATED_AT`';
        }
        if ($this->isColumnModified(BookingVersionPeer::VERSION)) {
            $modifiedColumns[':p' . $index++]  = '`VERSION`';
        }
        if ($this->isColumnModified(BookingVersionPeer::VERSION_CREATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`VERSION_CREATED_AT`';
        }
        if ($this->isColumnModified(BookingVersionPeer::VERSION_CREATED_BY)) {
            $modifiedColumns[':p' . $index++]  = '`VERSION_CREATED_BY`';
        }
        if ($this->isColumnModified(BookingVersionPeer::ARRIVAL_IDS)) {
            $modifiedColumns[':p' . $index++]  = '`ARRIVAL_IDS`';
        }
        if ($this->isColumnModified(BookingVersionPeer::ARRIVAL_VERSIONS)) {
            $modifiedColumns[':p' . $index++]  = '`ARRIVAL_VERSIONS`';
        }
        if ($this->isColumnModified(BookingVersionPeer::DEPARTURE_IDS)) {
            $modifiedColumns[':p' . $index++]  = '`DEPARTURE_IDS`';
        }
        if ($this->isColumnModified(BookingVersionPeer::DEPARTURE_VERSIONS)) {
            $modifiedColumns[':p' . $index++]  = '`DEPARTURE_VERSIONS`';
        }

        $sql = sprintf(
            'INSERT INTO `booking_version` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`BOOKING_DATE`':
                        $stmt->bindValue($identifier, $this->booking_date, PDO::PARAM_STR);
                        break;
                    case '`YEAR`':
                        $stmt->bindValue($identifier, $this->year, PDO::PARAM_INT);
                        break;
                    case '`NUMBER`':
                        $stmt->bindValue($identifier, $this->number, PDO::PARAM_INT);
                        break;
                    case '`ADULT`':
                        $stmt->bindValue($identifier, $this->adult, PDO::PARAM_INT);
                        break;
                    case '`CHILD`':
                        $stmt->bindValue($identifier, $this->child, PDO::PARAM_INT);
                        break;
                    case '`CONTACT`':
                        $stmt->bindValue($identifier, $this->contact, PDO::PARAM_STR);
                        break;
                    case '`RIF_FILE`':
                        $stmt->bindValue($identifier, $this->rif_file, PDO::PARAM_STR);
                        break;
                    case '`CUSTOMER_ID`':
                        $stmt->bindValue($identifier, $this->customer_id, PDO::PARAM_INT);
                        break;
                    case '`VEHICLE_TYPE_ID`':
                        $stmt->bindValue($identifier, $this->vehicle_type_id, PDO::PARAM_INT);
                        break;
                    case '`IS_CONFIRMED`':
                        $stmt->bindValue($identifier, (int) $this->is_confirmed, PDO::PARAM_INT);
                        break;
                    case '`CREATED_AT`':
                        $stmt->bindValue($identifier, $this->created_at, PDO::PARAM_STR);
                        break;
                    case '`UPDATED_AT`':
                        $stmt->bindValue($identifier, $this->updated_at, PDO::PARAM_STR);
                        break;
                    case '`VERSION`':
                        $stmt->bindValue($identifier, $this->version, PDO::PARAM_INT);
                        break;
                    case '`VERSION_CREATED_AT`':
                        $stmt->bindValue($identifier, $this->version_created_at, PDO::PARAM_STR);
                        break;
                    case '`VERSION_CREATED_BY`':
                        $stmt->bindValue($identifier, $this->version_created_by, PDO::PARAM_STR);
                        break;
                    case '`ARRIVAL_IDS`':
                        $stmt->bindValue($identifier, $this->arrival_ids, PDO::PARAM_STR);
                        break;
                    case '`ARRIVAL_VERSIONS`':
                        $stmt->bindValue($identifier, $this->arrival_versions, PDO::PARAM_STR);
                        break;
                    case '`DEPARTURE_IDS`':
                        $stmt->bindValue($identifier, $this->departure_ids, PDO::PARAM_STR);
                        break;
                    case '`DEPARTURE_VERSIONS`':
                        $stmt->bindValue($identifier, $this->departure_versions, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            // We call the validate method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aBooking !== null) {
                if (!$this->aBooking->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aBooking->getValidationFailures());
                }
            }


            if (($retval = BookingVersionPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }



            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = BookingVersionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getBookingDate();
                break;
            case 2:
                return $this->getYear();
                break;
            case 3:
                return $this->getNumber();
                break;
            case 4:
                return $this->getAdult();
                break;
            case 5:
                return $this->getChild();
                break;
            case 6:
                return $this->getContact();
                break;
            case 7:
                return $this->getRifFile();
                break;
            case 8:
                return $this->getCustomerId();
                break;
            case 9:
                return $this->getVehicleTypeId();
                break;
            case 10:
                return $this->getIsConfirmed();
                break;
            case 11:
                return $this->getCreatedAt();
                break;
            case 12:
                return $this->getUpdatedAt();
                break;
            case 13:
                return $this->getVersion();
                break;
            case 14:
                return $this->getVersionCreatedAt();
                break;
            case 15:
                return $this->getVersionCreatedBy();
                break;
            case 16:
                return $this->getArrivalIds();
                break;
            case 17:
                return $this->getArrivalVersions();
                break;
            case 18:
                return $this->getDepartureIds();
                break;
            case 19:
                return $this->getDepartureVersions();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['BookingVersion'][serialize($this->getPrimaryKey())])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['BookingVersion'][serialize($this->getPrimaryKey())] = true;
        $keys = BookingVersionPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getBookingDate(),
            $keys[2] => $this->getYear(),
            $keys[3] => $this->getNumber(),
            $keys[4] => $this->getAdult(),
            $keys[5] => $this->getChild(),
            $keys[6] => $this->getContact(),
            $keys[7] => $this->getRifFile(),
            $keys[8] => $this->getCustomerId(),
            $keys[9] => $this->getVehicleTypeId(),
            $keys[10] => $this->getIsConfirmed(),
            $keys[11] => $this->getCreatedAt(),
            $keys[12] => $this->getUpdatedAt(),
            $keys[13] => $this->getVersion(),
            $keys[14] => $this->getVersionCreatedAt(),
            $keys[15] => $this->getVersionCreatedBy(),
            $keys[16] => $this->getArrivalIds(),
            $keys[17] => $this->getArrivalVersions(),
            $keys[18] => $this->getDepartureIds(),
            $keys[19] => $this->getDepartureVersions(),
        );
        if ($includeForeignObjects) {
            if (null !== $this->aBooking) {
                $result['Booking'] = $this->aBooking->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = BookingVersionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setBookingDate($value);
                break;
            case 2:
                $this->setYear($value);
                break;
            case 3:
                $this->setNumber($value);
                break;
            case 4:
                $this->setAdult($value);
                break;
            case 5:
                $this->setChild($value);
                break;
            case 6:
                $this->setContact($value);
                break;
            case 7:
                $this->setRifFile($value);
                break;
            case 8:
                $this->setCustomerId($value);
                break;
            case 9:
                $this->setVehicleTypeId($value);
                break;
            case 10:
                $this->setIsConfirmed($value);
                break;
            case 11:
                $this->setCreatedAt($value);
                break;
            case 12:
                $this->setUpdatedAt($value);
                break;
            case 13:
                $this->setVersion($value);
                break;
            case 14:
                $this->setVersionCreatedAt($value);
                break;
            case 15:
                $this->setVersionCreatedBy($value);
                break;
            case 16:
                if (!is_array($value)) {
                    $v = trim(substr($value, 2, -2));
                    $value = $v ? explode(' | ', $v) : array();
                }
                $this->setArrivalIds($value);
                break;
            case 17:
                if (!is_array($value)) {
                    $v = trim(substr($value, 2, -2));
                    $value = $v ? explode(' | ', $v) : array();
                }
                $this->setArrivalVersions($value);
                break;
            case 18:
                if (!is_array($value)) {
                    $v = trim(substr($value, 2, -2));
                    $value = $v ? explode(' | ', $v) : array();
                }
                $this->setDepartureIds($value);
                break;
            case 19:
                if (!is_array($value)) {
                    $v = trim(substr($value, 2, -2));
                    $value = $v ? explode(' | ', $v) : array();
                }
                $this->setDepartureVersions($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = BookingVersionPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setBookingDate($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setYear($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setNumber($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setAdult($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setChild($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setContact($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setRifFile($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setCustomerId($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setVehicleTypeId($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setIsConfirmed($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setCreatedAt($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setUpdatedAt($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setVersion($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setVersionCreatedAt($arr[$keys[14]]);
        if (array_key_exists($keys[15], $arr)) $this->setVersionCreatedBy($arr[$keys[15]]);
        if (array_key_exists($keys[16], $arr)) $this->setArrivalIds($arr[$keys[16]]);
        if (array_key_exists($keys[17], $arr)) $this->setArrivalVersions($arr[$keys[17]]);
        if (array_key_exists($keys[18], $arr)) $this->setDepartureIds($arr[$keys[18]]);
        if (array_key_exists($keys[19], $arr)) $this->setDepartureVersions($arr[$keys[19]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(BookingVersionPeer::DATABASE_NAME);

        if ($this->isColumnModified(BookingVersionPeer::ID)) $criteria->add(BookingVersionPeer::ID, $this->id);
        if ($this->isColumnModified(BookingVersionPeer::BOOKING_DATE)) $criteria->add(BookingVersionPeer::BOOKING_DATE, $this->booking_date);
        if ($this->isColumnModified(BookingVersionPeer::YEAR)) $criteria->add(BookingVersionPeer::YEAR, $this->year);
        if ($this->isColumnModified(BookingVersionPeer::NUMBER)) $criteria->add(BookingVersionPeer::NUMBER, $this->number);
        if ($this->isColumnModified(BookingVersionPeer::ADULT)) $criteria->add(BookingVersionPeer::ADULT, $this->adult);
        if ($this->isColumnModified(BookingVersionPeer::CHILD)) $criteria->add(BookingVersionPeer::CHILD, $this->child);
        if ($this->isColumnModified(BookingVersionPeer::CONTACT)) $criteria->add(BookingVersionPeer::CONTACT, $this->contact);
        if ($this->isColumnModified(BookingVersionPeer::RIF_FILE)) $criteria->add(BookingVersionPeer::RIF_FILE, $this->rif_file);
        if ($this->isColumnModified(BookingVersionPeer::CUSTOMER_ID)) $criteria->add(BookingVersionPeer::CUSTOMER_ID, $this->customer_id);
        if ($this->isColumnModified(BookingVersionPeer::VEHICLE_TYPE_ID)) $criteria->add(BookingVersionPeer::VEHICLE_TYPE_ID, $this->vehicle_type_id);
        if ($this->isColumnModified(BookingVersionPeer::IS_CONFIRMED)) $criteria->add(BookingVersionPeer::IS_CONFIRMED, $this->is_confirmed);
        if ($this->isColumnModified(BookingVersionPeer::CREATED_AT)) $criteria->add(BookingVersionPeer::CREATED_AT, $this->created_at);
        if ($this->isColumnModified(BookingVersionPeer::UPDATED_AT)) $criteria->add(BookingVersionPeer::UPDATED_AT, $this->updated_at);
        if ($this->isColumnModified(BookingVersionPeer::VERSION)) $criteria->add(BookingVersionPeer::VERSION, $this->version);
        if ($this->isColumnModified(BookingVersionPeer::VERSION_CREATED_AT)) $criteria->add(BookingVersionPeer::VERSION_CREATED_AT, $this->version_created_at);
        if ($this->isColumnModified(BookingVersionPeer::VERSION_CREATED_BY)) $criteria->add(BookingVersionPeer::VERSION_CREATED_BY, $this->version_created_by);
        if ($this->isColumnModified(BookingVersionPeer::ARRIVAL_IDS)) $criteria->add(BookingVersionPeer::ARRIVAL_IDS, $this->arrival_ids);
        if ($this->isColumnModified(BookingVersionPeer::ARRIVAL_VERSIONS)) $criteria->add(BookingVersionPeer::ARRIVAL_VERSIONS, $this->arrival_versions);
        if ($this->isColumnModified(BookingVersionPeer::DEPARTURE_IDS)) $criteria->add(BookingVersionPeer::DEPARTURE_IDS, $this->departure_ids);
        if ($this->isColumnModified(BookingVersionPeer::DEPARTURE_VERSIONS)) $criteria->add(BookingVersionPeer::DEPARTURE_VERSIONS, $this->departure_versions);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(BookingVersionPeer::DATABASE_NAME);
        $criteria->add(BookingVersionPeer::ID, $this->id);
        $criteria->add(BookingVersionPeer::VERSION, $this->version);

        return $criteria;
    }

    /**
     * Returns the composite primary key for this object.
     * The array elements will be in same order as specified in XML.
     * @return array
     */
    public function getPrimaryKey()
    {
        $pks = array();
        $pks[0] = $this->getId();
        $pks[1] = $this->getVersion();

        return $pks;
    }

    /**
     * Set the [composite] primary key.
     *
     * @param array $keys The elements of the composite key (order must match the order in XML file).
     * @return void
     */
    public function setPrimaryKey($keys)
    {
        $this->setId($keys[0]);
        $this->setVersion($keys[1]);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return (null === $this->getId()) && (null === $this->getVersion());
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of BookingVersion (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setId($this->getId());
        $copyObj->setBookingDate($this->getBookingDate());
        $copyObj->setYear($this->getYear());
        $copyObj->setNumber($this->getNumber());
        $copyObj->setAdult($this->getAdult());
        $copyObj->setChild($this->getChild());
        $copyObj->setContact($this->getContact());
        $copyObj->setRifFile($this->getRifFile());
        $copyObj->setCustomerId($this->getCustomerId());
        $copyObj->setVehicleTypeId($this->getVehicleTypeId());
        $copyObj->setIsConfirmed($this->getIsConfirmed());
        $copyObj->setCreatedAt($this->getCreatedAt());
        $copyObj->setUpdatedAt($this->getUpdatedAt());
        $copyObj->setVersion($this->getVersion());
        $copyObj->setVersionCreatedAt($this->getVersionCreatedAt());
        $copyObj->setVersionCreatedBy($this->getVersionCreatedBy());
        $copyObj->setArrivalIds($this->getArrivalIds());
        $copyObj->setArrivalVersions($this->getArrivalVersions());
        $copyObj->setDepartureIds($this->getDepartureIds());
        $copyObj->setDepartureVersions($this->getDepartureVersions());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return BookingVersion Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return BookingVersionPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new BookingVersionPeer();
        }

        return self::$peer;
    }

    /**
     * Declares an association between this object and a Booking object.
     *
     * @param             Booking $v
     * @return BookingVersion The current object (for fluent API support)
     * @throws PropelException
     */
    public function setBooking(Booking $v = null)
    {
        if ($v === null) {
            $this->setId(NULL);
        } else {
            $this->setId($v->getId());
        }

        $this->aBooking = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Booking object, it will not be re-added.
        if ($v !== null) {
            $v->addBookingVersion($this);
        }


        return $this;
    }


    /**
     * Get the associated Booking object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Booking The associated Booking object.
     * @throws PropelException
     */
    public function getBooking(PropelPDO $con = null)
    {
        if ($this->aBooking === null && ($this->id !== null)) {
            $this->aBooking = BookingQuery::create()->findPk($this->id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aBooking->addBookingVersions($this);
             */
        }

        return $this->aBooking;
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->booking_date = null;
        $this->year = null;
        $this->number = null;
        $this->adult = null;
        $this->child = null;
        $this->contact = null;
        $this->rif_file = null;
        $this->customer_id = null;
        $this->vehicle_type_id = null;
        $this->is_confirmed = null;
        $this->created_at = null;
        $this->updated_at = null;
        $this->version = null;
        $this->version_created_at = null;
        $this->version_created_by = null;
        $this->arrival_ids = null;
        $this->arrival_ids_unserialized = null;
        $this->arrival_versions = null;
        $this->arrival_versions_unserialized = null;
        $this->departure_ids = null;
        $this->departure_ids_unserialized = null;
        $this->departure_versions = null;
        $this->departure_versions_unserialized = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
        } // if ($deep)

        $this->aBooking = null;
    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(BookingVersionPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BaseBookingVersion:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
