<?php


/**
 * Base class that represents a query for the 'locality' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Tue 13 May 2014 12:39:44 PM CEST
 *
 * @method LocalityQuery orderById($order = Criteria::ASC) Order by the id column
 * @method LocalityQuery orderByUserId($order = Criteria::ASC) Order by the user_id column
 * @method LocalityQuery orderByIsVector($order = Criteria::ASC) Order by the is_vector column
 * @method LocalityQuery orderByIsActive($order = Criteria::ASC) Order by the is_active column
 * @method LocalityQuery orderByName($order = Criteria::ASC) Order by the name column
 * @method LocalityQuery orderByPhone($order = Criteria::ASC) Order by the phone column
 * @method LocalityQuery orderByFax($order = Criteria::ASC) Order by the fax column
 * @method LocalityQuery orderByMobile($order = Criteria::ASC) Order by the mobile column
 * @method LocalityQuery orderByEmail($order = Criteria::ASC) Order by the email column
 * @method LocalityQuery orderBySite($order = Criteria::ASC) Order by the site column
 * @method LocalityQuery orderByFormattedAddress($order = Criteria::ASC) Order by the formatted_address column
 * @method LocalityQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method LocalityQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method LocalityQuery orderByLatitude($order = Criteria::ASC) Order by the latitude column
 * @method LocalityQuery orderByLongitude($order = Criteria::ASC) Order by the longitude column
 *
 * @method LocalityQuery groupById() Group by the id column
 * @method LocalityQuery groupByUserId() Group by the user_id column
 * @method LocalityQuery groupByIsVector() Group by the is_vector column
 * @method LocalityQuery groupByIsActive() Group by the is_active column
 * @method LocalityQuery groupByName() Group by the name column
 * @method LocalityQuery groupByPhone() Group by the phone column
 * @method LocalityQuery groupByFax() Group by the fax column
 * @method LocalityQuery groupByMobile() Group by the mobile column
 * @method LocalityQuery groupByEmail() Group by the email column
 * @method LocalityQuery groupBySite() Group by the site column
 * @method LocalityQuery groupByFormattedAddress() Group by the formatted_address column
 * @method LocalityQuery groupByCreatedAt() Group by the created_at column
 * @method LocalityQuery groupByUpdatedAt() Group by the updated_at column
 * @method LocalityQuery groupByLatitude() Group by the latitude column
 * @method LocalityQuery groupByLongitude() Group by the longitude column
 *
 * @method LocalityQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method LocalityQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method LocalityQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method LocalityQuery leftJoinsfGuardUser($relationAlias = null) Adds a LEFT JOIN clause to the query using the sfGuardUser relation
 * @method LocalityQuery rightJoinsfGuardUser($relationAlias = null) Adds a RIGHT JOIN clause to the query using the sfGuardUser relation
 * @method LocalityQuery innerJoinsfGuardUser($relationAlias = null) Adds a INNER JOIN clause to the query using the sfGuardUser relation
 *
 * @method LocalityQuery leftJoinRouteRelatedByLocalityFrom($relationAlias = null) Adds a LEFT JOIN clause to the query using the RouteRelatedByLocalityFrom relation
 * @method LocalityQuery rightJoinRouteRelatedByLocalityFrom($relationAlias = null) Adds a RIGHT JOIN clause to the query using the RouteRelatedByLocalityFrom relation
 * @method LocalityQuery innerJoinRouteRelatedByLocalityFrom($relationAlias = null) Adds a INNER JOIN clause to the query using the RouteRelatedByLocalityFrom relation
 *
 * @method LocalityQuery leftJoinRouteRelatedByLocalityTo($relationAlias = null) Adds a LEFT JOIN clause to the query using the RouteRelatedByLocalityTo relation
 * @method LocalityQuery rightJoinRouteRelatedByLocalityTo($relationAlias = null) Adds a RIGHT JOIN clause to the query using the RouteRelatedByLocalityTo relation
 * @method LocalityQuery innerJoinRouteRelatedByLocalityTo($relationAlias = null) Adds a INNER JOIN clause to the query using the RouteRelatedByLocalityTo relation
 *
 * @method LocalityQuery leftJoinArrivalRelatedByLocalityFrom($relationAlias = null) Adds a LEFT JOIN clause to the query using the ArrivalRelatedByLocalityFrom relation
 * @method LocalityQuery rightJoinArrivalRelatedByLocalityFrom($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ArrivalRelatedByLocalityFrom relation
 * @method LocalityQuery innerJoinArrivalRelatedByLocalityFrom($relationAlias = null) Adds a INNER JOIN clause to the query using the ArrivalRelatedByLocalityFrom relation
 *
 * @method LocalityQuery leftJoinArrivalRelatedByLocalityTo($relationAlias = null) Adds a LEFT JOIN clause to the query using the ArrivalRelatedByLocalityTo relation
 * @method LocalityQuery rightJoinArrivalRelatedByLocalityTo($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ArrivalRelatedByLocalityTo relation
 * @method LocalityQuery innerJoinArrivalRelatedByLocalityTo($relationAlias = null) Adds a INNER JOIN clause to the query using the ArrivalRelatedByLocalityTo relation
 *
 * @method LocalityQuery leftJoinDepartureRelatedByLocalityFrom($relationAlias = null) Adds a LEFT JOIN clause to the query using the DepartureRelatedByLocalityFrom relation
 * @method LocalityQuery rightJoinDepartureRelatedByLocalityFrom($relationAlias = null) Adds a RIGHT JOIN clause to the query using the DepartureRelatedByLocalityFrom relation
 * @method LocalityQuery innerJoinDepartureRelatedByLocalityFrom($relationAlias = null) Adds a INNER JOIN clause to the query using the DepartureRelatedByLocalityFrom relation
 *
 * @method LocalityQuery leftJoinDepartureRelatedByLocalityTo($relationAlias = null) Adds a LEFT JOIN clause to the query using the DepartureRelatedByLocalityTo relation
 * @method LocalityQuery rightJoinDepartureRelatedByLocalityTo($relationAlias = null) Adds a RIGHT JOIN clause to the query using the DepartureRelatedByLocalityTo relation
 * @method LocalityQuery innerJoinDepartureRelatedByLocalityTo($relationAlias = null) Adds a INNER JOIN clause to the query using the DepartureRelatedByLocalityTo relation
 *
 * @method Locality findOne(PropelPDO $con = null) Return the first Locality matching the query
 * @method Locality findOneOrCreate(PropelPDO $con = null) Return the first Locality matching the query, or a new Locality object populated from the query conditions when no match is found
 *
 * @method Locality findOneById(int $id) Return the first Locality filtered by the id column
 * @method Locality findOneByUserId(int $user_id) Return the first Locality filtered by the user_id column
 * @method Locality findOneByIsVector(boolean $is_vector) Return the first Locality filtered by the is_vector column
 * @method Locality findOneByIsActive(boolean $is_active) Return the first Locality filtered by the is_active column
 * @method Locality findOneByName(string $name) Return the first Locality filtered by the name column
 * @method Locality findOneByPhone(string $phone) Return the first Locality filtered by the phone column
 * @method Locality findOneByFax(string $fax) Return the first Locality filtered by the fax column
 * @method Locality findOneByMobile(string $mobile) Return the first Locality filtered by the mobile column
 * @method Locality findOneByEmail(string $email) Return the first Locality filtered by the email column
 * @method Locality findOneBySite(string $site) Return the first Locality filtered by the site column
 * @method Locality findOneByFormattedAddress(string $formatted_address) Return the first Locality filtered by the formatted_address column
 * @method Locality findOneByCreatedAt(string $created_at) Return the first Locality filtered by the created_at column
 * @method Locality findOneByUpdatedAt(string $updated_at) Return the first Locality filtered by the updated_at column
 * @method Locality findOneByLatitude(double $latitude) Return the first Locality filtered by the latitude column
 * @method Locality findOneByLongitude(double $longitude) Return the first Locality filtered by the longitude column
 *
 * @method array findById(int $id) Return Locality objects filtered by the id column
 * @method array findByUserId(int $user_id) Return Locality objects filtered by the user_id column
 * @method array findByIsVector(boolean $is_vector) Return Locality objects filtered by the is_vector column
 * @method array findByIsActive(boolean $is_active) Return Locality objects filtered by the is_active column
 * @method array findByName(string $name) Return Locality objects filtered by the name column
 * @method array findByPhone(string $phone) Return Locality objects filtered by the phone column
 * @method array findByFax(string $fax) Return Locality objects filtered by the fax column
 * @method array findByMobile(string $mobile) Return Locality objects filtered by the mobile column
 * @method array findByEmail(string $email) Return Locality objects filtered by the email column
 * @method array findBySite(string $site) Return Locality objects filtered by the site column
 * @method array findByFormattedAddress(string $formatted_address) Return Locality objects filtered by the formatted_address column
 * @method array findByCreatedAt(string $created_at) Return Locality objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Locality objects filtered by the updated_at column
 * @method array findByLatitude(double $latitude) Return Locality objects filtered by the latitude column
 * @method array findByLongitude(double $longitude) Return Locality objects filtered by the longitude column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseLocalityQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseLocalityQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Locality', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new LocalityQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     LocalityQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return LocalityQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof LocalityQuery) {
            return $criteria;
        }
        $query = new LocalityQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Locality|Locality[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = LocalityPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(LocalityPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Locality A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `USER_ID`, `IS_VECTOR`, `IS_ACTIVE`, `NAME`, `PHONE`, `FAX`, `MOBILE`, `EMAIL`, `SITE`, `FORMATTED_ADDRESS`, `CREATED_AT`, `UPDATED_AT`, `LATITUDE`, `LONGITUDE` FROM `locality` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Locality();
            $obj->hydrate($row);
            LocalityPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Locality|Locality[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Locality[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(LocalityPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(LocalityPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(LocalityPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the user_id column
     *
     * Example usage:
     * <code>
     * $query->filterByUserId(1234); // WHERE user_id = 1234
     * $query->filterByUserId(array(12, 34)); // WHERE user_id IN (12, 34)
     * $query->filterByUserId(array('min' => 12)); // WHERE user_id > 12
     * </code>
     *
     * @see       filterBysfGuardUser()
     *
     * @param     mixed $userId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByUserId($userId = null, $comparison = null)
    {
        if (is_array($userId)) {
            $useMinMax = false;
            if (isset($userId['min'])) {
                $this->addUsingAlias(LocalityPeer::USER_ID, $userId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($userId['max'])) {
                $this->addUsingAlias(LocalityPeer::USER_ID, $userId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(LocalityPeer::USER_ID, $userId, $comparison);
    }

    /**
     * Filter the query on the is_vector column
     *
     * Example usage:
     * <code>
     * $query->filterByIsVector(true); // WHERE is_vector = true
     * $query->filterByIsVector('yes'); // WHERE is_vector = true
     * </code>
     *
     * @param     boolean|string $isVector The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByIsVector($isVector = null, $comparison = null)
    {
        if (is_string($isVector)) {
            $is_vector = in_array(strtolower($isVector), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(LocalityPeer::IS_VECTOR, $isVector, $comparison);
    }

    /**
     * Filter the query on the is_active column
     *
     * Example usage:
     * <code>
     * $query->filterByIsActive(true); // WHERE is_active = true
     * $query->filterByIsActive('yes'); // WHERE is_active = true
     * </code>
     *
     * @param     boolean|string $isActive The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByIsActive($isActive = null, $comparison = null)
    {
        if (is_string($isActive)) {
            $is_active = in_array(strtolower($isActive), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(LocalityPeer::IS_ACTIVE, $isActive, $comparison);
    }

    /**
     * Filter the query on the name column
     *
     * Example usage:
     * <code>
     * $query->filterByName('fooValue');   // WHERE name = 'fooValue'
     * $query->filterByName('%fooValue%'); // WHERE name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $name The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByName($name = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($name)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $name)) {
                $name = str_replace('*', '%', $name);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(LocalityPeer::NAME, $name, $comparison);
    }

    /**
     * Filter the query on the phone column
     *
     * Example usage:
     * <code>
     * $query->filterByPhone('fooValue');   // WHERE phone = 'fooValue'
     * $query->filterByPhone('%fooValue%'); // WHERE phone LIKE '%fooValue%'
     * </code>
     *
     * @param     string $phone The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByPhone($phone = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($phone)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $phone)) {
                $phone = str_replace('*', '%', $phone);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(LocalityPeer::PHONE, $phone, $comparison);
    }

    /**
     * Filter the query on the fax column
     *
     * Example usage:
     * <code>
     * $query->filterByFax('fooValue');   // WHERE fax = 'fooValue'
     * $query->filterByFax('%fooValue%'); // WHERE fax LIKE '%fooValue%'
     * </code>
     *
     * @param     string $fax The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByFax($fax = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($fax)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $fax)) {
                $fax = str_replace('*', '%', $fax);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(LocalityPeer::FAX, $fax, $comparison);
    }

    /**
     * Filter the query on the mobile column
     *
     * Example usage:
     * <code>
     * $query->filterByMobile('fooValue');   // WHERE mobile = 'fooValue'
     * $query->filterByMobile('%fooValue%'); // WHERE mobile LIKE '%fooValue%'
     * </code>
     *
     * @param     string $mobile The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByMobile($mobile = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($mobile)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $mobile)) {
                $mobile = str_replace('*', '%', $mobile);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(LocalityPeer::MOBILE, $mobile, $comparison);
    }

    /**
     * Filter the query on the email column
     *
     * Example usage:
     * <code>
     * $query->filterByEmail('fooValue');   // WHERE email = 'fooValue'
     * $query->filterByEmail('%fooValue%'); // WHERE email LIKE '%fooValue%'
     * </code>
     *
     * @param     string $email The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByEmail($email = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($email)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $email)) {
                $email = str_replace('*', '%', $email);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(LocalityPeer::EMAIL, $email, $comparison);
    }

    /**
     * Filter the query on the site column
     *
     * Example usage:
     * <code>
     * $query->filterBySite('fooValue');   // WHERE site = 'fooValue'
     * $query->filterBySite('%fooValue%'); // WHERE site LIKE '%fooValue%'
     * </code>
     *
     * @param     string $site The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterBySite($site = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($site)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $site)) {
                $site = str_replace('*', '%', $site);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(LocalityPeer::SITE, $site, $comparison);
    }

    /**
     * Filter the query on the formatted_address column
     *
     * Example usage:
     * <code>
     * $query->filterByFormattedAddress('fooValue');   // WHERE formatted_address = 'fooValue'
     * $query->filterByFormattedAddress('%fooValue%'); // WHERE formatted_address LIKE '%fooValue%'
     * </code>
     *
     * @param     string $formattedAddress The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByFormattedAddress($formattedAddress = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($formattedAddress)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $formattedAddress)) {
                $formattedAddress = str_replace('*', '%', $formattedAddress);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(LocalityPeer::FORMATTED_ADDRESS, $formattedAddress, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(LocalityPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(LocalityPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(LocalityPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(LocalityPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(LocalityPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(LocalityPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the latitude column
     *
     * Example usage:
     * <code>
     * $query->filterByLatitude(1234); // WHERE latitude = 1234
     * $query->filterByLatitude(array(12, 34)); // WHERE latitude IN (12, 34)
     * $query->filterByLatitude(array('min' => 12)); // WHERE latitude > 12
     * </code>
     *
     * @param     mixed $latitude The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByLatitude($latitude = null, $comparison = null)
    {
        if (is_array($latitude)) {
            $useMinMax = false;
            if (isset($latitude['min'])) {
                $this->addUsingAlias(LocalityPeer::LATITUDE, $latitude['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($latitude['max'])) {
                $this->addUsingAlias(LocalityPeer::LATITUDE, $latitude['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(LocalityPeer::LATITUDE, $latitude, $comparison);
    }

    /**
     * Filter the query on the longitude column
     *
     * Example usage:
     * <code>
     * $query->filterByLongitude(1234); // WHERE longitude = 1234
     * $query->filterByLongitude(array(12, 34)); // WHERE longitude IN (12, 34)
     * $query->filterByLongitude(array('min' => 12)); // WHERE longitude > 12
     * </code>
     *
     * @param     mixed $longitude The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByLongitude($longitude = null, $comparison = null)
    {
        if (is_array($longitude)) {
            $useMinMax = false;
            if (isset($longitude['min'])) {
                $this->addUsingAlias(LocalityPeer::LONGITUDE, $longitude['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($longitude['max'])) {
                $this->addUsingAlias(LocalityPeer::LONGITUDE, $longitude['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(LocalityPeer::LONGITUDE, $longitude, $comparison);
    }

    /**
     * Filter the query by a related sfGuardUser object
     *
     * @param   sfGuardUser|PropelObjectCollection $sfGuardUser The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   LocalityQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBysfGuardUser($sfGuardUser, $comparison = null)
    {
        if ($sfGuardUser instanceof sfGuardUser) {
            return $this
                ->addUsingAlias(LocalityPeer::USER_ID, $sfGuardUser->getId(), $comparison);
        } elseif ($sfGuardUser instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(LocalityPeer::USER_ID, $sfGuardUser->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBysfGuardUser() only accepts arguments of type sfGuardUser or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the sfGuardUser relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function joinsfGuardUser($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('sfGuardUser');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'sfGuardUser');
        }

        return $this;
    }

    /**
     * Use the sfGuardUser relation sfGuardUser object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   sfGuardUserQuery A secondary query class using the current class as primary query
     */
    public function usesfGuardUserQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinsfGuardUser($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'sfGuardUser', 'sfGuardUserQuery');
    }

    /**
     * Filter the query by a related Route object
     *
     * @param   Route|PropelObjectCollection $route  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   LocalityQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByRouteRelatedByLocalityFrom($route, $comparison = null)
    {
        if ($route instanceof Route) {
            return $this
                ->addUsingAlias(LocalityPeer::ID, $route->getLocalityFrom(), $comparison);
        } elseif ($route instanceof PropelObjectCollection) {
            return $this
                ->useRouteRelatedByLocalityFromQuery()
                ->filterByPrimaryKeys($route->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByRouteRelatedByLocalityFrom() only accepts arguments of type Route or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the RouteRelatedByLocalityFrom relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function joinRouteRelatedByLocalityFrom($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('RouteRelatedByLocalityFrom');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'RouteRelatedByLocalityFrom');
        }

        return $this;
    }

    /**
     * Use the RouteRelatedByLocalityFrom relation Route object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   RouteQuery A secondary query class using the current class as primary query
     */
    public function useRouteRelatedByLocalityFromQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinRouteRelatedByLocalityFrom($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'RouteRelatedByLocalityFrom', 'RouteQuery');
    }

    /**
     * Filter the query by a related Route object
     *
     * @param   Route|PropelObjectCollection $route  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   LocalityQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByRouteRelatedByLocalityTo($route, $comparison = null)
    {
        if ($route instanceof Route) {
            return $this
                ->addUsingAlias(LocalityPeer::ID, $route->getLocalityTo(), $comparison);
        } elseif ($route instanceof PropelObjectCollection) {
            return $this
                ->useRouteRelatedByLocalityToQuery()
                ->filterByPrimaryKeys($route->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByRouteRelatedByLocalityTo() only accepts arguments of type Route or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the RouteRelatedByLocalityTo relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function joinRouteRelatedByLocalityTo($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('RouteRelatedByLocalityTo');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'RouteRelatedByLocalityTo');
        }

        return $this;
    }

    /**
     * Use the RouteRelatedByLocalityTo relation Route object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   RouteQuery A secondary query class using the current class as primary query
     */
    public function useRouteRelatedByLocalityToQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinRouteRelatedByLocalityTo($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'RouteRelatedByLocalityTo', 'RouteQuery');
    }

    /**
     * Filter the query by a related Arrival object
     *
     * @param   Arrival|PropelObjectCollection $arrival  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   LocalityQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByArrivalRelatedByLocalityFrom($arrival, $comparison = null)
    {
        if ($arrival instanceof Arrival) {
            return $this
                ->addUsingAlias(LocalityPeer::ID, $arrival->getLocalityFrom(), $comparison);
        } elseif ($arrival instanceof PropelObjectCollection) {
            return $this
                ->useArrivalRelatedByLocalityFromQuery()
                ->filterByPrimaryKeys($arrival->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByArrivalRelatedByLocalityFrom() only accepts arguments of type Arrival or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the ArrivalRelatedByLocalityFrom relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function joinArrivalRelatedByLocalityFrom($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('ArrivalRelatedByLocalityFrom');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'ArrivalRelatedByLocalityFrom');
        }

        return $this;
    }

    /**
     * Use the ArrivalRelatedByLocalityFrom relation Arrival object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   ArrivalQuery A secondary query class using the current class as primary query
     */
    public function useArrivalRelatedByLocalityFromQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinArrivalRelatedByLocalityFrom($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'ArrivalRelatedByLocalityFrom', 'ArrivalQuery');
    }

    /**
     * Filter the query by a related Arrival object
     *
     * @param   Arrival|PropelObjectCollection $arrival  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   LocalityQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByArrivalRelatedByLocalityTo($arrival, $comparison = null)
    {
        if ($arrival instanceof Arrival) {
            return $this
                ->addUsingAlias(LocalityPeer::ID, $arrival->getLocalityTo(), $comparison);
        } elseif ($arrival instanceof PropelObjectCollection) {
            return $this
                ->useArrivalRelatedByLocalityToQuery()
                ->filterByPrimaryKeys($arrival->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByArrivalRelatedByLocalityTo() only accepts arguments of type Arrival or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the ArrivalRelatedByLocalityTo relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function joinArrivalRelatedByLocalityTo($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('ArrivalRelatedByLocalityTo');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'ArrivalRelatedByLocalityTo');
        }

        return $this;
    }

    /**
     * Use the ArrivalRelatedByLocalityTo relation Arrival object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   ArrivalQuery A secondary query class using the current class as primary query
     */
    public function useArrivalRelatedByLocalityToQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinArrivalRelatedByLocalityTo($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'ArrivalRelatedByLocalityTo', 'ArrivalQuery');
    }

    /**
     * Filter the query by a related Departure object
     *
     * @param   Departure|PropelObjectCollection $departure  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   LocalityQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByDepartureRelatedByLocalityFrom($departure, $comparison = null)
    {
        if ($departure instanceof Departure) {
            return $this
                ->addUsingAlias(LocalityPeer::ID, $departure->getLocalityFrom(), $comparison);
        } elseif ($departure instanceof PropelObjectCollection) {
            return $this
                ->useDepartureRelatedByLocalityFromQuery()
                ->filterByPrimaryKeys($departure->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByDepartureRelatedByLocalityFrom() only accepts arguments of type Departure or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the DepartureRelatedByLocalityFrom relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function joinDepartureRelatedByLocalityFrom($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('DepartureRelatedByLocalityFrom');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'DepartureRelatedByLocalityFrom');
        }

        return $this;
    }

    /**
     * Use the DepartureRelatedByLocalityFrom relation Departure object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   DepartureQuery A secondary query class using the current class as primary query
     */
    public function useDepartureRelatedByLocalityFromQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinDepartureRelatedByLocalityFrom($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'DepartureRelatedByLocalityFrom', 'DepartureQuery');
    }

    /**
     * Filter the query by a related Departure object
     *
     * @param   Departure|PropelObjectCollection $departure  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   LocalityQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByDepartureRelatedByLocalityTo($departure, $comparison = null)
    {
        if ($departure instanceof Departure) {
            return $this
                ->addUsingAlias(LocalityPeer::ID, $departure->getLocalityTo(), $comparison);
        } elseif ($departure instanceof PropelObjectCollection) {
            return $this
                ->useDepartureRelatedByLocalityToQuery()
                ->filterByPrimaryKeys($departure->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByDepartureRelatedByLocalityTo() only accepts arguments of type Departure or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the DepartureRelatedByLocalityTo relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function joinDepartureRelatedByLocalityTo($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('DepartureRelatedByLocalityTo');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'DepartureRelatedByLocalityTo');
        }

        return $this;
    }

    /**
     * Use the DepartureRelatedByLocalityTo relation Departure object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   DepartureQuery A secondary query class using the current class as primary query
     */
    public function useDepartureRelatedByLocalityToQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinDepartureRelatedByLocalityTo($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'DepartureRelatedByLocalityTo', 'DepartureQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Locality $locality Object to remove from the list of results
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function prune($locality = null)
    {
        if ($locality) {
            $this->addUsingAlias(LocalityPeer::ID, $locality->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

    // Timestampable behavior

    /**
     * Filter by the latest updated
     *
     * @param      int $nbDays Maximum age of the latest update in days
     *
     * @return     LocalityQuery The current query, for fluid interface
     */
    public function recentlyUpdated($nbDays = 7)
    {
        return $this->addUsingAlias(LocalityPeer::UPDATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
    }

    /**
     * Order by update date desc
     *
     * @return     LocalityQuery The current query, for fluid interface
     */
    public function lastUpdatedFirst()
    {
        return $this->addDescendingOrderByColumn(LocalityPeer::UPDATED_AT);
    }

    /**
     * Order by update date asc
     *
     * @return     LocalityQuery The current query, for fluid interface
     */
    public function firstUpdatedFirst()
    {
        return $this->addAscendingOrderByColumn(LocalityPeer::UPDATED_AT);
    }

    /**
     * Filter by the latest created
     *
     * @param      int $nbDays Maximum age of in days
     *
     * @return     LocalityQuery The current query, for fluid interface
     */
    public function recentlyCreated($nbDays = 7)
    {
        return $this->addUsingAlias(LocalityPeer::CREATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
    }

    /**
     * Order by create date desc
     *
     * @return     LocalityQuery The current query, for fluid interface
     */
    public function lastCreatedFirst()
    {
        return $this->addDescendingOrderByColumn(LocalityPeer::CREATED_AT);
    }

    /**
     * Order by create date asc
     *
     * @return     LocalityQuery The current query, for fluid interface
     */
    public function firstCreatedFirst()
    {
        return $this->addAscendingOrderByColumn(LocalityPeer::CREATED_AT);
    }
    // Geocodable behavior

    /**
     * Adds distance from a given origin column to query.
     *
     * @param double $latitude       The latitude of the origin point.
     * @param double $longitude      The longitude of the origin point.
     * @param double $unit           The unit measure.
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function withDistance($latitude, $longitude, $unit = LocalityPeer::KILOMETERS_UNIT)
    {
        if (LocalityPeer::MILES_UNIT === $unit) {
            $earthRadius = 3959;
        } elseif (LocalityPeer::NAUTICAL_MILES_UNIT === $unit) {
            $earthRadius = 3440;
        } else {
            $earthRadius = 6371;
        }

        $sql = 'ABS(%s * ACOS(%s * COS(RADIANS(%s)) * COS(RADIANS(%s) - %s) + %s * SIN(RADIANS(%s))))';
        $preparedSql = sprintf($sql,
            $earthRadius,
            cos(deg2rad($latitude)),
            $this->getAliasedColName(LocalityPeer::LATITUDE),
            $this->getAliasedColName(LocalityPeer::LONGITUDE),
            deg2rad($longitude),
            sin(deg2rad($latitude)),
            $this->getAliasedColName(LocalityPeer::LATITUDE)
        );

        return $this
            ->withColumn($preparedSql, 'Distance');
    }

    /**
     * Filters objects by distance from a given origin.
     *
     * @param double $latitude       The latitude of the origin point.
     * @param double $longitude      The longitude of the origin point.
     * @param double $distance       The distance between the origin and the objects to find.
     * @param double $unit           The unit measure.
     * @param Criteria $comparison   Comparison sign (default is: `<`).
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterByDistanceFrom($latitude, $longitude, $distance, $unit = LocalityPeer::KILOMETERS_UNIT, $comparison = Criteria::LESS_THAN)
    {
        return $this
            ->withDistance($latitude, $longitude, $unit)
            ->where(sprintf('Distance %s ?', $comparison), $distance, PDO::PARAM_STR)
            ;
    }
    /**
     * Filters objects near a given Locality object.
     *
     * @param Locality $locality A Locality object.
     * @param double $distance The distance between the origin and the objects to find.
     * @param double $unit     The unit measure.
     *
     * @return LocalityQuery The current query, for fluid interface
     */
    public function filterNear(Locality $locality, $distance = 5, $unit = LocalityPeer::KILOMETERS_UNIT)
    {
        return $this
            ->filterByDistanceFrom(
                $locality->getLatitude(),
                $locality->getLongitude(),
                $distance, $unit
            );
    }

}
