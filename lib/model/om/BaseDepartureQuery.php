<?php


/**
 * Base class that represents a query for the 'departure' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Thu 15 May 2014 03:03:17 PM CEST
 *
 * @method DepartureQuery orderById($order = Criteria::ASC) Order by the id column
 * @method DepartureQuery orderByBookingId($order = Criteria::ASC) Order by the booking_id column
 * @method DepartureQuery orderByDay($order = Criteria::ASC) Order by the day column
 * @method DepartureQuery orderByHour($order = Criteria::ASC) Order by the hour column
 * @method DepartureQuery orderByPickUp($order = Criteria::ASC) Order by the pick_up column
 * @method DepartureQuery orderByDepartureTime($order = Criteria::ASC) Order by the departure_time column
 * @method DepartureQuery orderByFlight($order = Criteria::ASC) Order by the flight column
 * @method DepartureQuery orderByRateCost($order = Criteria::ASC) Order by the rate_cost column
 * @method DepartureQuery orderByCalculatedCost($order = Criteria::ASC) Order by the calculated_cost column
 * @method DepartureQuery orderByRateName($order = Criteria::ASC) Order by the rate_name column
 * @method DepartureQuery orderByNote($order = Criteria::ASC) Order by the note column
 * @method DepartureQuery orderByPaymentMethodId($order = Criteria::ASC) Order by the payment_method_id column
 * @method DepartureQuery orderByLocalityFrom($order = Criteria::ASC) Order by the locality_from column
 * @method DepartureQuery orderByLocalityTo($order = Criteria::ASC) Order by the locality_to column
 * @method DepartureQuery orderByDriverId($order = Criteria::ASC) Order by the driver_id column
 * @method DepartureQuery orderByVehicleId($order = Criteria::ASC) Order by the vehicle_id column
 * @method DepartureQuery orderByCancelled($order = Criteria::ASC) Order by the cancelled column
 * @method DepartureQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method DepartureQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method DepartureQuery orderByVersion($order = Criteria::ASC) Order by the version column
 * @method DepartureQuery orderByVersionCreatedAt($order = Criteria::ASC) Order by the version_created_at column
 * @method DepartureQuery orderByVersionCreatedBy($order = Criteria::ASC) Order by the version_created_by column
 *
 * @method DepartureQuery groupById() Group by the id column
 * @method DepartureQuery groupByBookingId() Group by the booking_id column
 * @method DepartureQuery groupByDay() Group by the day column
 * @method DepartureQuery groupByHour() Group by the hour column
 * @method DepartureQuery groupByPickUp() Group by the pick_up column
 * @method DepartureQuery groupByDepartureTime() Group by the departure_time column
 * @method DepartureQuery groupByFlight() Group by the flight column
 * @method DepartureQuery groupByRateCost() Group by the rate_cost column
 * @method DepartureQuery groupByCalculatedCost() Group by the calculated_cost column
 * @method DepartureQuery groupByRateName() Group by the rate_name column
 * @method DepartureQuery groupByNote() Group by the note column
 * @method DepartureQuery groupByPaymentMethodId() Group by the payment_method_id column
 * @method DepartureQuery groupByLocalityFrom() Group by the locality_from column
 * @method DepartureQuery groupByLocalityTo() Group by the locality_to column
 * @method DepartureQuery groupByDriverId() Group by the driver_id column
 * @method DepartureQuery groupByVehicleId() Group by the vehicle_id column
 * @method DepartureQuery groupByCancelled() Group by the cancelled column
 * @method DepartureQuery groupByCreatedAt() Group by the created_at column
 * @method DepartureQuery groupByUpdatedAt() Group by the updated_at column
 * @method DepartureQuery groupByVersion() Group by the version column
 * @method DepartureQuery groupByVersionCreatedAt() Group by the version_created_at column
 * @method DepartureQuery groupByVersionCreatedBy() Group by the version_created_by column
 *
 * @method DepartureQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method DepartureQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method DepartureQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method DepartureQuery leftJoinLocalityRelatedByLocalityFrom($relationAlias = null) Adds a LEFT JOIN clause to the query using the LocalityRelatedByLocalityFrom relation
 * @method DepartureQuery rightJoinLocalityRelatedByLocalityFrom($relationAlias = null) Adds a RIGHT JOIN clause to the query using the LocalityRelatedByLocalityFrom relation
 * @method DepartureQuery innerJoinLocalityRelatedByLocalityFrom($relationAlias = null) Adds a INNER JOIN clause to the query using the LocalityRelatedByLocalityFrom relation
 *
 * @method DepartureQuery leftJoinLocalityRelatedByLocalityTo($relationAlias = null) Adds a LEFT JOIN clause to the query using the LocalityRelatedByLocalityTo relation
 * @method DepartureQuery rightJoinLocalityRelatedByLocalityTo($relationAlias = null) Adds a RIGHT JOIN clause to the query using the LocalityRelatedByLocalityTo relation
 * @method DepartureQuery innerJoinLocalityRelatedByLocalityTo($relationAlias = null) Adds a INNER JOIN clause to the query using the LocalityRelatedByLocalityTo relation
 *
 * @method DepartureQuery leftJoinBooking($relationAlias = null) Adds a LEFT JOIN clause to the query using the Booking relation
 * @method DepartureQuery rightJoinBooking($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Booking relation
 * @method DepartureQuery innerJoinBooking($relationAlias = null) Adds a INNER JOIN clause to the query using the Booking relation
 *
 * @method DepartureQuery leftJoinPaymentMethod($relationAlias = null) Adds a LEFT JOIN clause to the query using the PaymentMethod relation
 * @method DepartureQuery rightJoinPaymentMethod($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PaymentMethod relation
 * @method DepartureQuery innerJoinPaymentMethod($relationAlias = null) Adds a INNER JOIN clause to the query using the PaymentMethod relation
 *
 * @method DepartureQuery leftJoinsfGuardUser($relationAlias = null) Adds a LEFT JOIN clause to the query using the sfGuardUser relation
 * @method DepartureQuery rightJoinsfGuardUser($relationAlias = null) Adds a RIGHT JOIN clause to the query using the sfGuardUser relation
 * @method DepartureQuery innerJoinsfGuardUser($relationAlias = null) Adds a INNER JOIN clause to the query using the sfGuardUser relation
 *
 * @method DepartureQuery leftJoinVehicle($relationAlias = null) Adds a LEFT JOIN clause to the query using the Vehicle relation
 * @method DepartureQuery rightJoinVehicle($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Vehicle relation
 * @method DepartureQuery innerJoinVehicle($relationAlias = null) Adds a INNER JOIN clause to the query using the Vehicle relation
 *
 * @method DepartureQuery leftJoinDepartureVersion($relationAlias = null) Adds a LEFT JOIN clause to the query using the DepartureVersion relation
 * @method DepartureQuery rightJoinDepartureVersion($relationAlias = null) Adds a RIGHT JOIN clause to the query using the DepartureVersion relation
 * @method DepartureQuery innerJoinDepartureVersion($relationAlias = null) Adds a INNER JOIN clause to the query using the DepartureVersion relation
 *
 * @method Departure findOne(PropelPDO $con = null) Return the first Departure matching the query
 * @method Departure findOneOrCreate(PropelPDO $con = null) Return the first Departure matching the query, or a new Departure object populated from the query conditions when no match is found
 *
 * @method Departure findOneById(int $id) Return the first Departure filtered by the id column
 * @method Departure findOneByBookingId(int $booking_id) Return the first Departure filtered by the booking_id column
 * @method Departure findOneByDay(string $day) Return the first Departure filtered by the day column
 * @method Departure findOneByHour(string $hour) Return the first Departure filtered by the hour column
 * @method Departure findOneByPickUp(boolean $pick_up) Return the first Departure filtered by the pick_up column
 * @method Departure findOneByDepartureTime(string $departure_time) Return the first Departure filtered by the departure_time column
 * @method Departure findOneByFlight(string $flight) Return the first Departure filtered by the flight column
 * @method Departure findOneByRateCost(string $rate_cost) Return the first Departure filtered by the rate_cost column
 * @method Departure findOneByCalculatedCost(string $calculated_cost) Return the first Departure filtered by the calculated_cost column
 * @method Departure findOneByRateName(string $rate_name) Return the first Departure filtered by the rate_name column
 * @method Departure findOneByNote(string $note) Return the first Departure filtered by the note column
 * @method Departure findOneByPaymentMethodId(int $payment_method_id) Return the first Departure filtered by the payment_method_id column
 * @method Departure findOneByLocalityFrom(int $locality_from) Return the first Departure filtered by the locality_from column
 * @method Departure findOneByLocalityTo(int $locality_to) Return the first Departure filtered by the locality_to column
 * @method Departure findOneByDriverId(int $driver_id) Return the first Departure filtered by the driver_id column
 * @method Departure findOneByVehicleId(int $vehicle_id) Return the first Departure filtered by the vehicle_id column
 * @method Departure findOneByCancelled(boolean $cancelled) Return the first Departure filtered by the cancelled column
 * @method Departure findOneByCreatedAt(string $created_at) Return the first Departure filtered by the created_at column
 * @method Departure findOneByUpdatedAt(string $updated_at) Return the first Departure filtered by the updated_at column
 * @method Departure findOneByVersion(int $version) Return the first Departure filtered by the version column
 * @method Departure findOneByVersionCreatedAt(string $version_created_at) Return the first Departure filtered by the version_created_at column
 * @method Departure findOneByVersionCreatedBy(string $version_created_by) Return the first Departure filtered by the version_created_by column
 *
 * @method array findById(int $id) Return Departure objects filtered by the id column
 * @method array findByBookingId(int $booking_id) Return Departure objects filtered by the booking_id column
 * @method array findByDay(string $day) Return Departure objects filtered by the day column
 * @method array findByHour(string $hour) Return Departure objects filtered by the hour column
 * @method array findByPickUp(boolean $pick_up) Return Departure objects filtered by the pick_up column
 * @method array findByDepartureTime(string $departure_time) Return Departure objects filtered by the departure_time column
 * @method array findByFlight(string $flight) Return Departure objects filtered by the flight column
 * @method array findByRateCost(string $rate_cost) Return Departure objects filtered by the rate_cost column
 * @method array findByCalculatedCost(string $calculated_cost) Return Departure objects filtered by the calculated_cost column
 * @method array findByRateName(string $rate_name) Return Departure objects filtered by the rate_name column
 * @method array findByNote(string $note) Return Departure objects filtered by the note column
 * @method array findByPaymentMethodId(int $payment_method_id) Return Departure objects filtered by the payment_method_id column
 * @method array findByLocalityFrom(int $locality_from) Return Departure objects filtered by the locality_from column
 * @method array findByLocalityTo(int $locality_to) Return Departure objects filtered by the locality_to column
 * @method array findByDriverId(int $driver_id) Return Departure objects filtered by the driver_id column
 * @method array findByVehicleId(int $vehicle_id) Return Departure objects filtered by the vehicle_id column
 * @method array findByCancelled(boolean $cancelled) Return Departure objects filtered by the cancelled column
 * @method array findByCreatedAt(string $created_at) Return Departure objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return Departure objects filtered by the updated_at column
 * @method array findByVersion(int $version) Return Departure objects filtered by the version column
 * @method array findByVersionCreatedAt(string $version_created_at) Return Departure objects filtered by the version_created_at column
 * @method array findByVersionCreatedBy(string $version_created_by) Return Departure objects filtered by the version_created_by column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseDepartureQuery extends ModelCriteria
{
    // archivable behavior
    protected $archiveOnDelete = true;

    /**
     * Initializes internal state of BaseDepartureQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Departure', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new DepartureQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     DepartureQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return DepartureQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof DepartureQuery) {
            return $criteria;
        }
        $query = new DepartureQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Departure|Departure[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = DeparturePeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(DeparturePeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Departure A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `BOOKING_ID`, `DAY`, `HOUR`, `PICK_UP`, `DEPARTURE_TIME`, `FLIGHT`, `RATE_COST`, `CALCULATED_COST`, `RATE_NAME`, `NOTE`, `PAYMENT_METHOD_ID`, `LOCALITY_FROM`, `LOCALITY_TO`, `DRIVER_ID`, `VEHICLE_ID`, `CANCELLED`, `CREATED_AT`, `UPDATED_AT`, `VERSION`, `VERSION_CREATED_AT`, `VERSION_CREATED_BY` FROM `departure` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Departure();
            $obj->hydrate($row);
            DeparturePeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Departure|Departure[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Departure[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(DeparturePeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(DeparturePeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(DeparturePeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the booking_id column
     *
     * Example usage:
     * <code>
     * $query->filterByBookingId(1234); // WHERE booking_id = 1234
     * $query->filterByBookingId(array(12, 34)); // WHERE booking_id IN (12, 34)
     * $query->filterByBookingId(array('min' => 12)); // WHERE booking_id > 12
     * </code>
     *
     * @see       filterByBooking()
     *
     * @param     mixed $bookingId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByBookingId($bookingId = null, $comparison = null)
    {
        if (is_array($bookingId)) {
            $useMinMax = false;
            if (isset($bookingId['min'])) {
                $this->addUsingAlias(DeparturePeer::BOOKING_ID, $bookingId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($bookingId['max'])) {
                $this->addUsingAlias(DeparturePeer::BOOKING_ID, $bookingId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DeparturePeer::BOOKING_ID, $bookingId, $comparison);
    }

    /**
     * Filter the query on the day column
     *
     * Example usage:
     * <code>
     * $query->filterByDay('2011-03-14'); // WHERE day = '2011-03-14'
     * $query->filterByDay('now'); // WHERE day = '2011-03-14'
     * $query->filterByDay(array('max' => 'yesterday')); // WHERE day > '2011-03-13'
     * </code>
     *
     * @param     mixed $day The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByDay($day = null, $comparison = null)
    {
        if (is_array($day)) {
            $useMinMax = false;
            if (isset($day['min'])) {
                $this->addUsingAlias(DeparturePeer::DAY, $day['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($day['max'])) {
                $this->addUsingAlias(DeparturePeer::DAY, $day['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DeparturePeer::DAY, $day, $comparison);
    }

    /**
     * Filter the query on the hour column
     *
     * Example usage:
     * <code>
     * $query->filterByHour('2011-03-14'); // WHERE hour = '2011-03-14'
     * $query->filterByHour('now'); // WHERE hour = '2011-03-14'
     * $query->filterByHour(array('max' => 'yesterday')); // WHERE hour > '2011-03-13'
     * </code>
     *
     * @param     mixed $hour The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByHour($hour = null, $comparison = null)
    {
        if (is_array($hour)) {
            $useMinMax = false;
            if (isset($hour['min'])) {
                $this->addUsingAlias(DeparturePeer::HOUR, $hour['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($hour['max'])) {
                $this->addUsingAlias(DeparturePeer::HOUR, $hour['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DeparturePeer::HOUR, $hour, $comparison);
    }

    /**
     * Filter the query on the pick_up column
     *
     * Example usage:
     * <code>
     * $query->filterByPickUp(true); // WHERE pick_up = true
     * $query->filterByPickUp('yes'); // WHERE pick_up = true
     * </code>
     *
     * @param     boolean|string $pickUp The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByPickUp($pickUp = null, $comparison = null)
    {
        if (is_string($pickUp)) {
            $pick_up = in_array(strtolower($pickUp), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(DeparturePeer::PICK_UP, $pickUp, $comparison);
    }

    /**
     * Filter the query on the departure_time column
     *
     * Example usage:
     * <code>
     * $query->filterByDepartureTime('2011-03-14'); // WHERE departure_time = '2011-03-14'
     * $query->filterByDepartureTime('now'); // WHERE departure_time = '2011-03-14'
     * $query->filterByDepartureTime(array('max' => 'yesterday')); // WHERE departure_time > '2011-03-13'
     * </code>
     *
     * @param     mixed $departureTime The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByDepartureTime($departureTime = null, $comparison = null)
    {
        if (is_array($departureTime)) {
            $useMinMax = false;
            if (isset($departureTime['min'])) {
                $this->addUsingAlias(DeparturePeer::DEPARTURE_TIME, $departureTime['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($departureTime['max'])) {
                $this->addUsingAlias(DeparturePeer::DEPARTURE_TIME, $departureTime['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DeparturePeer::DEPARTURE_TIME, $departureTime, $comparison);
    }

    /**
     * Filter the query on the flight column
     *
     * Example usage:
     * <code>
     * $query->filterByFlight('fooValue');   // WHERE flight = 'fooValue'
     * $query->filterByFlight('%fooValue%'); // WHERE flight LIKE '%fooValue%'
     * </code>
     *
     * @param     string $flight The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByFlight($flight = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($flight)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $flight)) {
                $flight = str_replace('*', '%', $flight);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(DeparturePeer::FLIGHT, $flight, $comparison);
    }

    /**
     * Filter the query on the rate_cost column
     *
     * Example usage:
     * <code>
     * $query->filterByRateCost(1234); // WHERE rate_cost = 1234
     * $query->filterByRateCost(array(12, 34)); // WHERE rate_cost IN (12, 34)
     * $query->filterByRateCost(array('min' => 12)); // WHERE rate_cost > 12
     * </code>
     *
     * @param     mixed $rateCost The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByRateCost($rateCost = null, $comparison = null)
    {
        if (is_array($rateCost)) {
            $useMinMax = false;
            if (isset($rateCost['min'])) {
                $this->addUsingAlias(DeparturePeer::RATE_COST, $rateCost['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($rateCost['max'])) {
                $this->addUsingAlias(DeparturePeer::RATE_COST, $rateCost['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DeparturePeer::RATE_COST, $rateCost, $comparison);
    }

    /**
     * Filter the query on the calculated_cost column
     *
     * Example usage:
     * <code>
     * $query->filterByCalculatedCost(1234); // WHERE calculated_cost = 1234
     * $query->filterByCalculatedCost(array(12, 34)); // WHERE calculated_cost IN (12, 34)
     * $query->filterByCalculatedCost(array('min' => 12)); // WHERE calculated_cost > 12
     * </code>
     *
     * @param     mixed $calculatedCost The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByCalculatedCost($calculatedCost = null, $comparison = null)
    {
        if (is_array($calculatedCost)) {
            $useMinMax = false;
            if (isset($calculatedCost['min'])) {
                $this->addUsingAlias(DeparturePeer::CALCULATED_COST, $calculatedCost['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($calculatedCost['max'])) {
                $this->addUsingAlias(DeparturePeer::CALCULATED_COST, $calculatedCost['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DeparturePeer::CALCULATED_COST, $calculatedCost, $comparison);
    }

    /**
     * Filter the query on the rate_name column
     *
     * Example usage:
     * <code>
     * $query->filterByRateName('fooValue');   // WHERE rate_name = 'fooValue'
     * $query->filterByRateName('%fooValue%'); // WHERE rate_name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $rateName The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByRateName($rateName = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($rateName)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $rateName)) {
                $rateName = str_replace('*', '%', $rateName);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(DeparturePeer::RATE_NAME, $rateName, $comparison);
    }

    /**
     * Filter the query on the note column
     *
     * Example usage:
     * <code>
     * $query->filterByNote('fooValue');   // WHERE note = 'fooValue'
     * $query->filterByNote('%fooValue%'); // WHERE note LIKE '%fooValue%'
     * </code>
     *
     * @param     string $note The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByNote($note = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($note)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $note)) {
                $note = str_replace('*', '%', $note);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(DeparturePeer::NOTE, $note, $comparison);
    }

    /**
     * Filter the query on the payment_method_id column
     *
     * Example usage:
     * <code>
     * $query->filterByPaymentMethodId(1234); // WHERE payment_method_id = 1234
     * $query->filterByPaymentMethodId(array(12, 34)); // WHERE payment_method_id IN (12, 34)
     * $query->filterByPaymentMethodId(array('min' => 12)); // WHERE payment_method_id > 12
     * </code>
     *
     * @see       filterByPaymentMethod()
     *
     * @param     mixed $paymentMethodId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByPaymentMethodId($paymentMethodId = null, $comparison = null)
    {
        if (is_array($paymentMethodId)) {
            $useMinMax = false;
            if (isset($paymentMethodId['min'])) {
                $this->addUsingAlias(DeparturePeer::PAYMENT_METHOD_ID, $paymentMethodId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($paymentMethodId['max'])) {
                $this->addUsingAlias(DeparturePeer::PAYMENT_METHOD_ID, $paymentMethodId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DeparturePeer::PAYMENT_METHOD_ID, $paymentMethodId, $comparison);
    }

    /**
     * Filter the query on the locality_from column
     *
     * Example usage:
     * <code>
     * $query->filterByLocalityFrom(1234); // WHERE locality_from = 1234
     * $query->filterByLocalityFrom(array(12, 34)); // WHERE locality_from IN (12, 34)
     * $query->filterByLocalityFrom(array('min' => 12)); // WHERE locality_from > 12
     * </code>
     *
     * @see       filterByLocalityRelatedByLocalityFrom()
     *
     * @param     mixed $localityFrom The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByLocalityFrom($localityFrom = null, $comparison = null)
    {
        if (is_array($localityFrom)) {
            $useMinMax = false;
            if (isset($localityFrom['min'])) {
                $this->addUsingAlias(DeparturePeer::LOCALITY_FROM, $localityFrom['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($localityFrom['max'])) {
                $this->addUsingAlias(DeparturePeer::LOCALITY_FROM, $localityFrom['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DeparturePeer::LOCALITY_FROM, $localityFrom, $comparison);
    }

    /**
     * Filter the query on the locality_to column
     *
     * Example usage:
     * <code>
     * $query->filterByLocalityTo(1234); // WHERE locality_to = 1234
     * $query->filterByLocalityTo(array(12, 34)); // WHERE locality_to IN (12, 34)
     * $query->filterByLocalityTo(array('min' => 12)); // WHERE locality_to > 12
     * </code>
     *
     * @see       filterByLocalityRelatedByLocalityTo()
     *
     * @param     mixed $localityTo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByLocalityTo($localityTo = null, $comparison = null)
    {
        if (is_array($localityTo)) {
            $useMinMax = false;
            if (isset($localityTo['min'])) {
                $this->addUsingAlias(DeparturePeer::LOCALITY_TO, $localityTo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($localityTo['max'])) {
                $this->addUsingAlias(DeparturePeer::LOCALITY_TO, $localityTo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DeparturePeer::LOCALITY_TO, $localityTo, $comparison);
    }

    /**
     * Filter the query on the driver_id column
     *
     * Example usage:
     * <code>
     * $query->filterByDriverId(1234); // WHERE driver_id = 1234
     * $query->filterByDriverId(array(12, 34)); // WHERE driver_id IN (12, 34)
     * $query->filterByDriverId(array('min' => 12)); // WHERE driver_id > 12
     * </code>
     *
     * @see       filterBysfGuardUser()
     *
     * @param     mixed $driverId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByDriverId($driverId = null, $comparison = null)
    {
        if (is_array($driverId)) {
            $useMinMax = false;
            if (isset($driverId['min'])) {
                $this->addUsingAlias(DeparturePeer::DRIVER_ID, $driverId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($driverId['max'])) {
                $this->addUsingAlias(DeparturePeer::DRIVER_ID, $driverId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DeparturePeer::DRIVER_ID, $driverId, $comparison);
    }

    /**
     * Filter the query on the vehicle_id column
     *
     * Example usage:
     * <code>
     * $query->filterByVehicleId(1234); // WHERE vehicle_id = 1234
     * $query->filterByVehicleId(array(12, 34)); // WHERE vehicle_id IN (12, 34)
     * $query->filterByVehicleId(array('min' => 12)); // WHERE vehicle_id > 12
     * </code>
     *
     * @see       filterByVehicle()
     *
     * @param     mixed $vehicleId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByVehicleId($vehicleId = null, $comparison = null)
    {
        if (is_array($vehicleId)) {
            $useMinMax = false;
            if (isset($vehicleId['min'])) {
                $this->addUsingAlias(DeparturePeer::VEHICLE_ID, $vehicleId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($vehicleId['max'])) {
                $this->addUsingAlias(DeparturePeer::VEHICLE_ID, $vehicleId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DeparturePeer::VEHICLE_ID, $vehicleId, $comparison);
    }

    /**
     * Filter the query on the cancelled column
     *
     * Example usage:
     * <code>
     * $query->filterByCancelled(true); // WHERE cancelled = true
     * $query->filterByCancelled('yes'); // WHERE cancelled = true
     * </code>
     *
     * @param     boolean|string $cancelled The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByCancelled($cancelled = null, $comparison = null)
    {
        if (is_string($cancelled)) {
            $cancelled = in_array(strtolower($cancelled), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(DeparturePeer::CANCELLED, $cancelled, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(DeparturePeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(DeparturePeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DeparturePeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(DeparturePeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(DeparturePeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DeparturePeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the version column
     *
     * Example usage:
     * <code>
     * $query->filterByVersion(1234); // WHERE version = 1234
     * $query->filterByVersion(array(12, 34)); // WHERE version IN (12, 34)
     * $query->filterByVersion(array('min' => 12)); // WHERE version > 12
     * </code>
     *
     * @param     mixed $version The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByVersion($version = null, $comparison = null)
    {
        if (is_array($version)) {
            $useMinMax = false;
            if (isset($version['min'])) {
                $this->addUsingAlias(DeparturePeer::VERSION, $version['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($version['max'])) {
                $this->addUsingAlias(DeparturePeer::VERSION, $version['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DeparturePeer::VERSION, $version, $comparison);
    }

    /**
     * Filter the query on the version_created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByVersionCreatedAt('2011-03-14'); // WHERE version_created_at = '2011-03-14'
     * $query->filterByVersionCreatedAt('now'); // WHERE version_created_at = '2011-03-14'
     * $query->filterByVersionCreatedAt(array('max' => 'yesterday')); // WHERE version_created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $versionCreatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByVersionCreatedAt($versionCreatedAt = null, $comparison = null)
    {
        if (is_array($versionCreatedAt)) {
            $useMinMax = false;
            if (isset($versionCreatedAt['min'])) {
                $this->addUsingAlias(DeparturePeer::VERSION_CREATED_AT, $versionCreatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($versionCreatedAt['max'])) {
                $this->addUsingAlias(DeparturePeer::VERSION_CREATED_AT, $versionCreatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DeparturePeer::VERSION_CREATED_AT, $versionCreatedAt, $comparison);
    }

    /**
     * Filter the query on the version_created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByVersionCreatedBy('fooValue');   // WHERE version_created_by = 'fooValue'
     * $query->filterByVersionCreatedBy('%fooValue%'); // WHERE version_created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $versionCreatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function filterByVersionCreatedBy($versionCreatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($versionCreatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $versionCreatedBy)) {
                $versionCreatedBy = str_replace('*', '%', $versionCreatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(DeparturePeer::VERSION_CREATED_BY, $versionCreatedBy, $comparison);
    }

    /**
     * Filter the query by a related Locality object
     *
     * @param   Locality|PropelObjectCollection $locality The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   DepartureQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByLocalityRelatedByLocalityFrom($locality, $comparison = null)
    {
        if ($locality instanceof Locality) {
            return $this
                ->addUsingAlias(DeparturePeer::LOCALITY_FROM, $locality->getId(), $comparison);
        } elseif ($locality instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(DeparturePeer::LOCALITY_FROM, $locality->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByLocalityRelatedByLocalityFrom() only accepts arguments of type Locality or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the LocalityRelatedByLocalityFrom relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function joinLocalityRelatedByLocalityFrom($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('LocalityRelatedByLocalityFrom');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'LocalityRelatedByLocalityFrom');
        }

        return $this;
    }

    /**
     * Use the LocalityRelatedByLocalityFrom relation Locality object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   LocalityQuery A secondary query class using the current class as primary query
     */
    public function useLocalityRelatedByLocalityFromQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinLocalityRelatedByLocalityFrom($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'LocalityRelatedByLocalityFrom', 'LocalityQuery');
    }

    /**
     * Filter the query by a related Locality object
     *
     * @param   Locality|PropelObjectCollection $locality The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   DepartureQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByLocalityRelatedByLocalityTo($locality, $comparison = null)
    {
        if ($locality instanceof Locality) {
            return $this
                ->addUsingAlias(DeparturePeer::LOCALITY_TO, $locality->getId(), $comparison);
        } elseif ($locality instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(DeparturePeer::LOCALITY_TO, $locality->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByLocalityRelatedByLocalityTo() only accepts arguments of type Locality or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the LocalityRelatedByLocalityTo relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function joinLocalityRelatedByLocalityTo($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('LocalityRelatedByLocalityTo');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'LocalityRelatedByLocalityTo');
        }

        return $this;
    }

    /**
     * Use the LocalityRelatedByLocalityTo relation Locality object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   LocalityQuery A secondary query class using the current class as primary query
     */
    public function useLocalityRelatedByLocalityToQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinLocalityRelatedByLocalityTo($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'LocalityRelatedByLocalityTo', 'LocalityQuery');
    }

    /**
     * Filter the query by a related Booking object
     *
     * @param   Booking|PropelObjectCollection $booking The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   DepartureQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByBooking($booking, $comparison = null)
    {
        if ($booking instanceof Booking) {
            return $this
                ->addUsingAlias(DeparturePeer::BOOKING_ID, $booking->getId(), $comparison);
        } elseif ($booking instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(DeparturePeer::BOOKING_ID, $booking->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByBooking() only accepts arguments of type Booking or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Booking relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function joinBooking($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Booking');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Booking');
        }

        return $this;
    }

    /**
     * Use the Booking relation Booking object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   BookingQuery A secondary query class using the current class as primary query
     */
    public function useBookingQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinBooking($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Booking', 'BookingQuery');
    }

    /**
     * Filter the query by a related PaymentMethod object
     *
     * @param   PaymentMethod|PropelObjectCollection $paymentMethod The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   DepartureQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByPaymentMethod($paymentMethod, $comparison = null)
    {
        if ($paymentMethod instanceof PaymentMethod) {
            return $this
                ->addUsingAlias(DeparturePeer::PAYMENT_METHOD_ID, $paymentMethod->getId(), $comparison);
        } elseif ($paymentMethod instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(DeparturePeer::PAYMENT_METHOD_ID, $paymentMethod->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByPaymentMethod() only accepts arguments of type PaymentMethod or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the PaymentMethod relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function joinPaymentMethod($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('PaymentMethod');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'PaymentMethod');
        }

        return $this;
    }

    /**
     * Use the PaymentMethod relation PaymentMethod object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   PaymentMethodQuery A secondary query class using the current class as primary query
     */
    public function usePaymentMethodQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinPaymentMethod($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'PaymentMethod', 'PaymentMethodQuery');
    }

    /**
     * Filter the query by a related sfGuardUser object
     *
     * @param   sfGuardUser|PropelObjectCollection $sfGuardUser The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   DepartureQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBysfGuardUser($sfGuardUser, $comparison = null)
    {
        if ($sfGuardUser instanceof sfGuardUser) {
            return $this
                ->addUsingAlias(DeparturePeer::DRIVER_ID, $sfGuardUser->getId(), $comparison);
        } elseif ($sfGuardUser instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(DeparturePeer::DRIVER_ID, $sfGuardUser->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBysfGuardUser() only accepts arguments of type sfGuardUser or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the sfGuardUser relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function joinsfGuardUser($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('sfGuardUser');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'sfGuardUser');
        }

        return $this;
    }

    /**
     * Use the sfGuardUser relation sfGuardUser object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   sfGuardUserQuery A secondary query class using the current class as primary query
     */
    public function usesfGuardUserQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinsfGuardUser($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'sfGuardUser', 'sfGuardUserQuery');
    }

    /**
     * Filter the query by a related Vehicle object
     *
     * @param   Vehicle|PropelObjectCollection $vehicle The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   DepartureQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByVehicle($vehicle, $comparison = null)
    {
        if ($vehicle instanceof Vehicle) {
            return $this
                ->addUsingAlias(DeparturePeer::VEHICLE_ID, $vehicle->getId(), $comparison);
        } elseif ($vehicle instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(DeparturePeer::VEHICLE_ID, $vehicle->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByVehicle() only accepts arguments of type Vehicle or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Vehicle relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function joinVehicle($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Vehicle');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Vehicle');
        }

        return $this;
    }

    /**
     * Use the Vehicle relation Vehicle object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   VehicleQuery A secondary query class using the current class as primary query
     */
    public function useVehicleQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinVehicle($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Vehicle', 'VehicleQuery');
    }

    /**
     * Filter the query by a related DepartureVersion object
     *
     * @param   DepartureVersion|PropelObjectCollection $departureVersion  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   DepartureQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByDepartureVersion($departureVersion, $comparison = null)
    {
        if ($departureVersion instanceof DepartureVersion) {
            return $this
                ->addUsingAlias(DeparturePeer::ID, $departureVersion->getId(), $comparison);
        } elseif ($departureVersion instanceof PropelObjectCollection) {
            return $this
                ->useDepartureVersionQuery()
                ->filterByPrimaryKeys($departureVersion->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByDepartureVersion() only accepts arguments of type DepartureVersion or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the DepartureVersion relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function joinDepartureVersion($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('DepartureVersion');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'DepartureVersion');
        }

        return $this;
    }

    /**
     * Use the DepartureVersion relation DepartureVersion object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   DepartureVersionQuery A secondary query class using the current class as primary query
     */
    public function useDepartureVersionQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinDepartureVersion($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'DepartureVersion', 'DepartureVersionQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Departure $departure Object to remove from the list of results
     *
     * @return DepartureQuery The current query, for fluid interface
     */
    public function prune($departure = null)
    {
        if ($departure) {
            $this->addUsingAlias(DeparturePeer::ID, $departure->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

    /**
     * Code to execute before every DELETE statement
     *
     * @param     PropelPDO $con The connection object used by the query
     */
    protected function basePreDelete(PropelPDO $con)
    {
        // archivable behavior

        if ($this->archiveOnDelete) {
            $this->archive($con);
        } else {
            $this->archiveOnDelete = true;
        }


        return $this->preDelete($con);
    }

    // Timestampable behavior

    /**
     * Filter by the latest updated
     *
     * @param      int $nbDays Maximum age of the latest update in days
     *
     * @return     DepartureQuery The current query, for fluid interface
     */
    public function recentlyUpdated($nbDays = 7)
    {
        return $this->addUsingAlias(DeparturePeer::UPDATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
    }

    /**
     * Order by update date desc
     *
     * @return     DepartureQuery The current query, for fluid interface
     */
    public function lastUpdatedFirst()
    {
        return $this->addDescendingOrderByColumn(DeparturePeer::UPDATED_AT);
    }

    /**
     * Order by update date asc
     *
     * @return     DepartureQuery The current query, for fluid interface
     */
    public function firstUpdatedFirst()
    {
        return $this->addAscendingOrderByColumn(DeparturePeer::UPDATED_AT);
    }

    /**
     * Filter by the latest created
     *
     * @param      int $nbDays Maximum age of in days
     *
     * @return     DepartureQuery The current query, for fluid interface
     */
    public function recentlyCreated($nbDays = 7)
    {
        return $this->addUsingAlias(DeparturePeer::CREATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
    }

    /**
     * Order by create date desc
     *
     * @return     DepartureQuery The current query, for fluid interface
     */
    public function lastCreatedFirst()
    {
        return $this->addDescendingOrderByColumn(DeparturePeer::CREATED_AT);
    }

    /**
     * Order by create date asc
     *
     * @return     DepartureQuery The current query, for fluid interface
     */
    public function firstCreatedFirst()
    {
        return $this->addAscendingOrderByColumn(DeparturePeer::CREATED_AT);
    }
    // archivable behavior

    /**
     * Copy the data of the objects satisfying the query into DepartureArchive archive objects.
     * The archived objects are then saved.
     * If any of the objects has already been archived, the archived object
     * is updated and not duplicated.
     * Warning: This termination methods issues 2n+1 queries.
     *
     * @param      PropelPDO $con	Connection to use.
     * @param      Boolean $useLittleMemory	Whether or not to use PropelOnDemandFormatter to retrieve objects.
     *               Set to false if the identity map matters.
     *               Set to true (default) to use less memory.
     *
     * @return     int the number of archived objects
     * @throws     PropelException
     */
    public function archive($con = null, $useLittleMemory = true)
    {
        $totalArchivedObjects = 0;
        $criteria = clone $this;
        // prepare the query
        $criteria->setWith(array());
        if ($useLittleMemory) {
            $criteria->setFormatter(ModelCriteria::FORMAT_ON_DEMAND);
        }
        if ($con === null) {
            $con = Propel::getConnection(DeparturePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }
        $con->beginTransaction();
        try {
            // archive all results one by one
            foreach ($criteria->find($con) as $object) {
                $object->archive($con);
                $totalArchivedObjects++;
            }
            $con->commit();
        } catch (PropelException $e) {
            $con->rollBack();
            throw $e;
        }

        return $totalArchivedObjects;
    }

    /**
     * Enable/disable auto-archiving on delete for the next query.
     *
     * @param boolean $archiveOnDelete True if the query must archive deleted objects, false otherwise.
     */
    public function setArchiveOnDelete($archiveOnDelete)
    {
        $this->archiveOnDelete = $archiveOnDelete;
    }

    /**
     * Delete records matching the current query without archiving them.
     *
     * @param      PropelPDO $con	Connection to use.
     *
     * @return integer the number of deleted rows
     */
    public function deleteWithoutArchive($con = null)
    {
        $this->archiveOnDelete = false;

        return $this->delete($con);
    }

    /**
     * Delete all records without archiving them.
     *
     * @param      PropelPDO $con	Connection to use.
     *
     * @return integer the number of deleted rows
     */
    public function deleteAllWithoutArchive($con = null)
    {
        $this->archiveOnDelete = false;

        return $this->deleteAll($con);
    }

}
