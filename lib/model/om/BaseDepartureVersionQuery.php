<?php


/**
 * Base class that represents a query for the 'departure_version' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Mon Nov 17 17:31:38 2014
 *
 * @method DepartureVersionQuery orderById($order = Criteria::ASC) Order by the id column
 * @method DepartureVersionQuery orderByBookingId($order = Criteria::ASC) Order by the booking_id column
 * @method DepartureVersionQuery orderByDay($order = Criteria::ASC) Order by the day column
 * @method DepartureVersionQuery orderByHour($order = Criteria::ASC) Order by the hour column
 * @method DepartureVersionQuery orderByPickUp($order = Criteria::ASC) Order by the pick_up column
 * @method DepartureVersionQuery orderByDepartureTime($order = Criteria::ASC) Order by the departure_time column
 * @method DepartureVersionQuery orderByFlight($order = Criteria::ASC) Order by the flight column
 * @method DepartureVersionQuery orderByRateCost($order = Criteria::ASC) Order by the rate_cost column
 * @method DepartureVersionQuery orderByCalculatedCost($order = Criteria::ASC) Order by the calculated_cost column
 * @method DepartureVersionQuery orderByRateName($order = Criteria::ASC) Order by the rate_name column
 * @method DepartureVersionQuery orderByNote($order = Criteria::ASC) Order by the note column
 * @method DepartureVersionQuery orderByPaymentMethodId($order = Criteria::ASC) Order by the payment_method_id column
 * @method DepartureVersionQuery orderByLocalityFrom($order = Criteria::ASC) Order by the locality_from column
 * @method DepartureVersionQuery orderByLocalityTo($order = Criteria::ASC) Order by the locality_to column
 * @method DepartureVersionQuery orderByDriverId($order = Criteria::ASC) Order by the driver_id column
 * @method DepartureVersionQuery orderByVehicleId($order = Criteria::ASC) Order by the vehicle_id column
 * @method DepartureVersionQuery orderByCancelled($order = Criteria::ASC) Order by the cancelled column
 * @method DepartureVersionQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method DepartureVersionQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method DepartureVersionQuery orderByVersion($order = Criteria::ASC) Order by the version column
 * @method DepartureVersionQuery orderByVersionCreatedAt($order = Criteria::ASC) Order by the version_created_at column
 * @method DepartureVersionQuery orderByVersionCreatedBy($order = Criteria::ASC) Order by the version_created_by column
 * @method DepartureVersionQuery orderByBookingIdVersion($order = Criteria::ASC) Order by the booking_id_version column
 *
 * @method DepartureVersionQuery groupById() Group by the id column
 * @method DepartureVersionQuery groupByBookingId() Group by the booking_id column
 * @method DepartureVersionQuery groupByDay() Group by the day column
 * @method DepartureVersionQuery groupByHour() Group by the hour column
 * @method DepartureVersionQuery groupByPickUp() Group by the pick_up column
 * @method DepartureVersionQuery groupByDepartureTime() Group by the departure_time column
 * @method DepartureVersionQuery groupByFlight() Group by the flight column
 * @method DepartureVersionQuery groupByRateCost() Group by the rate_cost column
 * @method DepartureVersionQuery groupByCalculatedCost() Group by the calculated_cost column
 * @method DepartureVersionQuery groupByRateName() Group by the rate_name column
 * @method DepartureVersionQuery groupByNote() Group by the note column
 * @method DepartureVersionQuery groupByPaymentMethodId() Group by the payment_method_id column
 * @method DepartureVersionQuery groupByLocalityFrom() Group by the locality_from column
 * @method DepartureVersionQuery groupByLocalityTo() Group by the locality_to column
 * @method DepartureVersionQuery groupByDriverId() Group by the driver_id column
 * @method DepartureVersionQuery groupByVehicleId() Group by the vehicle_id column
 * @method DepartureVersionQuery groupByCancelled() Group by the cancelled column
 * @method DepartureVersionQuery groupByCreatedAt() Group by the created_at column
 * @method DepartureVersionQuery groupByUpdatedAt() Group by the updated_at column
 * @method DepartureVersionQuery groupByVersion() Group by the version column
 * @method DepartureVersionQuery groupByVersionCreatedAt() Group by the version_created_at column
 * @method DepartureVersionQuery groupByVersionCreatedBy() Group by the version_created_by column
 * @method DepartureVersionQuery groupByBookingIdVersion() Group by the booking_id_version column
 *
 * @method DepartureVersionQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method DepartureVersionQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method DepartureVersionQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method DepartureVersionQuery leftJoinDeparture($relationAlias = null) Adds a LEFT JOIN clause to the query using the Departure relation
 * @method DepartureVersionQuery rightJoinDeparture($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Departure relation
 * @method DepartureVersionQuery innerJoinDeparture($relationAlias = null) Adds a INNER JOIN clause to the query using the Departure relation
 *
 * @method DepartureVersion findOne(PropelPDO $con = null) Return the first DepartureVersion matching the query
 * @method DepartureVersion findOneOrCreate(PropelPDO $con = null) Return the first DepartureVersion matching the query, or a new DepartureVersion object populated from the query conditions when no match is found
 *
 * @method DepartureVersion findOneById(int $id) Return the first DepartureVersion filtered by the id column
 * @method DepartureVersion findOneByBookingId(int $booking_id) Return the first DepartureVersion filtered by the booking_id column
 * @method DepartureVersion findOneByDay(string $day) Return the first DepartureVersion filtered by the day column
 * @method DepartureVersion findOneByHour(string $hour) Return the first DepartureVersion filtered by the hour column
 * @method DepartureVersion findOneByPickUp(boolean $pick_up) Return the first DepartureVersion filtered by the pick_up column
 * @method DepartureVersion findOneByDepartureTime(string $departure_time) Return the first DepartureVersion filtered by the departure_time column
 * @method DepartureVersion findOneByFlight(string $flight) Return the first DepartureVersion filtered by the flight column
 * @method DepartureVersion findOneByRateCost(string $rate_cost) Return the first DepartureVersion filtered by the rate_cost column
 * @method DepartureVersion findOneByCalculatedCost(string $calculated_cost) Return the first DepartureVersion filtered by the calculated_cost column
 * @method DepartureVersion findOneByRateName(string $rate_name) Return the first DepartureVersion filtered by the rate_name column
 * @method DepartureVersion findOneByNote(string $note) Return the first DepartureVersion filtered by the note column
 * @method DepartureVersion findOneByPaymentMethodId(int $payment_method_id) Return the first DepartureVersion filtered by the payment_method_id column
 * @method DepartureVersion findOneByLocalityFrom(int $locality_from) Return the first DepartureVersion filtered by the locality_from column
 * @method DepartureVersion findOneByLocalityTo(int $locality_to) Return the first DepartureVersion filtered by the locality_to column
 * @method DepartureVersion findOneByDriverId(int $driver_id) Return the first DepartureVersion filtered by the driver_id column
 * @method DepartureVersion findOneByVehicleId(int $vehicle_id) Return the first DepartureVersion filtered by the vehicle_id column
 * @method DepartureVersion findOneByCancelled(boolean $cancelled) Return the first DepartureVersion filtered by the cancelled column
 * @method DepartureVersion findOneByCreatedAt(string $created_at) Return the first DepartureVersion filtered by the created_at column
 * @method DepartureVersion findOneByUpdatedAt(string $updated_at) Return the first DepartureVersion filtered by the updated_at column
 * @method DepartureVersion findOneByVersion(int $version) Return the first DepartureVersion filtered by the version column
 * @method DepartureVersion findOneByVersionCreatedAt(string $version_created_at) Return the first DepartureVersion filtered by the version_created_at column
 * @method DepartureVersion findOneByVersionCreatedBy(string $version_created_by) Return the first DepartureVersion filtered by the version_created_by column
 * @method DepartureVersion findOneByBookingIdVersion(int $booking_id_version) Return the first DepartureVersion filtered by the booking_id_version column
 *
 * @method array findById(int $id) Return DepartureVersion objects filtered by the id column
 * @method array findByBookingId(int $booking_id) Return DepartureVersion objects filtered by the booking_id column
 * @method array findByDay(string $day) Return DepartureVersion objects filtered by the day column
 * @method array findByHour(string $hour) Return DepartureVersion objects filtered by the hour column
 * @method array findByPickUp(boolean $pick_up) Return DepartureVersion objects filtered by the pick_up column
 * @method array findByDepartureTime(string $departure_time) Return DepartureVersion objects filtered by the departure_time column
 * @method array findByFlight(string $flight) Return DepartureVersion objects filtered by the flight column
 * @method array findByRateCost(string $rate_cost) Return DepartureVersion objects filtered by the rate_cost column
 * @method array findByCalculatedCost(string $calculated_cost) Return DepartureVersion objects filtered by the calculated_cost column
 * @method array findByRateName(string $rate_name) Return DepartureVersion objects filtered by the rate_name column
 * @method array findByNote(string $note) Return DepartureVersion objects filtered by the note column
 * @method array findByPaymentMethodId(int $payment_method_id) Return DepartureVersion objects filtered by the payment_method_id column
 * @method array findByLocalityFrom(int $locality_from) Return DepartureVersion objects filtered by the locality_from column
 * @method array findByLocalityTo(int $locality_to) Return DepartureVersion objects filtered by the locality_to column
 * @method array findByDriverId(int $driver_id) Return DepartureVersion objects filtered by the driver_id column
 * @method array findByVehicleId(int $vehicle_id) Return DepartureVersion objects filtered by the vehicle_id column
 * @method array findByCancelled(boolean $cancelled) Return DepartureVersion objects filtered by the cancelled column
 * @method array findByCreatedAt(string $created_at) Return DepartureVersion objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return DepartureVersion objects filtered by the updated_at column
 * @method array findByVersion(int $version) Return DepartureVersion objects filtered by the version column
 * @method array findByVersionCreatedAt(string $version_created_at) Return DepartureVersion objects filtered by the version_created_at column
 * @method array findByVersionCreatedBy(string $version_created_by) Return DepartureVersion objects filtered by the version_created_by column
 * @method array findByBookingIdVersion(int $booking_id_version) Return DepartureVersion objects filtered by the booking_id_version column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseDepartureVersionQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseDepartureVersionQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'DepartureVersion', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new DepartureVersionQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     DepartureVersionQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return DepartureVersionQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof DepartureVersionQuery) {
            return $criteria;
        }
        $query = new DepartureVersionQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj = $c->findPk(array(12, 34), $con);
     * </code>
     *
     * @param array $key Primary key to use for the query
                         A Primary key composition: [$id, $version]
     * @param     PropelPDO $con an optional connection object
     *
     * @return   DepartureVersion|DepartureVersion[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = DepartureVersionPeer::getInstanceFromPool(serialize(array((string) $key[0], (string) $key[1]))))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(DepartureVersionPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   DepartureVersion A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `BOOKING_ID`, `DAY`, `HOUR`, `PICK_UP`, `DEPARTURE_TIME`, `FLIGHT`, `RATE_COST`, `CALCULATED_COST`, `RATE_NAME`, `NOTE`, `PAYMENT_METHOD_ID`, `LOCALITY_FROM`, `LOCALITY_TO`, `DRIVER_ID`, `VEHICLE_ID`, `CANCELLED`, `CREATED_AT`, `UPDATED_AT`, `VERSION`, `VERSION_CREATED_AT`, `VERSION_CREATED_BY`, `BOOKING_ID_VERSION` FROM `departure_version` WHERE `ID` = :p0 AND `VERSION` = :p1';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key[0], PDO::PARAM_INT);
            $stmt->bindValue(':p1', $key[1], PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new DepartureVersion();
            $obj->hydrate($row);
            DepartureVersionPeer::addInstanceToPool($obj, serialize(array((string) $key[0], (string) $key[1])));
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return DepartureVersion|DepartureVersion[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(array(12, 56), array(832, 123), array(123, 456)), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|DepartureVersion[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {
        $this->addUsingAlias(DepartureVersionPeer::ID, $key[0], Criteria::EQUAL);
        $this->addUsingAlias(DepartureVersionPeer::VERSION, $key[1], Criteria::EQUAL);

        return $this;
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {
        if (empty($keys)) {
            return $this->add(null, '1<>1', Criteria::CUSTOM);
        }
        foreach ($keys as $key) {
            $cton0 = $this->getNewCriterion(DepartureVersionPeer::ID, $key[0], Criteria::EQUAL);
            $cton1 = $this->getNewCriterion(DepartureVersionPeer::VERSION, $key[1], Criteria::EQUAL);
            $cton0->addAnd($cton1);
            $this->addOr($cton0);
        }

        return $this;
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @see       filterByDeparture()
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(DepartureVersionPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the booking_id column
     *
     * Example usage:
     * <code>
     * $query->filterByBookingId(1234); // WHERE booking_id = 1234
     * $query->filterByBookingId(array(12, 34)); // WHERE booking_id IN (12, 34)
     * $query->filterByBookingId(array('min' => 12)); // WHERE booking_id > 12
     * </code>
     *
     * @param     mixed $bookingId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByBookingId($bookingId = null, $comparison = null)
    {
        if (is_array($bookingId)) {
            $useMinMax = false;
            if (isset($bookingId['min'])) {
                $this->addUsingAlias(DepartureVersionPeer::BOOKING_ID, $bookingId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($bookingId['max'])) {
                $this->addUsingAlias(DepartureVersionPeer::BOOKING_ID, $bookingId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::BOOKING_ID, $bookingId, $comparison);
    }

    /**
     * Filter the query on the day column
     *
     * Example usage:
     * <code>
     * $query->filterByDay('2011-03-14'); // WHERE day = '2011-03-14'
     * $query->filterByDay('now'); // WHERE day = '2011-03-14'
     * $query->filterByDay(array('max' => 'yesterday')); // WHERE day > '2011-03-13'
     * </code>
     *
     * @param     mixed $day The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByDay($day = null, $comparison = null)
    {
        if (is_array($day)) {
            $useMinMax = false;
            if (isset($day['min'])) {
                $this->addUsingAlias(DepartureVersionPeer::DAY, $day['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($day['max'])) {
                $this->addUsingAlias(DepartureVersionPeer::DAY, $day['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::DAY, $day, $comparison);
    }

    /**
     * Filter the query on the hour column
     *
     * Example usage:
     * <code>
     * $query->filterByHour('2011-03-14'); // WHERE hour = '2011-03-14'
     * $query->filterByHour('now'); // WHERE hour = '2011-03-14'
     * $query->filterByHour(array('max' => 'yesterday')); // WHERE hour > '2011-03-13'
     * </code>
     *
     * @param     mixed $hour The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByHour($hour = null, $comparison = null)
    {
        if (is_array($hour)) {
            $useMinMax = false;
            if (isset($hour['min'])) {
                $this->addUsingAlias(DepartureVersionPeer::HOUR, $hour['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($hour['max'])) {
                $this->addUsingAlias(DepartureVersionPeer::HOUR, $hour['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::HOUR, $hour, $comparison);
    }

    /**
     * Filter the query on the pick_up column
     *
     * Example usage:
     * <code>
     * $query->filterByPickUp(true); // WHERE pick_up = true
     * $query->filterByPickUp('yes'); // WHERE pick_up = true
     * </code>
     *
     * @param     boolean|string $pickUp The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByPickUp($pickUp = null, $comparison = null)
    {
        if (is_string($pickUp)) {
            $pick_up = in_array(strtolower($pickUp), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(DepartureVersionPeer::PICK_UP, $pickUp, $comparison);
    }

    /**
     * Filter the query on the departure_time column
     *
     * Example usage:
     * <code>
     * $query->filterByDepartureTime('2011-03-14'); // WHERE departure_time = '2011-03-14'
     * $query->filterByDepartureTime('now'); // WHERE departure_time = '2011-03-14'
     * $query->filterByDepartureTime(array('max' => 'yesterday')); // WHERE departure_time > '2011-03-13'
     * </code>
     *
     * @param     mixed $departureTime The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByDepartureTime($departureTime = null, $comparison = null)
    {
        if (is_array($departureTime)) {
            $useMinMax = false;
            if (isset($departureTime['min'])) {
                $this->addUsingAlias(DepartureVersionPeer::DEPARTURE_TIME, $departureTime['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($departureTime['max'])) {
                $this->addUsingAlias(DepartureVersionPeer::DEPARTURE_TIME, $departureTime['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::DEPARTURE_TIME, $departureTime, $comparison);
    }

    /**
     * Filter the query on the flight column
     *
     * Example usage:
     * <code>
     * $query->filterByFlight('fooValue');   // WHERE flight = 'fooValue'
     * $query->filterByFlight('%fooValue%'); // WHERE flight LIKE '%fooValue%'
     * </code>
     *
     * @param     string $flight The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByFlight($flight = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($flight)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $flight)) {
                $flight = str_replace('*', '%', $flight);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::FLIGHT, $flight, $comparison);
    }

    /**
     * Filter the query on the rate_cost column
     *
     * Example usage:
     * <code>
     * $query->filterByRateCost(1234); // WHERE rate_cost = 1234
     * $query->filterByRateCost(array(12, 34)); // WHERE rate_cost IN (12, 34)
     * $query->filterByRateCost(array('min' => 12)); // WHERE rate_cost > 12
     * </code>
     *
     * @param     mixed $rateCost The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByRateCost($rateCost = null, $comparison = null)
    {
        if (is_array($rateCost)) {
            $useMinMax = false;
            if (isset($rateCost['min'])) {
                $this->addUsingAlias(DepartureVersionPeer::RATE_COST, $rateCost['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($rateCost['max'])) {
                $this->addUsingAlias(DepartureVersionPeer::RATE_COST, $rateCost['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::RATE_COST, $rateCost, $comparison);
    }

    /**
     * Filter the query on the calculated_cost column
     *
     * Example usage:
     * <code>
     * $query->filterByCalculatedCost(1234); // WHERE calculated_cost = 1234
     * $query->filterByCalculatedCost(array(12, 34)); // WHERE calculated_cost IN (12, 34)
     * $query->filterByCalculatedCost(array('min' => 12)); // WHERE calculated_cost > 12
     * </code>
     *
     * @param     mixed $calculatedCost The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByCalculatedCost($calculatedCost = null, $comparison = null)
    {
        if (is_array($calculatedCost)) {
            $useMinMax = false;
            if (isset($calculatedCost['min'])) {
                $this->addUsingAlias(DepartureVersionPeer::CALCULATED_COST, $calculatedCost['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($calculatedCost['max'])) {
                $this->addUsingAlias(DepartureVersionPeer::CALCULATED_COST, $calculatedCost['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::CALCULATED_COST, $calculatedCost, $comparison);
    }

    /**
     * Filter the query on the rate_name column
     *
     * Example usage:
     * <code>
     * $query->filterByRateName('fooValue');   // WHERE rate_name = 'fooValue'
     * $query->filterByRateName('%fooValue%'); // WHERE rate_name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $rateName The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByRateName($rateName = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($rateName)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $rateName)) {
                $rateName = str_replace('*', '%', $rateName);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::RATE_NAME, $rateName, $comparison);
    }

    /**
     * Filter the query on the note column
     *
     * Example usage:
     * <code>
     * $query->filterByNote('fooValue');   // WHERE note = 'fooValue'
     * $query->filterByNote('%fooValue%'); // WHERE note LIKE '%fooValue%'
     * </code>
     *
     * @param     string $note The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByNote($note = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($note)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $note)) {
                $note = str_replace('*', '%', $note);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::NOTE, $note, $comparison);
    }

    /**
     * Filter the query on the payment_method_id column
     *
     * Example usage:
     * <code>
     * $query->filterByPaymentMethodId(1234); // WHERE payment_method_id = 1234
     * $query->filterByPaymentMethodId(array(12, 34)); // WHERE payment_method_id IN (12, 34)
     * $query->filterByPaymentMethodId(array('min' => 12)); // WHERE payment_method_id > 12
     * </code>
     *
     * @param     mixed $paymentMethodId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByPaymentMethodId($paymentMethodId = null, $comparison = null)
    {
        if (is_array($paymentMethodId)) {
            $useMinMax = false;
            if (isset($paymentMethodId['min'])) {
                $this->addUsingAlias(DepartureVersionPeer::PAYMENT_METHOD_ID, $paymentMethodId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($paymentMethodId['max'])) {
                $this->addUsingAlias(DepartureVersionPeer::PAYMENT_METHOD_ID, $paymentMethodId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::PAYMENT_METHOD_ID, $paymentMethodId, $comparison);
    }

    /**
     * Filter the query on the locality_from column
     *
     * Example usage:
     * <code>
     * $query->filterByLocalityFrom(1234); // WHERE locality_from = 1234
     * $query->filterByLocalityFrom(array(12, 34)); // WHERE locality_from IN (12, 34)
     * $query->filterByLocalityFrom(array('min' => 12)); // WHERE locality_from > 12
     * </code>
     *
     * @param     mixed $localityFrom The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByLocalityFrom($localityFrom = null, $comparison = null)
    {
        if (is_array($localityFrom)) {
            $useMinMax = false;
            if (isset($localityFrom['min'])) {
                $this->addUsingAlias(DepartureVersionPeer::LOCALITY_FROM, $localityFrom['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($localityFrom['max'])) {
                $this->addUsingAlias(DepartureVersionPeer::LOCALITY_FROM, $localityFrom['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::LOCALITY_FROM, $localityFrom, $comparison);
    }

    /**
     * Filter the query on the locality_to column
     *
     * Example usage:
     * <code>
     * $query->filterByLocalityTo(1234); // WHERE locality_to = 1234
     * $query->filterByLocalityTo(array(12, 34)); // WHERE locality_to IN (12, 34)
     * $query->filterByLocalityTo(array('min' => 12)); // WHERE locality_to > 12
     * </code>
     *
     * @param     mixed $localityTo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByLocalityTo($localityTo = null, $comparison = null)
    {
        if (is_array($localityTo)) {
            $useMinMax = false;
            if (isset($localityTo['min'])) {
                $this->addUsingAlias(DepartureVersionPeer::LOCALITY_TO, $localityTo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($localityTo['max'])) {
                $this->addUsingAlias(DepartureVersionPeer::LOCALITY_TO, $localityTo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::LOCALITY_TO, $localityTo, $comparison);
    }

    /**
     * Filter the query on the driver_id column
     *
     * Example usage:
     * <code>
     * $query->filterByDriverId(1234); // WHERE driver_id = 1234
     * $query->filterByDriverId(array(12, 34)); // WHERE driver_id IN (12, 34)
     * $query->filterByDriverId(array('min' => 12)); // WHERE driver_id > 12
     * </code>
     *
     * @param     mixed $driverId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByDriverId($driverId = null, $comparison = null)
    {
        if (is_array($driverId)) {
            $useMinMax = false;
            if (isset($driverId['min'])) {
                $this->addUsingAlias(DepartureVersionPeer::DRIVER_ID, $driverId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($driverId['max'])) {
                $this->addUsingAlias(DepartureVersionPeer::DRIVER_ID, $driverId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::DRIVER_ID, $driverId, $comparison);
    }

    /**
     * Filter the query on the vehicle_id column
     *
     * Example usage:
     * <code>
     * $query->filterByVehicleId(1234); // WHERE vehicle_id = 1234
     * $query->filterByVehicleId(array(12, 34)); // WHERE vehicle_id IN (12, 34)
     * $query->filterByVehicleId(array('min' => 12)); // WHERE vehicle_id > 12
     * </code>
     *
     * @param     mixed $vehicleId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByVehicleId($vehicleId = null, $comparison = null)
    {
        if (is_array($vehicleId)) {
            $useMinMax = false;
            if (isset($vehicleId['min'])) {
                $this->addUsingAlias(DepartureVersionPeer::VEHICLE_ID, $vehicleId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($vehicleId['max'])) {
                $this->addUsingAlias(DepartureVersionPeer::VEHICLE_ID, $vehicleId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::VEHICLE_ID, $vehicleId, $comparison);
    }

    /**
     * Filter the query on the cancelled column
     *
     * Example usage:
     * <code>
     * $query->filterByCancelled(true); // WHERE cancelled = true
     * $query->filterByCancelled('yes'); // WHERE cancelled = true
     * </code>
     *
     * @param     boolean|string $cancelled The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByCancelled($cancelled = null, $comparison = null)
    {
        if (is_string($cancelled)) {
            $cancelled = in_array(strtolower($cancelled), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(DepartureVersionPeer::CANCELLED, $cancelled, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(DepartureVersionPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(DepartureVersionPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(DepartureVersionPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(DepartureVersionPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the version column
     *
     * Example usage:
     * <code>
     * $query->filterByVersion(1234); // WHERE version = 1234
     * $query->filterByVersion(array(12, 34)); // WHERE version IN (12, 34)
     * $query->filterByVersion(array('min' => 12)); // WHERE version > 12
     * </code>
     *
     * @param     mixed $version The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByVersion($version = null, $comparison = null)
    {
        if (is_array($version) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(DepartureVersionPeer::VERSION, $version, $comparison);
    }

    /**
     * Filter the query on the version_created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByVersionCreatedAt('2011-03-14'); // WHERE version_created_at = '2011-03-14'
     * $query->filterByVersionCreatedAt('now'); // WHERE version_created_at = '2011-03-14'
     * $query->filterByVersionCreatedAt(array('max' => 'yesterday')); // WHERE version_created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $versionCreatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByVersionCreatedAt($versionCreatedAt = null, $comparison = null)
    {
        if (is_array($versionCreatedAt)) {
            $useMinMax = false;
            if (isset($versionCreatedAt['min'])) {
                $this->addUsingAlias(DepartureVersionPeer::VERSION_CREATED_AT, $versionCreatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($versionCreatedAt['max'])) {
                $this->addUsingAlias(DepartureVersionPeer::VERSION_CREATED_AT, $versionCreatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::VERSION_CREATED_AT, $versionCreatedAt, $comparison);
    }

    /**
     * Filter the query on the version_created_by column
     *
     * Example usage:
     * <code>
     * $query->filterByVersionCreatedBy('fooValue');   // WHERE version_created_by = 'fooValue'
     * $query->filterByVersionCreatedBy('%fooValue%'); // WHERE version_created_by LIKE '%fooValue%'
     * </code>
     *
     * @param     string $versionCreatedBy The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByVersionCreatedBy($versionCreatedBy = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($versionCreatedBy)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $versionCreatedBy)) {
                $versionCreatedBy = str_replace('*', '%', $versionCreatedBy);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::VERSION_CREATED_BY, $versionCreatedBy, $comparison);
    }

    /**
     * Filter the query on the booking_id_version column
     *
     * Example usage:
     * <code>
     * $query->filterByBookingIdVersion(1234); // WHERE booking_id_version = 1234
     * $query->filterByBookingIdVersion(array(12, 34)); // WHERE booking_id_version IN (12, 34)
     * $query->filterByBookingIdVersion(array('min' => 12)); // WHERE booking_id_version > 12
     * </code>
     *
     * @param     mixed $bookingIdVersion The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function filterByBookingIdVersion($bookingIdVersion = null, $comparison = null)
    {
        if (is_array($bookingIdVersion)) {
            $useMinMax = false;
            if (isset($bookingIdVersion['min'])) {
                $this->addUsingAlias(DepartureVersionPeer::BOOKING_ID_VERSION, $bookingIdVersion['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($bookingIdVersion['max'])) {
                $this->addUsingAlias(DepartureVersionPeer::BOOKING_ID_VERSION, $bookingIdVersion['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(DepartureVersionPeer::BOOKING_ID_VERSION, $bookingIdVersion, $comparison);
    }

    /**
     * Filter the query by a related Departure object
     *
     * @param   Departure|PropelObjectCollection $departure The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   DepartureVersionQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByDeparture($departure, $comparison = null)
    {
        if ($departure instanceof Departure) {
            return $this
                ->addUsingAlias(DepartureVersionPeer::ID, $departure->getId(), $comparison);
        } elseif ($departure instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(DepartureVersionPeer::ID, $departure->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByDeparture() only accepts arguments of type Departure or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Departure relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function joinDeparture($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Departure');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Departure');
        }

        return $this;
    }

    /**
     * Use the Departure relation Departure object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   DepartureQuery A secondary query class using the current class as primary query
     */
    public function useDepartureQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinDeparture($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Departure', 'DepartureQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   DepartureVersion $departureVersion Object to remove from the list of results
     *
     * @return DepartureVersionQuery The current query, for fluid interface
     */
    public function prune($departureVersion = null)
    {
        if ($departureVersion) {
            $this->addCond('pruneCond0', $this->getAliasedColName(DepartureVersionPeer::ID), $departureVersion->getId(), Criteria::NOT_EQUAL);
            $this->addCond('pruneCond1', $this->getAliasedColName(DepartureVersionPeer::VERSION), $departureVersion->getVersion(), Criteria::NOT_EQUAL);
            $this->combine(array('pruneCond0', 'pruneCond1'), Criteria::LOGICAL_OR);
        }

        return $this;
    }

}
