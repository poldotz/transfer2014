<?php


/**
 * Base class that represents a row from the 'tl_tasks' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Mon Nov 17 17:31:37 2014
 *
 * @package    propel.generator.plugins.sfTaskLoggerPlugin.lib.model.om
 */
abstract class BasetlTask extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'tlTaskPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        tlTaskPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the task field.
     * @var        string
     */
    protected $task;

    /**
     * The value for the arguments field.
     * @var        string
     */
    protected $arguments;

    /**
     * The value for the options field.
     * @var        string
     */
    protected $options;

    /**
     * The value for the count_processed field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $count_processed;

    /**
     * The value for the count_not_processed field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $count_not_processed;

    /**
     * The value for the is_running field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $is_running;

    /**
     * The value for the last_id_processed field.
     * @var        int
     */
    protected $last_id_processed;

    /**
     * The value for the started_at field.
     * @var        string
     */
    protected $started_at;

    /**
     * The value for the ended_at field.
     * @var        string
     */
    protected $ended_at;

    /**
     * The value for the is_ok field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $is_ok;

    /**
     * The value for the error_code field.
     * @var        int
     */
    protected $error_code;

    /**
     * The value for the log field.
     * @var        string
     */
    protected $log;

    /**
     * The value for the log_file field.
     * @var        string
     */
    protected $log_file;

    /**
     * The value for the comments field.
     * @var        string
     */
    protected $comments;

    /**
     * The value for the created_at field.
     * @var        string
     */
    protected $created_at;

    /**
     * The value for the updated_at field.
     * @var        string
     */
    protected $updated_at;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->count_processed = 0;
        $this->count_not_processed = 0;
        $this->is_running = false;
        $this->is_ok = false;
    }

    /**
     * Initializes internal state of BasetlTask object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [task] column value.
     * Name of the task
     * @return string
     */
    public function getTask()
    {
        return $this->task;
    }

    /**
     * Get the [arguments] column value.
     * List of arguments
     * @return string
     */
    public function getArguments()
    {
        return $this->arguments;
    }

    /**
     * Get the [options] column value.
     * List of options
     * @return string
     */
    public function getOptions()
    {
        return $this->options;
    }

    /**
     * Get the [count_processed] column value.
     * Count of processed records
     * @return int
     */
    public function getCountProcessed()
    {
        return $this->count_processed;
    }

    /**
     * Get the [count_not_processed] column value.
     * Count of NOT processed records
     * @return int
     */
    public function getCountNotProcessed()
    {
        return $this->count_not_processed;
    }

    /**
     * Get the [is_running] column value.
     * Flat that tells if task is actually runing
     * @return boolean
     */
    public function getIsRunning()
    {
        return $this->is_running;
    }

    /**
     * Get the [last_id_processed] column value.
     * Last record Id fully processed without error
     * @return int
     */
    public function getLastIdProcessed()
    {
        return $this->last_id_processed;
    }

    /**
     * Get the [optionally formatted] temporal [started_at] column value.
     * Process start time
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getStartedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->started_at === null) {
            return null;
        }

        if ($this->started_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->started_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->started_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [ended_at] column value.
     * Process end time
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getEndedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->ended_at === null) {
            return null;
        }

        if ($this->ended_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->ended_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->ended_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [is_ok] column value.
     * Flag that tells if task finished without error
     * @return boolean
     */
    public function getIsOk()
    {
        return $this->is_ok;
    }

    /**
     * Get the [error_code] column value.
     * Error code for success or failure
     * @return int
     */
    public function getErrorCode()
    {
        return $this->error_code;
    }

    /**
     * Get the [log] column value.
     * The full console output of the task
     * @return string
     */
    public function getLog()
    {
        return $this->log;
    }

    /**
     * Get the [log_file] column value.
     * Log file associated to the task
     * @return string
     */
    public function getLogFile()
    {
        return $this->log_file;
    }

    /**
     * Get the [comments] column value.
     * Additional admin comments about the task and its results
     * @return string
     */
    public function getComments()
    {
        return $this->comments;
    }

    /**
     * Get the [optionally formatted] temporal [created_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getCreatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->created_at === null) {
            return null;
        }

        if ($this->created_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->created_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [updated_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getUpdatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->updated_at === null) {
            return null;
        }

        if ($this->updated_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->updated_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return tlTask The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = tlTaskPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [task] column.
     * Name of the task
     * @param string $v new value
     * @return tlTask The current object (for fluent API support)
     */
    public function setTask($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->task !== $v) {
            $this->task = $v;
            $this->modifiedColumns[] = tlTaskPeer::TASK;
        }


        return $this;
    } // setTask()

    /**
     * Set the value of [arguments] column.
     * List of arguments
     * @param string $v new value
     * @return tlTask The current object (for fluent API support)
     */
    public function setArguments($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->arguments !== $v) {
            $this->arguments = $v;
            $this->modifiedColumns[] = tlTaskPeer::ARGUMENTS;
        }


        return $this;
    } // setArguments()

    /**
     * Set the value of [options] column.
     * List of options
     * @param string $v new value
     * @return tlTask The current object (for fluent API support)
     */
    public function setOptions($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->options !== $v) {
            $this->options = $v;
            $this->modifiedColumns[] = tlTaskPeer::OPTIONS;
        }


        return $this;
    } // setOptions()

    /**
     * Set the value of [count_processed] column.
     * Count of processed records
     * @param int $v new value
     * @return tlTask The current object (for fluent API support)
     */
    public function setCountProcessed($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->count_processed !== $v) {
            $this->count_processed = $v;
            $this->modifiedColumns[] = tlTaskPeer::COUNT_PROCESSED;
        }


        return $this;
    } // setCountProcessed()

    /**
     * Set the value of [count_not_processed] column.
     * Count of NOT processed records
     * @param int $v new value
     * @return tlTask The current object (for fluent API support)
     */
    public function setCountNotProcessed($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->count_not_processed !== $v) {
            $this->count_not_processed = $v;
            $this->modifiedColumns[] = tlTaskPeer::COUNT_NOT_PROCESSED;
        }


        return $this;
    } // setCountNotProcessed()

    /**
     * Sets the value of the [is_running] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * Flat that tells if task is actually runing
     * @param boolean|integer|string $v The new value
     * @return tlTask The current object (for fluent API support)
     */
    public function setIsRunning($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->is_running !== $v) {
            $this->is_running = $v;
            $this->modifiedColumns[] = tlTaskPeer::IS_RUNNING;
        }


        return $this;
    } // setIsRunning()

    /**
     * Set the value of [last_id_processed] column.
     * Last record Id fully processed without error
     * @param int $v new value
     * @return tlTask The current object (for fluent API support)
     */
    public function setLastIdProcessed($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->last_id_processed !== $v) {
            $this->last_id_processed = $v;
            $this->modifiedColumns[] = tlTaskPeer::LAST_ID_PROCESSED;
        }


        return $this;
    } // setLastIdProcessed()

    /**
     * Sets the value of [started_at] column to a normalized version of the date/time value specified.
     * Process start time
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return tlTask The current object (for fluent API support)
     */
    public function setStartedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->started_at !== null || $dt !== null) {
            $currentDateAsString = ($this->started_at !== null && $tmpDt = new DateTime($this->started_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->started_at = $newDateAsString;
                $this->modifiedColumns[] = tlTaskPeer::STARTED_AT;
            }
        } // if either are not null


        return $this;
    } // setStartedAt()

    /**
     * Sets the value of [ended_at] column to a normalized version of the date/time value specified.
     * Process end time
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return tlTask The current object (for fluent API support)
     */
    public function setEndedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->ended_at !== null || $dt !== null) {
            $currentDateAsString = ($this->ended_at !== null && $tmpDt = new DateTime($this->ended_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->ended_at = $newDateAsString;
                $this->modifiedColumns[] = tlTaskPeer::ENDED_AT;
            }
        } // if either are not null


        return $this;
    } // setEndedAt()

    /**
     * Sets the value of the [is_ok] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * Flag that tells if task finished without error
     * @param boolean|integer|string $v The new value
     * @return tlTask The current object (for fluent API support)
     */
    public function setIsOk($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->is_ok !== $v) {
            $this->is_ok = $v;
            $this->modifiedColumns[] = tlTaskPeer::IS_OK;
        }


        return $this;
    } // setIsOk()

    /**
     * Set the value of [error_code] column.
     * Error code for success or failure
     * @param int $v new value
     * @return tlTask The current object (for fluent API support)
     */
    public function setErrorCode($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->error_code !== $v) {
            $this->error_code = $v;
            $this->modifiedColumns[] = tlTaskPeer::ERROR_CODE;
        }


        return $this;
    } // setErrorCode()

    /**
     * Set the value of [log] column.
     * The full console output of the task
     * @param string $v new value
     * @return tlTask The current object (for fluent API support)
     */
    public function setLog($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->log !== $v) {
            $this->log = $v;
            $this->modifiedColumns[] = tlTaskPeer::LOG;
        }


        return $this;
    } // setLog()

    /**
     * Set the value of [log_file] column.
     * Log file associated to the task
     * @param string $v new value
     * @return tlTask The current object (for fluent API support)
     */
    public function setLogFile($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->log_file !== $v) {
            $this->log_file = $v;
            $this->modifiedColumns[] = tlTaskPeer::LOG_FILE;
        }


        return $this;
    } // setLogFile()

    /**
     * Set the value of [comments] column.
     * Additional admin comments about the task and its results
     * @param string $v new value
     * @return tlTask The current object (for fluent API support)
     */
    public function setComments($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->comments !== $v) {
            $this->comments = $v;
            $this->modifiedColumns[] = tlTaskPeer::COMMENTS;
        }


        return $this;
    } // setComments()

    /**
     * Sets the value of [created_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return tlTask The current object (for fluent API support)
     */
    public function setCreatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->created_at !== null || $dt !== null) {
            $currentDateAsString = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->created_at = $newDateAsString;
                $this->modifiedColumns[] = tlTaskPeer::CREATED_AT;
            }
        } // if either are not null


        return $this;
    } // setCreatedAt()

    /**
     * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return tlTask The current object (for fluent API support)
     */
    public function setUpdatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->updated_at !== null || $dt !== null) {
            $currentDateAsString = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->updated_at = $newDateAsString;
                $this->modifiedColumns[] = tlTaskPeer::UPDATED_AT;
            }
        } // if either are not null


        return $this;
    } // setUpdatedAt()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->count_processed !== 0) {
                return false;
            }

            if ($this->count_not_processed !== 0) {
                return false;
            }

            if ($this->is_running !== false) {
                return false;
            }

            if ($this->is_ok !== false) {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->task = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
            $this->arguments = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->options = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->count_processed = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
            $this->count_not_processed = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
            $this->is_running = ($row[$startcol + 6] !== null) ? (boolean) $row[$startcol + 6] : null;
            $this->last_id_processed = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
            $this->started_at = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
            $this->ended_at = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
            $this->is_ok = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
            $this->error_code = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
            $this->log = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
            $this->log_file = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
            $this->comments = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
            $this->created_at = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
            $this->updated_at = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 17; // 17 = tlTaskPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating tlTask object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(tlTaskPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = tlTaskPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(tlTaskPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = tlTaskQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BasetlTask:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BasetlTask:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(tlTaskPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BasetlTask:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            // symfony_timestampable behavior
            if ($this->isModified() && !$this->isColumnModified(tlTaskPeer::UPDATED_AT))
            {
                $this->setUpdatedAt(time());
            }
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
                // symfony_timestampable behavior
                if (!$this->isColumnModified(tlTaskPeer::CREATED_AT))
                {
                  $this->setCreatedAt(time());
                }

            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BasetlTask:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                tlTaskPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = tlTaskPeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . tlTaskPeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(tlTaskPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(tlTaskPeer::TASK)) {
            $modifiedColumns[':p' . $index++]  = '`TASK`';
        }
        if ($this->isColumnModified(tlTaskPeer::ARGUMENTS)) {
            $modifiedColumns[':p' . $index++]  = '`ARGUMENTS`';
        }
        if ($this->isColumnModified(tlTaskPeer::OPTIONS)) {
            $modifiedColumns[':p' . $index++]  = '`OPTIONS`';
        }
        if ($this->isColumnModified(tlTaskPeer::COUNT_PROCESSED)) {
            $modifiedColumns[':p' . $index++]  = '`COUNT_PROCESSED`';
        }
        if ($this->isColumnModified(tlTaskPeer::COUNT_NOT_PROCESSED)) {
            $modifiedColumns[':p' . $index++]  = '`COUNT_NOT_PROCESSED`';
        }
        if ($this->isColumnModified(tlTaskPeer::IS_RUNNING)) {
            $modifiedColumns[':p' . $index++]  = '`IS_RUNNING`';
        }
        if ($this->isColumnModified(tlTaskPeer::LAST_ID_PROCESSED)) {
            $modifiedColumns[':p' . $index++]  = '`LAST_ID_PROCESSED`';
        }
        if ($this->isColumnModified(tlTaskPeer::STARTED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`STARTED_AT`';
        }
        if ($this->isColumnModified(tlTaskPeer::ENDED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`ENDED_AT`';
        }
        if ($this->isColumnModified(tlTaskPeer::IS_OK)) {
            $modifiedColumns[':p' . $index++]  = '`IS_OK`';
        }
        if ($this->isColumnModified(tlTaskPeer::ERROR_CODE)) {
            $modifiedColumns[':p' . $index++]  = '`ERROR_CODE`';
        }
        if ($this->isColumnModified(tlTaskPeer::LOG)) {
            $modifiedColumns[':p' . $index++]  = '`LOG`';
        }
        if ($this->isColumnModified(tlTaskPeer::LOG_FILE)) {
            $modifiedColumns[':p' . $index++]  = '`LOG_FILE`';
        }
        if ($this->isColumnModified(tlTaskPeer::COMMENTS)) {
            $modifiedColumns[':p' . $index++]  = '`COMMENTS`';
        }
        if ($this->isColumnModified(tlTaskPeer::CREATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_AT`';
        }
        if ($this->isColumnModified(tlTaskPeer::UPDATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`UPDATED_AT`';
        }

        $sql = sprintf(
            'INSERT INTO `tl_tasks` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`TASK`':
                        $stmt->bindValue($identifier, $this->task, PDO::PARAM_STR);
                        break;
                    case '`ARGUMENTS`':
                        $stmt->bindValue($identifier, $this->arguments, PDO::PARAM_STR);
                        break;
                    case '`OPTIONS`':
                        $stmt->bindValue($identifier, $this->options, PDO::PARAM_STR);
                        break;
                    case '`COUNT_PROCESSED`':
                        $stmt->bindValue($identifier, $this->count_processed, PDO::PARAM_INT);
                        break;
                    case '`COUNT_NOT_PROCESSED`':
                        $stmt->bindValue($identifier, $this->count_not_processed, PDO::PARAM_INT);
                        break;
                    case '`IS_RUNNING`':
                        $stmt->bindValue($identifier, (int) $this->is_running, PDO::PARAM_INT);
                        break;
                    case '`LAST_ID_PROCESSED`':
                        $stmt->bindValue($identifier, $this->last_id_processed, PDO::PARAM_INT);
                        break;
                    case '`STARTED_AT`':
                        $stmt->bindValue($identifier, $this->started_at, PDO::PARAM_STR);
                        break;
                    case '`ENDED_AT`':
                        $stmt->bindValue($identifier, $this->ended_at, PDO::PARAM_STR);
                        break;
                    case '`IS_OK`':
                        $stmt->bindValue($identifier, (int) $this->is_ok, PDO::PARAM_INT);
                        break;
                    case '`ERROR_CODE`':
                        $stmt->bindValue($identifier, $this->error_code, PDO::PARAM_INT);
                        break;
                    case '`LOG`':
                        $stmt->bindValue($identifier, $this->log, PDO::PARAM_STR);
                        break;
                    case '`LOG_FILE`':
                        $stmt->bindValue($identifier, $this->log_file, PDO::PARAM_STR);
                        break;
                    case '`COMMENTS`':
                        $stmt->bindValue($identifier, $this->comments, PDO::PARAM_STR);
                        break;
                    case '`CREATED_AT`':
                        $stmt->bindValue($identifier, $this->created_at, PDO::PARAM_STR);
                        break;
                    case '`UPDATED_AT`':
                        $stmt->bindValue($identifier, $this->updated_at, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
            $pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            if (($retval = tlTaskPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }



            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = tlTaskPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getTask();
                break;
            case 2:
                return $this->getArguments();
                break;
            case 3:
                return $this->getOptions();
                break;
            case 4:
                return $this->getCountProcessed();
                break;
            case 5:
                return $this->getCountNotProcessed();
                break;
            case 6:
                return $this->getIsRunning();
                break;
            case 7:
                return $this->getLastIdProcessed();
                break;
            case 8:
                return $this->getStartedAt();
                break;
            case 9:
                return $this->getEndedAt();
                break;
            case 10:
                return $this->getIsOk();
                break;
            case 11:
                return $this->getErrorCode();
                break;
            case 12:
                return $this->getLog();
                break;
            case 13:
                return $this->getLogFile();
                break;
            case 14:
                return $this->getComments();
                break;
            case 15:
                return $this->getCreatedAt();
                break;
            case 16:
                return $this->getUpdatedAt();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array())
    {
        if (isset($alreadyDumpedObjects['tlTask'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['tlTask'][$this->getPrimaryKey()] = true;
        $keys = tlTaskPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getTask(),
            $keys[2] => $this->getArguments(),
            $keys[3] => $this->getOptions(),
            $keys[4] => $this->getCountProcessed(),
            $keys[5] => $this->getCountNotProcessed(),
            $keys[6] => $this->getIsRunning(),
            $keys[7] => $this->getLastIdProcessed(),
            $keys[8] => $this->getStartedAt(),
            $keys[9] => $this->getEndedAt(),
            $keys[10] => $this->getIsOk(),
            $keys[11] => $this->getErrorCode(),
            $keys[12] => $this->getLog(),
            $keys[13] => $this->getLogFile(),
            $keys[14] => $this->getComments(),
            $keys[15] => $this->getCreatedAt(),
            $keys[16] => $this->getUpdatedAt(),
        );

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = tlTaskPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setTask($value);
                break;
            case 2:
                $this->setArguments($value);
                break;
            case 3:
                $this->setOptions($value);
                break;
            case 4:
                $this->setCountProcessed($value);
                break;
            case 5:
                $this->setCountNotProcessed($value);
                break;
            case 6:
                $this->setIsRunning($value);
                break;
            case 7:
                $this->setLastIdProcessed($value);
                break;
            case 8:
                $this->setStartedAt($value);
                break;
            case 9:
                $this->setEndedAt($value);
                break;
            case 10:
                $this->setIsOk($value);
                break;
            case 11:
                $this->setErrorCode($value);
                break;
            case 12:
                $this->setLog($value);
                break;
            case 13:
                $this->setLogFile($value);
                break;
            case 14:
                $this->setComments($value);
                break;
            case 15:
                $this->setCreatedAt($value);
                break;
            case 16:
                $this->setUpdatedAt($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = tlTaskPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setTask($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setArguments($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setOptions($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setCountProcessed($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setCountNotProcessed($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setIsRunning($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setLastIdProcessed($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setStartedAt($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setEndedAt($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setIsOk($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setErrorCode($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setLog($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setLogFile($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setComments($arr[$keys[14]]);
        if (array_key_exists($keys[15], $arr)) $this->setCreatedAt($arr[$keys[15]]);
        if (array_key_exists($keys[16], $arr)) $this->setUpdatedAt($arr[$keys[16]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(tlTaskPeer::DATABASE_NAME);

        if ($this->isColumnModified(tlTaskPeer::ID)) $criteria->add(tlTaskPeer::ID, $this->id);
        if ($this->isColumnModified(tlTaskPeer::TASK)) $criteria->add(tlTaskPeer::TASK, $this->task);
        if ($this->isColumnModified(tlTaskPeer::ARGUMENTS)) $criteria->add(tlTaskPeer::ARGUMENTS, $this->arguments);
        if ($this->isColumnModified(tlTaskPeer::OPTIONS)) $criteria->add(tlTaskPeer::OPTIONS, $this->options);
        if ($this->isColumnModified(tlTaskPeer::COUNT_PROCESSED)) $criteria->add(tlTaskPeer::COUNT_PROCESSED, $this->count_processed);
        if ($this->isColumnModified(tlTaskPeer::COUNT_NOT_PROCESSED)) $criteria->add(tlTaskPeer::COUNT_NOT_PROCESSED, $this->count_not_processed);
        if ($this->isColumnModified(tlTaskPeer::IS_RUNNING)) $criteria->add(tlTaskPeer::IS_RUNNING, $this->is_running);
        if ($this->isColumnModified(tlTaskPeer::LAST_ID_PROCESSED)) $criteria->add(tlTaskPeer::LAST_ID_PROCESSED, $this->last_id_processed);
        if ($this->isColumnModified(tlTaskPeer::STARTED_AT)) $criteria->add(tlTaskPeer::STARTED_AT, $this->started_at);
        if ($this->isColumnModified(tlTaskPeer::ENDED_AT)) $criteria->add(tlTaskPeer::ENDED_AT, $this->ended_at);
        if ($this->isColumnModified(tlTaskPeer::IS_OK)) $criteria->add(tlTaskPeer::IS_OK, $this->is_ok);
        if ($this->isColumnModified(tlTaskPeer::ERROR_CODE)) $criteria->add(tlTaskPeer::ERROR_CODE, $this->error_code);
        if ($this->isColumnModified(tlTaskPeer::LOG)) $criteria->add(tlTaskPeer::LOG, $this->log);
        if ($this->isColumnModified(tlTaskPeer::LOG_FILE)) $criteria->add(tlTaskPeer::LOG_FILE, $this->log_file);
        if ($this->isColumnModified(tlTaskPeer::COMMENTS)) $criteria->add(tlTaskPeer::COMMENTS, $this->comments);
        if ($this->isColumnModified(tlTaskPeer::CREATED_AT)) $criteria->add(tlTaskPeer::CREATED_AT, $this->created_at);
        if ($this->isColumnModified(tlTaskPeer::UPDATED_AT)) $criteria->add(tlTaskPeer::UPDATED_AT, $this->updated_at);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(tlTaskPeer::DATABASE_NAME);
        $criteria->add(tlTaskPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of tlTask (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setTask($this->getTask());
        $copyObj->setArguments($this->getArguments());
        $copyObj->setOptions($this->getOptions());
        $copyObj->setCountProcessed($this->getCountProcessed());
        $copyObj->setCountNotProcessed($this->getCountNotProcessed());
        $copyObj->setIsRunning($this->getIsRunning());
        $copyObj->setLastIdProcessed($this->getLastIdProcessed());
        $copyObj->setStartedAt($this->getStartedAt());
        $copyObj->setEndedAt($this->getEndedAt());
        $copyObj->setIsOk($this->getIsOk());
        $copyObj->setErrorCode($this->getErrorCode());
        $copyObj->setLog($this->getLog());
        $copyObj->setLogFile($this->getLogFile());
        $copyObj->setComments($this->getComments());
        $copyObj->setCreatedAt($this->getCreatedAt());
        $copyObj->setUpdatedAt($this->getUpdatedAt());
        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return tlTask Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return tlTaskPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new tlTaskPeer();
        }

        return self::$peer;
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->task = null;
        $this->arguments = null;
        $this->options = null;
        $this->count_processed = null;
        $this->count_not_processed = null;
        $this->is_running = null;
        $this->last_id_processed = null;
        $this->started_at = null;
        $this->ended_at = null;
        $this->is_ok = null;
        $this->error_code = null;
        $this->log = null;
        $this->log_file = null;
        $this->comments = null;
        $this->created_at = null;
        $this->updated_at = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
        } // if ($deep)

    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(tlTaskPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BasetlTask:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
