<?php



/**
 * This class defines the structure of the 'tl_tasks' table.
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Sun Nov 16 08:50:32 2014
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    propel.generator.plugins.sfTaskLoggerPlugin.lib.model.map
 */
class tlTaskTableMap extends TableMap
{

    /**
     * The (dot-path) name of this class
     */
    const CLASS_NAME = 'plugins.sfTaskLoggerPlugin.lib.model.map.tlTaskTableMap';

    /**
     * Initialize the table attributes, columns and validators
     * Relations are not initialized by this method since they are lazy loaded
     *
     * @return void
     * @throws PropelException
     */
    public function initialize()
    {
        // attributes
        $this->setName('tl_tasks');
        $this->setPhpName('tlTask');
        $this->setClassname('tlTask');
        $this->setPackage('plugins.sfTaskLoggerPlugin.lib.model');
        $this->setUseIdGenerator(true);
        // columns
        $this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
        $this->addColumn('TASK', 'Task', 'VARCHAR', true, 255, null);
        $this->addColumn('ARGUMENTS', 'Arguments', 'VARCHAR', false, 255, null);
        $this->addColumn('OPTIONS', 'Options', 'VARCHAR', false, 255, null);
        $this->addColumn('COUNT_PROCESSED', 'CountProcessed', 'INTEGER', true, null, 0);
        $this->addColumn('COUNT_NOT_PROCESSED', 'CountNotProcessed', 'INTEGER', true, null, 0);
        $this->addColumn('IS_RUNNING', 'IsRunning', 'BOOLEAN', true, 1, false);
        $this->addColumn('LAST_ID_PROCESSED', 'LastIdProcessed', 'INTEGER', false, null, null);
        $this->addColumn('STARTED_AT', 'StartedAt', 'TIMESTAMP', false, null, null);
        $this->addColumn('ENDED_AT', 'EndedAt', 'TIMESTAMP', false, null, null);
        $this->addColumn('IS_OK', 'IsOk', 'BOOLEAN', true, 1, false);
        $this->addColumn('ERROR_CODE', 'ErrorCode', 'INTEGER', false, null, null);
        $this->addColumn('LOG', 'Log', 'LONGVARCHAR', false, null, null);
        $this->addColumn('LOG_FILE', 'LogFile', 'VARCHAR', false, 255, null);
        $this->addColumn('COMMENTS', 'Comments', 'LONGVARCHAR', false, null, null);
        $this->addColumn('CREATED_AT', 'CreatedAt', 'TIMESTAMP', false, null, null);
        $this->addColumn('UPDATED_AT', 'UpdatedAt', 'TIMESTAMP', false, null, null);
        // validators
    } // initialize()

    /**
     * Build the RelationMap objects for this table relationships
     */
    public function buildRelations()
    {
    } // buildRelations()

    /**
     *
     * Gets the list of behaviors registered for this table
     *
     * @return array Associative array (name => parameters) of behaviors
     */
    public function getBehaviors()
    {
        return array(
            'symfony' => array('form' => 'true', 'filter' => 'true', ),
            'symfony_behaviors' => array(),
            'symfony_timestampable' => array('create_column' => 'created_at', 'update_column' => 'updated_at', ),
        );
    } // getBehaviors()

} // tlTaskTableMap
